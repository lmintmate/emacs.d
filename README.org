#+title: My literate Emacs configuration
# Theme for html exporting from [[https://github.com/fniessen/org-html-themes][GitHub - fniessen/org-html-themes]]

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="Emacs" src="https://frama.link/emacsd-26-2-badge"></a>

#+html: <a href="https://orgmode.org/"><img alt="Org-mode" src="https://img.shields.io/badge/Powered%20by-Org--mode-blueviolet.svg?style=for-the-badge&color=8e44bc"></a>

* Table of Contents                                                     :TOC_3:
- [[#introduction][Introduction]]
  - [[#notes-on-the-evolution-of-my-emacs-initialisation][Notes on the evolution of my emacs initialisation]]
- [[#main-configuration][Main configuration]]
- [[#what-precedes-this-file-the-contents-of-initel][What precedes this file: the contents of init.el]]
  - [[#add-melpa-and-org-repositories][Add MELPA and org repositories]]
  - [[#auto-install-packages][Auto-install packages]]
  - [[#force-packageel-to-install-the-latest-version-of-org-mode][Force package.el to install the latest version of org-mode]]
  - [[#ensure-utf-8][Ensure utf-8]]
  - [[#require-org][Require Org]]
  - [[#where-the-magic-happens][Where the magic happens]]
- [[#setting-the-default-frame-parameters-on-windows][Setting the default frame parameters on Windows]]
- [[#disabling-the-tool-bar][Disabling the tool bar]]
- [[#setting-the-font][Setting the font]]
- [[#setting-up-my-must-use-theme---blue-mood-theme][Setting up my must use theme - Blue Mood theme.]]
  - [[#mode-line-customisation][Mode line customisation]]
  - [[#hide-line-between-fringes][Hide line between fringes]]
- [[#manually-loading-external-files][Manually loading external files]]
  - [[#where-i-bootstrap-the-elisp-files][Where I bootstrap the elisp files]]
  - [[#where-i-tell-emacs-where-is-my-personal-lisp-directory][Where I tell Emacs where is my personal lisp directory.]]
  - [[#where-i-load-the-specific-packages][Where I load the specific packages]]
    - [[#loading-the-package-for-polytonic-greek][Loading the package for polytonic greek]]
    - [[#loading-la-carte-for-executing-menu-commands-from-the-keyboard][Loading La Carte (for executing menu commands from the keyboard)]]
- [[#startup-screen-and-scratch-buffer-options][Startup screen and scratch buffer options]]
  - [[#inhibit-startup-screen][Inhibit startup screen]]
  - [[#scratch-buffer-message][Scratch buffer message]]
  - [[#new-message-for-the-startup-echo-area][New message for the startup echo area]]
- [[#nationality-parameters][Nationality parameters]]
  - [[#setting-the-calendar-up-in-greek][Setting the calendar up in Greek.]]
  - [[#set-input-method-to-greek][Set input method to greek]]
  - [[#redirect-commands-with-greek-letters-to-the-correct-commands][Redirect commands with Greek letters to the correct commands]]
- [[#evil][Evil]]
  - [[#configuring-evil-itself][Configuring evil itself]]
    - [[#preliminaries-before-loading-evil][Preliminaries before loading evil]]
    - [[#load-evil][Load evil]]
    - [[#set-evil-keybindings][Set evil keybindings]]
  - [[#enable-and-configure-evil-packages][Enable and configure evil packages]]
    - [[#evil-goggles][Evil goggles]]
    - [[#evil-fringe-mark][evil-fringe-mark]]
- [[#misc-configuration-parameters][Misc configuration parameters]]
  - [[#the-bell][The Bell]]
  - [[#separate-custom-file][Separate custom file]]
  - [[#set-the-title-bar-to-show-buffer-name][Set the title bar to show buffer name]]
  - [[#time-in-modeline][Time in modeline]]
  - [[#do-not-autosave-nor-make-any-backup-files][Do not autosave nor make any backup files.]]
  - [[#do-not-create-lockfiles][Do not create lockfiles]]
  - [[#delete-by-moving-to-the-trash][Delete by moving to the trash]]
  - [[#delete-selection-mode][Delete selection mode.]]
  - [[#disable-double-space-as-end-of-sentence][Disable double space as end of sentence]]
  - [[#disabling-menu-bar-when-emacs-is-run-in-a--terminal][Disabling menu bar when emacs is run in a  terminal.]]
  - [[#toggling-the-menu-bar-with-a-keyboard-shortcut][Toggling the menu bar with a keyboard shortcut.]]
  - [[#toggling-the-scroll-bar-with-a-keyboard-shortcut][Toggling the scroll bar with a keyboard shortcut]]
  - [[#toggle-maximizing-the-frame][Toggle maximizing the frame]]
  - [[#visual-line-mode-only-for-text-mode][Visual line mode only for text mode.]]
  - [[#associate-txt-files-with-the-goto-address-mode][Associate .txt files with the goto-address-mode.]]
  - [[#bind-m-o-to-other-window][Bind M-o to other-window]]
  - [[#adds-shift--arrows-for-changing-between-visible-buffers-in-addition-to-m-o][Adds shift + arrows for changing between visible buffers, in addition to M-o.]]
  - [[#add-command-to-mark-a-line-in-emacs-state][Add command to mark a line in emacs state]]
  - [[#highlight-specific-words-in-prog-mode][Highlight specific words in prog-mode]]
  - [[#drag-selected-text-with-the-mouse-in-emacs][Drag selected text with the mouse in emacs]]
  - [[#bind-zap-up-to-char-command-in-emacs-state][Bind zap-up-to-char command in emacs state]]
  - [[#enable-display-line-numbers-mode][Enable display-line-numbers-mode]]
    - [[#disable-it-however-for-lisp-interaction-mode][Disable it however for lisp-interaction-mode]]
    - [[#make-the-current-line-bold][Make the current line bold]]
- [[#recent-files][Recent files]]
- [[#settings-for-multiple-buffer-management][Settings for multiple buffer management]]
- [[#ibuffer][Ibuffer]]
  - [[#replace-buffer-menu][Replace buffer-menu.]]
  - [[#set-buffer-groups][Set buffer groups.]]
  - [[#dont-show-filter-groups-if-there-are-no-buffers-in-that-group][Don't show filter groups if there are no buffers in that group.]]
  - [[#use-human-readable-size-column][Use human readable size column.]]
- [[#dired-mode-configurations][Dired Mode Configurations]]
  - [[#enable-dired-icon-mode][Enable dired icon mode.]]
    - [[#setting-to-make-the-image-size-of-the-dired-icon-icons-bigger][Setting to make the image size of the dired-icon icons bigger.]]
  - [[#modify-evil-keybindings-for-dired-mode-map][Modify evil keybindings for dired-mode-map]]
  - [[#dired-listing][Dired listing]]
    - [[#listing-switches][Listing switches.]]
    - [[#sort-files-by-modified-date][Sort files by modified date.]]
    - [[#hide-the-details-on-dired-mode-for-a-cleaner-appearance][Hide the details on dired mode, for a cleaner appearance.]]
  - [[#dired-dwim-target][Dired dwim target]]
- [[#org-mode-configuration][Org Mode configuration]]
  - [[#hook-toc-org-to-org-mode][Hook toc-org to org-mode]]
  - [[#org-mouse][Org-mouse]]
  - [[#define-c-c-l-as-the-keybinding-to-org-cliplink][Define C-c l as the keybinding to org-cliplink.]]
  - [[#define-c-c-d-as-the-keybinding-to-org-toggle-link-display][Define C-c d as the keybinding to org-toggle-link-display]]
  - [[#define-c-c-e-as-the-keybinding-to-org-emphasize][Define C-c e as the keybinding to org-emphasize]]
  - [[#set-keywords-for-org-progress-states][Set keywords for Org progress states.]]
  - [[#special-ctrl-ae-behavior-in-org-mode][Special Ctrl-a/e behavior in org mode]]
  - [[#use-query-to-confirm-killing-of-hidden-subtrees][Use query to confirm killing of hidden subtrees]]
  - [[#override-shift--arrows-in-certain-places-in-favor-of-windmove][Override shift + arrows in certain places in favor of windmove]]
  - [[#auto-adjust-footnotes][Auto adjust footnotes]]
  - [[#follow-link-in-orgmode-by-pressing-enter-key][Follow link in orgmode by pressing Enter key]]
  - [[#strikethrough-for-done-tasks][Strikethrough for Done tasks]]
  - [[#color-only-the-stars-for-the-org-mode-levels][Color only the stars for the org mode levels]]
  - [[#custom-color-for-headline-levels-2-and-3][Custom color for headline levels 2 and 3]]
  - [[#custom-color-for-org-source-code-blocks][Custom color for org source code blocks]]
  - [[#custom-postamble-in-html-export][Custom postamble in html export]]
  - [[#add-shortcut-templates-for-emacs-lisp-org-and-title][Add shortcut templates for emacs lisp, org and title]]
  - [[#enable-speed-keys][Enable Speed keys]]
- [[#undo-tree][Undo tree]]
- [[#web-searchel-package-config][Web-search.el package config]]
  - [[#set-the-default-search-provider][Set the default search provider]]
- [[#drag-stuff-package-config][Drag-stuff package config]]
- [[#espy-password-fetcher-package-config][Espy password fetcher package config]]
- [[#smex][Smex]]
- [[#ivy-counsel-swiper-configuration][Ivy, counsel, swiper configuration]]
  - [[#ivy-rich][Ivy rich]]
  - [[#change-color-of-ivy-org-face][Change color of ivy-org face]]
- [[#terminal-configuration][Terminal configuration]]
  - [[#kill-terminal-buffer-automatically-when-exiting][Kill terminal buffer automatically when exiting]]
  - [[#redefine-keys-in-term-modes-to-their-normal-behavior][Redefine keys in term modes to their normal behavior]]
- [[#magit][Magit]]
  - [[#set-magit-faces][Set magit faces]]
  - [[#magit-status-keybinding][Magit-status keybinding]]
- [[#emacs-lisp-related-configuration][Emacs-lisp related configuration]]
  - [[#enable-show-paren-mode][Enable show-paren-mode]]
  - [[#enable-electric-pair-mode][Enable electric-pair-mode]]
- [[#hideshow-mode][HideShow mode]]
- [[#diminish-mode-and-dim][Diminish mode and Dim]]
- [[#ediff][Ediff]]
  - [[#operate-ediff-through-dired][Operate ediff through dired]]

* Introduction
Here begins my literate emacs configuration. I tended to comment my init file a whole lot, so I figured I preferred a better interface for the comments.
** Notes on the evolution of my emacs initialisation
I first started off with the .emacs file in my home directory. I had to look for it though amongst all the other hidden files in that directory. So, especially after I found out I could version-control my emacs dotfiles, I switched to .emacs.d/init.el. so that I could have my config in one place. That setup still wasn’t satisfactory enough though. So when I found out I could have my config in an org file, which would allow my comments to truly stand out, I was intrigued and wanted to accomplish that. I initially thought however it'd be too hard to do (I do think that a lot when trying new ways of doing things…). I took the plunge however, and it turned out to be way easier than I thought. So I now keep most my config in this here file, and use init.el only for the preliminary configs that need to be loaded before this file.
* Main configuration
* What precedes this file: the contents of init.el
In order for this literate configuration to be complete, I need to quote first the code snippets I use in the init.el file, as to show how this magic happens in the first place.
** Add MELPA and org repositories
First I add the MELPA and org repositories. I do this in init.el and not here as I use the version of Org from its own repo, which I need in order to load this very file. The code I use for this is taken from [[https://melpa.org/#/getting-started][MELPA's Getting Started section]] and it accounts for the incompatibility of Windows with Emacs's https support system, GnuTLS, by using http on Windows if GnuTLS isn't available. [[http://www.lonecpluspluscoder.com/2015/08/01/adding-tls-support-to-emacs-24-5-on-windows/][This article]] might be helpful in case I absolutely have to install GnuTLS on Windows.
#+begin_example
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t))
(package-initialize)
#+end_example
** Auto-install packages
From [[http://aaronbedra.com/emacs.d/#default-packages][Aaron Bedra's Emacs 24 Configuration]].\\
The first part of the code defines the packages to be installed ; from this list are absent the packages installed manually, present in the lisp folder. The second part of the code does the following: when Emacs boots, it checks to make sure all of the packages defined in lmintmate/packages are installed. If not, it has the package manager take care of it.\\
#+begin_example
(defvar lmintmate/packages '(color-theme-modern
counsel
diminish
dired-icon
drag-stuff
espy
evil
evil-goggles
free-keys
ivy-rich
rainbow-mode
smex
toc-org
transpose-frame
try
undo-tree
vimrc-mode
web-search)
  "Core packages")

(unless package-archive-contents
  (message "%s" "Refreshing package database...")
  (package-refresh-contents))
  (dolist (pkg lmintmate/packages)
    (unless (package-installed-p pkg)
      (package-install pkg)))

;; Conditionals for installing of certain packages (idea from https://github.com/pgdouyon/dotfiles/blob/master/emacs)

;; Packages for use only on my Linux system

(when (eq system-type 'gnu/linux)
(unless (package-installed-p 'magit)
  (package-install 'magit)))

;; Packages that require emacs 24.4 and up

(unless (version< emacs-version "24.4")
(unless (package-installed-p 'org-cliplink)
  (package-install 'org-cliplink)))

(unless (version< emacs-version "24.4")
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode)))

(unless (version< emacs-version "24.4")
(unless (package-installed-p 'dim)
  (package-install 'dim)))

(unless (version< emacs-version "25")
(unless (package-installed-p 'evil-fringe-mark)
  (package-install 'evil-fringe-mark)))
#+end_example
** Force package.el to install the latest version of org-mode
Because org-mode is already builtin, it doesn't get reinstalled automatically from the org-mode repository, as it should. Thus, if I want the latest org-mode version, I would normally have to install it manually from ~package-list-packages~, and only then it would overtake the builtin version (see also [[https://emacs.stackexchange.com/questions/31825/cant-install-org-through-package-manager#comment64743_31837][here]]). However trying to start emacs without the latest version of org-mode installed causes emacs to error out saying that org-tempo wasn't detected, because I require that later in the config and it apparently wasn't included in the built in emacs version. I thus found [[https://github.com/jwiegley/use-package/issues/319#issuecomment-363981027][here]] a solution that looks for the latest version of org with a regex and, if it doesn't find it, proceeds to install it from the org repository.
#+begin_example
;; enforce installing the latest version of org mode
(unless (file-expand-wildcards (concat package-user-dir "/org-[0-9]*"))
  (package-install (elt (cdr (assoc 'org package-archive-contents)) 0)))
#+end_example
** Ensure utf-8
Needed for Windows
#+begin_example
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_example
** Require Org
#+begin_example
(require 'org)
#+end_example
** Where the magic happens
#+begin_example
(org-babel-load-file (concat user-emacs-directory "README.org"))
#+end_example
This snippet is the one that does the heavy work. It tracks down all the parts that say ~#+begin_src emacs-lisp~ and evaluates them as emacs lisp code, creating a separate README.el in the process, as to reduce load time for the next run. Every time the org file is modified, the .el file is created anew.\\
And now these are taken care of, let's proceed to the configuration present in this very file.
* Setting the default frame parameters on Windows
On Linux, Emacs places its frame just fine, but on Windows it places it on the left side and in such a manner that the mode line was hidden below the Windows toolbar, which meant I had to manually resize the frame every single time (needless to say, this got old very quickly). Here is thus some config to place the default frame near the center of the screen and above the Windows toolbar.
#+begin_src emacs-lisp
;; set frame
(when (eq system-type 'windows-nt)
(setq default-frame-alist '((top . 5) (left . 220) (width . 80) (height . 30))))
#+end_src
* Disabling the tool bar
The snippet below disables tool-bar-mode. I placed it this early in the config so that the toolbar won't be loaded and disabled afterwards, but be disabled from the get-go (I had some glitches with the title screen when I had it further down).
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
* Setting the font
Here, I'm setting the font and the font size. The default font emacs by itself used on my machine appeals a lot to me, so when I found out it was DejaVu Sans Mono, I decided to put it in the config, in case I move to another computer where the font might suddenly be something else entirely I won't like. I also set the font size to 14. The default size seems way too small for me, as if I were trying to watch a bunch of ants...
On systems different from the one I'm currently on (which is Linux Mint MATE), the fonts might look thicker than they should, to an unappealing degree. This can be solved (on Linux systems at least) by going to Appearance > Fonts, and setting hinting to light instead of full. On Windows, where DejaVu Sans Mono is less likely to be preinstalled, Consolas will be used as a fallback.
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
(if (member "DejaVu Sans Mono" (font-family-list))
(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 140)
(set-face-attribute 'default nil :family "Consolas" :height 140))
(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 140))
#+end_src
* Setting up my must use theme - Blue Mood theme.
I wasn't satisfied with the default Adawaita theme (but then who is?). I tried to find another theme, but most of them (even the popular ones) didn't satisfy my tastes. But when I found Blue Mood, I knew it was the one!\\
In case you haven't encountered it (not too unlikely), it's because it's a part of the [[https://github.com/emacs-jp/replace-colorthemes][color-theme-modern]] package, which apparently recreates older themes for Emacs 24+. In the repository I linked just now, you can see all the other included themes too, complete with screenshots, and, of course, the way to apply them to your init file.\\
I also modified the fringe color to the same background color as the rest of the theme, as its original color was black, and didn't fit in too well with the rest of the colorscheme for me, and changed the highlight color, as it had the same color as the one of the region so that I couldn't distinguish a highlighted region when hl-line-mode was turned on. In addition I modified the color of the edited state of a version-controlled file ~vc-edited-state~ so that it is more apparent.
#+begin_src emacs-lisp
(load-theme 'blue-mood t t)
(enable-theme 'blue-mood)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fringe ((t (:background "DodgerBlue4"))))
 '(font-lock-negation-char-face ((t (:foreground "tomato"))))
 '(font-lock-doc-face ((t (:foreground "cyan"))))
 '(highlight ((t (:background "#235c94"))))
 '(vc-edited-state ((t (:background "tomato1" :foreground "black")))))
;; setting so that hl-line-mode won't affect syntax coloring
(set-face-foreground 'highlight nil)
#+end_src
** Mode line customisation
Where I give it a flat look.
#+begin_src emacs-lisp
(custom-set-faces
 '(mode-line ((t (:background "grey75" :foreground "black"))))
 '(mode-line-buffer-id ((t (:weight normal))))
 '(mode-line-highlight ((t (:box (:line-width 1 :color "grey20")))))
 '(mode-line-inactive ((t (:background "grey30" :foreground "grey80")))))
#+end_src
** Hide line between fringes
Remove the strange white line between two fringes, which appears when the scrollbar is hidden (from [[https://ogbe.net/emacsconfig.html][Dennis Ogbe's Emacs configuration file]]).
#+begin_src emacs-lisp
(set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))
#+end_src
* Manually loading external files
I use a couple external lisp files, and I thus need to load my personal lisp directory.
** Where I bootstrap the elisp files
In this section I have some code in emacs lisp that downloads the lisp files I use and places them in the correct place. Specifically, it checks whether the files exist, and if they don't, first creates the containing directory, if it doesn't exist, and then proceeds to download and store the files.
#+begin_src emacs-lisp
(setq lisp-directory (concat user-emacs-directory "lisp"))

(when (or (not (file-exists-p (expand-file-name "greek.el" lisp-directory))) (not (file-exists-p (expand-file-name "lacarte.el" lisp-directory))))
  (unless (file-directory-p lisp-directory) (make-directory lisp-directory))
  (unless (file-exists-p (expand-file-name "greek.el" lisp-directory))
    (url-copy-file "http://myria.math.aegean.gr/~atsol/emacs-unicode/greek.el" (expand-file-name "greek.el" lisp-directory)))
  (unless (file-exists-p (expand-file-name "lacarte.el" lisp-directory))
    (url-copy-file "https://www.emacswiki.org/emacs/download/lacarte.el" (expand-file-name "lacarte.el" lisp-directory))))
#+end_src
** Where I tell Emacs where is my personal lisp directory.
#+begin_src emacs-lisp
(add-to-list 'load-path lisp-directory)
#+end_src
** Where I load the specific packages
In this section, I load the lisp files previously downloaded.
*** Loading the package for polytonic greek
I’m used to writing Greek with the modern Greek layout, which is quite different from the greek-babel polytonic layout in a way jarring to me. I tried to find a way to solve my problem, and found out with relief that I didn’t need to reinvent the wheel, as someone had already made a package for what I wanted ; a layout that would provide polytonic Greek while also keeping the regular keyboard layout I was used to.\\
 This solution to my problem can be found [[http://myria.math.aegean.gr/~atsol/emacs-unicode/][here]](look under the compiled greek.elc link for the greek.el source).
#+begin_src emacs-lisp
(load "greek")
#+end_src
*** Loading La Carte (for executing menu commands from the keyboard)
[[https://www.emacswiki.org/emacs/LaCarte][La Carte]] is a package that allows searching and executing menu commands from the keyboard, in a way similar to ivy (in fact, when ivy is installed, this package also benefits from ivy integration, which makes its autocompletion so much better). There is also a builtin in emacs command ~tmm-menubar~, but that one goes literally from menu to submenu, just with keyboard shortcuts instead of mouse clicks, and is thus much less discoverable. I also set up here a keybinding for lacarte (specifically for ~lacarte-execute-menu-command~, because ~lacarte-execute-command~ also includes regular commands, and ~counsel-M-x~ already takes care of that).
#+begin_src emacs-lisp
(require 'lacarte)
(global-set-key (kbd "\C-c.") 'lacarte-execute-menu-command)
#+end_src
* Startup screen and scratch buffer options
** Inhibit startup screen
At this point I only use the quick link to the Customize interface, so I thought I’d hide it altogether.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
** Scratch buffer message
I added a reminder for the links to ~about-emacs~ and to the Customize interface to the default message.
#+begin_src emacs-lisp
(setq initial-scratch-message
   ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.
;; Reminder: To see the startup screen's basic content, use M-x about-emacs.
;; To quickly access the Customize interface, use M-x customize.
")
#+end_src
I decided not to change the scratch buffer’s major mode however, because, as weird as it may sound, I like [[https://en.wikipedia.org/wiki/Polish_notation][prefix notation]] a lot (and think that the [[https://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish notation]] is overrated in comparison), and want to keep having it as a nifty little prefix calculation mode.
** New message for the startup echo area
#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Καλωσήλθες!"))
#+end_src
* Nationality parameters
** Setting the calendar up in Greek.
See also [[https://www.emacswiki.org/emacs/CalendarLocalization][EmacsWiki: Calendar Localization]].
#+begin_src emacs-lisp
(setq calendar-week-start-day 1
          calendar-day-name-array ["Κυριακή" "Δευτέρα" "Τρίτη" "Τετάρτη"
                                   "Πέμπτη" "Παρασκευή" "Σάββατο"]
          calendar-month-name-array ["Ιανουάριος" "Φεβρουάριος" "Μάρτιος"
                                     "Απρίλιος" "Μάιος" "Ιούνιος"
                                     "Ιούλιος" "Αύγουστος" "Σεπτέμβριος"
                                     "Οκτώβριος" "Νοέμβριος" "Δεκέμβριος"])
#+end_src
** Set input method to greek
In order to be able to write greek with the keyboard set to English (useful for those pesky Latin C- and M- shortcuts). Toggle with ~C-\~. ~set-input-method~ makes the set input method the default when emacs starts up, which usually isn't desired. Contrarily ~setq default-input-method~ sets the input method as available with ~toggle-input-method~, but doesn't make it the default when emacs starts up.
#+begin_src emacs-lisp
(setq default-input-method "el_GR")
#+end_src
** Redirect commands with Greek letters to the correct commands
Sometimes I forget to switch the keyboard language from Greek to English (especially when I'm using emacs in tandem with other applications that require the keyboard be set to Greek in order to write in that language) and, as a result, I get something like «M-χ is undefined». I used to use [[https://stackoverflow.com/a/10658699][this method from Stack Overflow]], which added bindings with Greek letters and told emacs to consider them equivalent to the ones with latin letters. This however didn't work for commands which had not only a modifier and a letter, but also additional letters (e.g. C-c u). Since the last time I checked this Stack Overflow thread however, [[https://stackoverflow.com/a/54647483][a new method has been added]] that also works for the commands the other method didn't. I modified it accordingly and will use that one from here on out.
#+begin_src emacs-lisp
(defun reverse-input-method (input-method)
  "Build the reverse mapping of single letters from INPUT-METHOD."
  (interactive
   (list (read-input-method-name "Use input method (default current): ")))
  (if (and input-method (symbolp input-method))
      (setq input-method (symbol-name input-method)))
  (let ((current current-input-method)
        (modifiers '(nil (control) (meta) (control meta))))
    (when input-method
      (activate-input-method input-method))
    (when (and current-input-method quail-keyboard-layout)
      (dolist (map (cdr (quail-map)))
        (let* ((to (car map))
               (from (quail-get-translation
                      (cadr map) (char-to-string to) 1)))
          (when (and (characterp from) (characterp to))
            (dolist (mod modifiers)
              (define-key local-function-key-map
                (vector (append mod (list from)))
                (vector (append mod (list to)))))))))
    (when input-method
      (activate-input-method current))))

(reverse-input-method 'el_GR)
#+end_src
* Evil
This is basically an admission of defeat. Specifically, the point of learning to use emacs is imo to also use the builtin keybindings, but I only managed to learn some of them that are however for tasks other than editing text. In regards to editing text, I only learnt a couple commands (mainly cut, copy and paste), but wasn't able to retain anything more advanced. On the other hand, I was able to retain a lot more vim commands, firstly most probably because vim, due to its modal nature, is less forgiving to people that haven't learnt the commands properly, and secondly because vim's commands are also shorter and thus easier to remember. I thus decided to use a vim emulation method for text editing on emacs. I first tried to use [[https://www.emacswiki.org/emacs/ViperMode][Viper]], since its built into emacs, but that one not only lacked features I'm used to from regular Vim, such as Visual Mode, since it's emulating Vi instead, but also was more difficult to configure, as in I couldn't find snippets of code online to help me out because nobody uses Viper anymore. So Evil it is. Here, I am configuring Evil for my own needs: I care mainly about it working properly when editing text and don't want to have evil-type keybindings available everywhere, since I don't otherwise have a problem with emacs chords (as long as I can remember them).
** Configuring evil itself
*** Preliminaries before loading evil
The configuration options of evil have to be placed before evil itself is loaded.\\
Scroll up with ~C-u~: normally emacs uses ~C-u~ as universal-argument (something like the prefixing of vim commands), but since vim uses a different prefixing method, we can use that key for scrolling up instead. I set it with ~custom-set-variables~ because I couldn't get it working otherwise (see [[https://github.com/emacs-evil/evil/issues/890#issuecomment-320428519][here]]).
#+begin_src emacs-lisp
(custom-set-variables '(evil-want-C-u-scroll t))
#+end_src
Prevent opening new lines (via o,O) from auto-indenting. This is annoying and besides, if I want to indent, I'll do it myself. I set it with ~custom-set-variables~ because otherwise the variable would only be buffer-local and wouldn't thus be properly enabled.
#+begin_src emacs-lisp
(custom-set-variables
 '(evil-auto-indent nil))
#+end_src
Set evil-toggle-key: I set it to ~C-'~ because when I tried to set it to ~C-q~ (the Viper default) it didn't work for some reason, and I use ~C-z~ (the Evil default) for something else.
#+begin_src emacs-lisp
(setq evil-toggle-key "C-'")
#+end_src
Option so that the stuff replaced by pasting in visual mode won't be copied to the clipboard. Note that while this does work as intended, CopyQ erroneously shows the replaced text as having been copied to the clipboard.
#+begin_src emacs-lisp
(setq evil-kill-on-visual-paste nil)
#+end_src
Set the mode line position of the evil state tag: The default position is somewhere in the middle of the modeline, but I put it in the beginning, as in [[https://github.com/itchyny/lightline.vim][lightline]] (see [[https://emacs.stackexchange.com/questions/19024/move-evil-tag-to-beginning-of-mode-line/19032#19032][here]]).
#+begin_src emacs-lisp
(setq evil-mode-line-format '(before . mode-line-front-space))
#+end_src
Propertize and color evil mode line state tag depending on the state: See [[https://github.com/Malabarba/smart-mode-line/issues/195#issuecomment-338447042][here]]. I changed the name of each state tag from the default ~<N>~, ~<I>~ e.t.c, to their full names (e.g. ~NORMAL~, ~INSERT~ e.t.c), as in lightline. For the colors, I chose shades of purple for Emacs and Motion states (since that's Emacs's logo color), and drew the rest of the colors from [[https://github.com/lmintmate/blue-mood-vim#lightline-theme][my blue-mood lightline theme]].
#+begin_src emacs-lisp
    (setq evil-normal-state-tag   (propertize " NORMAL " 'face '((:background "#4f94cd" :foreground "black")))
          evil-emacs-state-tag    (propertize " EMACS " 'face '((:background "MediumPurple2"       :foreground "black")))
          evil-insert-state-tag   (propertize " INSERT " 'face '((:background "#7fff00"    :foreground "black")))
          evil-replace-state-tag  (propertize " REPLACE " 'face '((:background "#ff6347"      :foreground "black")))
          evil-motion-state-tag   (propertize " MOTION " 'face '((:background "plum3"          :foreground "black")))
          evil-visual-state-tag   (propertize " VISUAL " 'face '((:background "#ffd700"           :foreground "black")))
          evil-operator-state-tag (propertize " OPERATOR " 'face '((:background "yellow"    :foreground "red"))))
#+end_src
*** Load evil
#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src
*** Set evil keybindings
First off, set the initial state of ~free-keys-mode~ to emacs, as it doesn't work properly with the normal evil state.
#+begin_src emacs-lisp
(evil-set-initial-state 'free-keys-mode 'emacs)
#+end_src
Set the initial state of ibuffer-mode to normal, so that I can use vim commands to navigate around the buffer. The other commands are kept the way they are.
#+begin_src emacs-lisp
(evil-set-initial-state 'ibuffer-mode 'normal)
#+end_src
Bind up and down arrows to move by visual lines: I often want to move by visual lines, for example in text documents where I write long lines (such as this very text), but binding ~j~ and ~k~ for that broke prefixing them with numbers, so I decided to bind the arrow keys, which aren't used with a prefix, if at all, anyways.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "<up>") 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "<down>") 'evil-next-visual-line)
#+end_src
Create bindings to move to beginning and end of visual lines: Here I used the only bindings that remained available.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "Q") 'evil-beginning-of-visual-line)
(define-key evil-normal-state-map (kbd "U") 'evil-end-of-visual-line)
(define-key evil-visual-state-map (kbd "Q") 'evil-beginning-of-visual-line)
(define-key evil-visual-state-map (kbd "U") 'evil-end-of-visual-line)
#+end_src
Make the enter key in normal state act like enter in emacs state: Enter as a key in Vim is nigh useless, but I often want to open new lines without entering insert mode. Binding enter to the command used in emacs state did the trick. However, I don't want this binding to apply in modes that have nothing to do with editing text. I found that I can solve this problem by using ~evil-define-key~ to define specific keys in specific states for specific modes (see [[https://github.com/noctuid/evil-guide#mode-specific-keybindings][here]]).
#+begin_src emacs-lisp
(evil-define-key 'normal text-mode-map
(kbd "<return>") 'newline)

(evil-define-key 'normal prog-mode-map
(kbd "<return>") 'newline)
#+end_src
Prevent ~x~ and ~X~ from copying to the clipboard: I bound these buttons to the commands used by delete and backspace in emacs state (though in the case of backspace, not exactly, as backspace also deletes indentation and I didn't want ~X~ to do that). Note that when prefixed by a number, they do copy to the clipboard, but that's to be expected.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "x") 'delete-forward-char)
(define-key evil-normal-state-map (kbd "X") 'delete-backward-char)
#+end_src
** Enable and configure evil packages
*** Evil goggles
[[https://github.com/edkolev/evil-goggles][This package]] provides visual indications for various evil actions.\\
First disable highlight for recording macros, as it's distracting. This has to be done before evil-goggles-mode is started.
#+begin_src emacs-lisp
(setq evil-goggles-enable-record-macro nil)
#+end_src
Enable evil-goggles.
#+begin_src emacs-lisp
(evil-goggles-mode)
#+end_src
Set the duration of the highlight.
#+begin_src emacs-lisp
(setq evil-goggles-duration 0.605)
#+end_src
Set the duration of the highlight for actions that are delayed until the highlight disappears e.g. delete, change.
#+begin_src emacs-lisp
(setq evil-goggles-blocking-duration 0.150)
#+end_src
Change evil-goggles default highlight color: the default setting (inheriting from region) didn't apply the foreground for whatever reason, and it being just red was kinda tacky, so I changed it to SteelBlue3.
#+begin_src emacs-lisp
(custom-set-faces
 '(evil-goggles-default-face ((t (:background "#4f94cd")))))
#+end_src
Also change delete and change face to tomato to denote that these change/remove stuff.
#+begin_src emacs-lisp
(custom-set-faces
 '(evil-goggles-delete-face ((t (:background "tomato"))))
 '(evil-goggles-change-face ((t (:background "tomato")))))
#+end_src
*** evil-fringe-mark
[[https://github.com/Andrew-William-Smith/evil-fringe-mark][This package]] shows evil marks on the fringe using bitmaps (no idea why this was needed for the implementation, since [[https://github.com/kshenoy/vim-signature][vim-signature]] can use regular letters just fine - maybe to account for the presence of line numbers in the fringe? Though vim-signature seems fine in that case. Must be a difference between vim's sign column and emacs's fringe...).
#+begin_src emacs-lisp
(require 'evil-fringe-mark)
(global-evil-fringe-mark-mode)
#+end_src
Face for buffer-local fringe marks: Make it chartreuse green, different from the gold of file marks.
#+begin_src emacs-lisp
(custom-set-faces
 '(evil-fringe-mark-local-face ((t (:inherit font-lock-function-name-face)))))
#+end_src
* Misc configuration parameters
** The Bell
[[https://www.emacswiki.org/emacs/AlarmBell][That infamous bell…]] I only found out about its «charms» because it turns out my system sounds were disabled for some reason and I hadn't even realised this was the case. This is my way to exterminate those annoying sounds everytime anything out of the norm happens (that's why we have text messages in the first place after all!). I disabled alarms completely as even the visual indication (which is a nice wheat color in my colortheme) can be distracting…
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Separate custom file
#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
#+end_src
** Set the title bar to show buffer name
#+begin_src emacs-lisp
(setq frame-title-format "%b - Emacs")
#+end_src
** Time in modeline
The only way to have the time mode not display the load average, it turns out, is to put the relevant config before loading display-time-mode. Who would have thought? (I got the idea to try this approach from [[https://github.com/IvanMalison/.emacs.d#time-in-mode-line][Ivan Malison's emacs.d]]). An explanation of my ~display-time-format~ config: It basically shows the day of the week, then day/month, then hours:minutes. For more functions, Customize instructs to look at the function ~format-time-string~.
#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-format "%a %d/%m %H:%M")
(display-time-mode 1)
#+end_src
** Do not autosave nor make any backup files.
All they do is litter the place and trigger a nagging prompt whenever I leave Emacs without having saved.
#+begin_src emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+end_src
** Do not create lockfiles
The only thing they do is being annoying, and I'm not going to find myself in a situation where I'll be writing on the exact same file as someone else.
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
** Delete by moving to the trash
(the default behavior being completely delete from the system)
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src
** Delete selection mode.
I used to think that this enabled deleting selected text with the Delete key, but it turns out that one is the work of the ~delete-active-region~ parameter, which is enabled by default. What this does is allow the replacing of selected text with other inserted (e.g. pasted/yanked) text, thus bringing Emacs more in line with other text editors.\\
I initially set this one from the Customization buffer, and got ~(setq delete-selection-mode t)~ as the resulting code snippet, so I assumed it would work even when outside the ~custom-set-variables~, but it didn't - and then I was wondering why pasting text didn't replace the selected text… Now I replaced that wrong parameter with the correct one.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src
P.S. Just so you know, here's precisely why the other wording hadn't worked:
#+begin_quote
Setting this variable directly does not take effect;
   either customize it (see the info node `Easy Customization')
   or call the function `delete-selection-mode'
#+end_quote
That goes into showing that RT(F)M is valid advice…
** Disable double space as end of sentence
I once tried M-e to go to the end of a long sentence I wrote, and was surprised when I went to the end of the paragraph instead. I searched a little about it and found out there are people that actually use two spaces to start a new sentence. I personally use only one space though (and when writing on paper zero), so I disable this setting.
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
** Disabling menu bar when emacs is run in a  terminal.
Since it can't be clicked anyways, it takes up space without reason...
(I use ~display-graphic-p~ instead of ~window-system~ because the latter is now deprecated:)
#+begin_quote
>From the doc string of `window-system':

 "Use of this function as a predicate is deprecated.  Instead,
  use `display-graphic-p' or any of the other `display-*-p'
  predicates which report frame's specific UI-related capabilities."
#+end_quote
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (menu-bar-mode -1))
#+end_src
** Toggling the menu bar with a keyboard shortcut.
#+begin_src emacs-lisp
(global-set-key [f9] 'toggle-menu-bar-mode-from-frame)
#+end_src
** Toggling the scroll bar with a keyboard shortcut
#+begin_src emacs-lisp
(global-set-key [f10] 'toggle-scroll-bar)
#+end_src
** Toggle maximizing the frame
Useful for newsticker
#+begin_src emacs-lisp
(global-set-key [f8] 'toggle-frame-maximized)
#+end_src
** Visual line mode only for text mode.
Visual line wraps lines instead of cutting them as default.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
Disable visual-line-mode however for the file where I keep all my urls (from the OneTab extension), as I want to be able to kill by logical lines in that particular file, since urls are 1 logical line each, but can span up to 2-3 visual lines.\\
In case you're new to emacs and such terms as logical and visual lines might as well be in a foreign language, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Continuation-Lines.html][here]] (especially the last paragraph).
#+begin_src emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (buffer-name) "onetab.txt")
              (visual-line-mode -1))))
#+end_src
** Associate .txt files with the goto-address-mode.
This mode highlights urls and makes them clickable.\\
(code adapted from [[https://stackoverflow.com/questions/13945782/emacs-auto-minor-mode-based-on-extension/39652226#39652226][this stackoverflow answer]])
#+begin_src emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "txt")
              (goto-address-mode 1))))
#+end_src
** Bind M-o to other-window
C-x o is too long a binding for this simple action (idea drawn from [[https://masteringemacs.org/article/my-emacs-keybindings][My Emacs keybindings - Mastering Emacs]]).
#+begin_src emacs-lisp
(define-key global-map "\M-o" 'other-window)
#+end_src
** Adds shift + arrows for changing between visible buffers, in addition to M-o.
#+begin_src emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+end_src
The ~windmove-wrap-around~ setting allows for windmove movement off the edge of a frame to wrap around.
#+begin_src emacs-lisp
(setq windmove-wrap-around t)
#+end_src
** Add command to mark a line in emacs state
From [[https://ebzzry.io/en/emacs-tips-1/#marks][here]]. Executing it multiple times marks multiple lines.
#+begin_src emacs-lisp
(defun mark-line (&optional arg)
  (interactive "p")
  (if (not mark-active)
      (progn
        (beginning-of-line)
        (push-mark)
        (setq mark-active t)))
  (forward-line arg))
#+end_src
Its keybinding
#+begin_src emacs-lisp
(define-key evil-emacs-state-map "\C-z" 'mark-line)
#+end_src
** Highlight specific words in prog-mode
Modified from [[http://seancribbs.com/emacs.d#sec-5-8][Sean Cribbs' Emacs 25 Configuration]].
#+begin_src emacs-lisp
(defun lmintmate/add-watchwords ()
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|CURRENTLY\\|SOMEDAY\\|CANCELLED\\|HACK\\|REFACTOR\\|NOCOMMIT\\|LONGTERM\\)"
          1 font-lock-builtin-face t))))

(add-hook 'prog-mode-hook 'lmintmate/add-watchwords)
#+end_src
** Drag selected text with the mouse in emacs
Sometimes I just want to cop out and use the mouse when trying to move text. I found out via [[https://emacs.stackexchange.com/a/48440][Stack Exchange]] that this is possible in emacs, and one just needs to set the function ~mouse-drag-and-drop-region~ to ~t~. This feature was added in version 26.1 (see [[http://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS.26#n377][here]]), and I thus wrap it in a conditional so that it won't error out on versions lower than 26. This doesn't work when inside org-mode files however, an issue most probably related to the fact that I have ~org-mouse~ enabled, since, if I disable it, drag-and-drop works then fine.
#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
(setq mouse-drag-and-drop-region t))
#+end_src
** Bind zap-up-to-char command in emacs state
I found the commands M-x zap-to-char and zap-up-to-char, which roughly correspond to vim's df and dt. The former is bound to M-z, but the latter isn't bound to anything. I bind it here to C-c z, since that isn't bound to anything.
#+begin_src emacs-lisp
(define-key evil-emacs-state-map "\C-cz" 'zap-up-to-char)
#+end_src
** Enable display-line-numbers-mode
This minor mode first appeared in 26.1 and makes line rendering faster than the previous system, ~linum-mode~. I have ~text-mode~ and ~prog-mode~ display relative line numbers, for help with evil movements (adapted from [[https://github.com/noctuid/evil-guide#how-can-i-have-relative-line-numbers][here]]). I enable it conditionally, so that it won't error out on a version lower than 26.1.
#+begin_src emacs-lisp
(setq-default display-line-numbers nil)

(defun noct:relative ()
  (setq-local display-line-numbers 'relative))

(defun noct:line-number-relative ()
  (setq-local display-line-numbers-current-absolute nil))

(when (version<= "26.0.50" emacs-version )
(add-hook 'text-mode-hook #'noct:relative)
(add-hook 'text-mode-hook #'noct:line-number-relative)
(add-hook 'prog-mode-hook #'noct:relative)
(add-hook 'prog-mode-hook #'noct:line-number-relative))
#+end_src
*** Disable it however for lisp-interaction-mode
I don't want line numbers to display however for ~lisp-interaction-mode~, which is the mode used in the ~*scratch*~ buffer (and, to my knowledge, only there). I set this conditionally so that it won't error out on versions lower than 26.1.
#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
(add-hook 'lisp-interaction-mode-hook (lambda () (display-line-numbers-mode -1))))
#+end_src
*** Make the current line bold
I set it conditionally so that it won't error out on versions lower than 26.1.
#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
(custom-set-faces
'(line-number-current-line ((t (:inherit line-number :weight bold))))))
#+end_src
* Recent files
A quick way to access my most recently opened files (as I didn't want to have to go all the way through the directory structure).
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+end_src
* Settings for multiple buffer management
I wanted to be able to change the layout of the buffers from horizontal to vertical, as well as be able to flip frames, so that left goes right, and up goes down. I used to use some custom functions found at [[http://whattheemacsd.com][What the .emacs.d!?]] ([[http://whattheemacsd.com/buffer-defuns.el-03.html][here]] and [[http://whattheemacsd.com/buffer-defuns.el-02.html][here]], specifically), but then found the package [[https://github.com/emacsorphanage/transpose-frame/blob/master/transpose-frame.el][transpose-frame]] (available at MELPA), and decided to use that instead, as to make the README.org file less lengthy.
#+begin_src emacs-lisp
(define-key global-map "\M-]" 'transpose-frame)
(define-key global-map "\M-[" 'rotate-frame)
#+end_src
* Ibuffer
A better way to list buffers than buffer-menu([[https://www.emacswiki.org/emacs/IbufferMode][link]]). Config influenced from [[http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/][Using Emacs - 34 - ibuffer and emmet | C'est la Z]] and [[http://home.thep.lu.se/~karlf/emacs.html#sec-6-6][some dude's .emacs]].\\
** Replace buffer-menu.
#+begin_src emacs-lisp
(require 'ibuffer)
 (global-set-key (kbd "C-x C-b") 'ibuffer)
    (autoload 'ibuffer "ibuffer" "List buffers." t)
#+end_src
** Set buffer groups.
#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
      (quote (("default"
	       ("Dired" (mode . dired-mode))
	       ("Org" (name . "^.*org$"))
               ("Text" (name . "^.*txt$"))
               ("Markdown" (name . "^.*md$"))

	       ("Emacs Lisp" (mode . emacs-lisp-mode))
	       ("Emacs-created"
                  (or
                   (name . "^\\*")))
	       ))))
(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-auto-mode 1)
	    (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
** Don't show filter groups if there are no buffers in that group.
#+begin_src emacs-lisp
(setq ibuffer-show-empty-filter-groups nil)
#+end_src
** Use human readable size column.
#+begin_src emacs-lisp
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		filename-and-process)))
#+end_src
* Dired Mode Configurations
** Enable dired icon mode.
This functionality, coming from the dired-icon package, shows icons from the currently used icon theme next to the filenames, and thus makes for a better dired experience.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+end_src
*** Setting to make the image size of the dired-icon icons bigger.
#+begin_src emacs-lisp
(setq dired-icon-image-size 32)
#+end_src
** Modify evil keybindings for dired-mode-map
The default state for dired is evil normal. This mostly works as expected (e.g. j and k work as expected and the regular dired commands aren't altered), but the bindings to go to the first and last line (gg and G) didn't work. I used ~evil-define-key~ (see above) to solve this problem. I thus set up here gg and G to go to the first and last lines of the buffer, and because g was mapped to ~revert-buffer~, which I'd like to continue using, I remapped it to r. This setting of course shadows the default bindings of G and r, but I didn't need the actions they perform.
#+begin_src emacs-lisp
(evil-define-key 'normal dired-mode-map
"G" 'evil-goto-line
"gg" 'evil-goto-first-line
"r" 'revert-buffer)
#+end_src
** Dired listing
*** Listing switches.
Group directories first and make sizes human-readable.
#+begin_src emacs-lisp
(setq dired-listing-switches "-alh --group-directories-first")
#+end_src
*** Sort files by modified date.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-sort-toggle-or-edit)
#+end_src
*** Hide the details on dired mode, for a cleaner appearance.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src
** Dired dwim target
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src
* Org Mode configuration
The ~(require 'org)~ part is present in the init.el file instead of here, precisely in order to compile this very file.
** Hook toc-org to org-mode
[[https://github.com/snosov1/toc-org][toc-org]] is a package that creates Table of Contents for org-mode files without exporting, which can thus give the rendered in github/lab README.org a table of contents, convenient for those who might want to browse said files. Here I add a snippet given in said repo to hook it to org-mode.
#+begin_src emacs-lisp
(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-mode)
  (warn "toc-org not found"))
#+end_src
** Org-mouse
This is an org-mode subpackage that allows control of various things with the mouse. I enable it because I almost never remember which is the shortcut to tick checkboxes in org-mode.
#+begin_src emacs-lisp
(require 'org-mouse)
#+end_src
** Define C-c l as the keybinding to org-cliplink.
I used to have it as the shortcut to org-store-link, but it turns out I hardly used that one…
#+begin_src emacs-lisp
(when (package-installed-p 'org-cliplink)
(define-key org-mode-map (kbd "\C-cl") 'org-cliplink))
#+end_src
** Define C-c d as the keybinding to org-toggle-link-display
This command toggles between descriptive and literal links, and I need it so that I can edit on the literal links the text that will show up on the descriptive links (and it was too much of a hassle to go to the Org > Hyperlinks submenu just for that…).
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "\C-cd") 'org-toggle-link-display)
#+end_src
** Define C-c e as the keybinding to [[http://orgmode.org/worg/doc.html#org-emphasize][org-emphasize]]
This one helps to switch quickly between different text formattings (bold, italic e.t.c).
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "\C-ce") 'org-emphasize)
#+end_src
** Set keywords for Org progress states.
These are, apart from TODO and DONE, also CURRENTLY and SOMEDAY. (Idea to add unicode symbols from [[https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/][Pimp Up Your Org-mode Files – thraxys]])
#+begin_src emacs-lisp
(setq org-todo-keywords
   (quote
    ((sequence "TODO(t)" "⏳ CURRENTLY(c)" "⏲ SOMEDAY(s)" "✘ CANCELLED(x)" "✔ DONE(d)"))))
#+end_src
** Special Ctrl-a/e behavior in org mode
From the Customize section of the parameter:
#+begin_quote
Non-nil means `C-a' and `C-e' behave specially in headlines and items.
   
   When t, `C-a' will bring back the cursor to the beginning of the
   headline text, i.e. after the stars and after a possible TODO
   keyword.  In an item, this will be the position after bullet and
   check-box, if any.  When the cursor is already at that position,
   another `C-a' will bring it to the beginning of the line.
   
   `C-e' will jump to the end of the headline, ignoring the presence
   of tags in the headline.  A second `C-e' will then jump to the
   true end of the line, after any tags.  This also means that, when
   this variable is non-nil, `C-e' also will never jump beyond the
   end of the heading of a folded section, i.e. not after the
   ellipses.
#+end_quote
#+begin_src emacs-lisp
(setq org-special-ctrl-a/e t)
#+end_src
** Use query to confirm killing of hidden subtrees
#+begin_src emacs-lisp
(setq org-ctrl-k-protect-subtree t)
#+end_src
** Override shift + arrows in certain places in favor of windmove
If you want to make the windmove function active in locations where Org mode does not have special functionality on S-<cursor>, add this to your configuration(from [[http://orgmode.org/manual/Conflicts.html][Conflicts - The Org Manual]]):
#+begin_src emacs-lisp
;; Make windmove work in org-mode:
          (add-hook 'org-shiftup-final-hook 'windmove-up)
          (add-hook 'org-shiftleft-final-hook 'windmove-left)
          (add-hook 'org-shiftdown-final-hook 'windmove-down)
          (add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src
** Auto adjust footnotes
#+begin_src emacs-lisp
(setq org-footnote-auto-adjust t)
#+end_src
** Follow link in orgmode by pressing Enter key
This adds an alternative way to follow urls in orgmode without reaching out for the mouse.
#+begin_src emacs-lisp
(setq org-return-follows-link t)
#+end_src
** Strikethrough for Done tasks
adapted from [[http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/][Sacha Chua's blog]]
#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen" :strike-through t :weight bold))))
 '(org-headline-done ((t (:foreground "LightSalmon" :strike-through t)))))
#+end_src
** Color only the stars for the org mode levels
This is a nice little setting I found while browsing the Customize interface. It removes the color from the org headline levels, only keeping it on the stars. This makes the buffer way less colorful, but I find it more clean that way. Not to mention that because my color theme isn't amongst the most popular ones, the coloring was a bit bizzare, in that the first level was green, the second plain white and the third yellow, which was a bit disorienting, since I'd expect the second level to be colored instead of the third. So I've now removed the color from the text and can focus on the stars for denoting the hierarchy.
#+begin_src emacs-lisp
(setq org-level-color-stars-only t)
#+end_src
** Custom color for headline levels 2 and 3
In my color theme, headline level 2 used to be plain white, while headline level 3 used to be bold «gold» in color, which was confusing, as I'd expect the inverse. So I took the initiative and customized the colors myself - on the way I decided I preferred level 3 to also be obvious as a headline, and distinguishable from the rest of the text.
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-2 ((t (:foreground "gold" :weight bold))))
 '(org-level-3 ((t (:foreground "cyan3" :weight bold)))))
#+end_src
** Custom color for org source code blocks
I didn't really like the fact that the org source code blocks had the color of the comments (grey), as this made them less visible and prominent. I found, via [[https://www.reddit.com/r/emacs/comments/415imd/prettier_orgmode_source_code_blocks/cz09wvh?utm_source=share&utm_medium=web2x][this reddit post]], that I can customize the faces of ~org-block-begin-line~ and ~org-block-end-line~. I decided however to leave the default settings for these, as the file became too flashy otherwise. I customized ~org-block~ to change the faces of the content of the source blocks and set their foreground to whitesmoke so that I can read them more easily.
#+begin_src emacs-lisp
(custom-set-faces
 '(org-block ((t (:foreground "whitesmoke")))))
#+end_src
** Custom postamble in html export
I only want to see the date and not the author nor the created by details on the bottom of the exported html file, and found out the ~org-html-postamble~ can be modified to not show these things. I also wanted a custom way to show the date format (because I don't like the y-m-d format much), so I use here a custom function, adapted from [[https://stackoverflow.com/a/18933020][this stackoverflow answer]].
#+begin_src emacs-lisp
(defun my-org-html-postamble (plist)
 (format "Last update : %s" (format-time-string "%a %d/%m/%Y")))
(setq org-html-postamble 'my-org-html-postamble)
#+end_src
I don't want to print the postamble everywhere however, so I also found out that writing ~#+OPTIONS: html-postamble:nil~ on the file where the postamble should be exlcuded does the trick.
** Add shortcut templates for emacs lisp, org and title
These [[https://orgmode.org/manual/Easy-templates.html][templates]], e.g. ~<s~, are very practical. Out of them I use most SRC emacs-lisp, org and ~#+title~, so I wished I could create shortcuts for these too. However, [[https://orgmode.org/Changes.html][the previous shortcut system was changed in Org 9.2]] and I had to require org-tempo and modify my template config accordingly in order for the shortcuts to continue working (see [[https://www.reddit.com/r/emacs/comments/ad68zk/get_easytemplates_back_in_orgmode_92/eds5kcj?utm_source=share&utm_medium=web2x][here]]).
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("o" . "src org"))
(add-to-list 'org-tempo-keywords-alist '("t" . "title"))
#+end_src
** Enable Speed keys
[[https://orgmode.org/manual/Speed-keys.html][Speed keys]] are single keystrokes without modifiers that can be used when the cursor is on a headline to e.g. move around the buffer. Here I enable them and set them to be able to be used on any star of the headline (code taken from the explanation string of the M-x customize section).
#+begin_src emacs-lisp
 (setq org-use-speed-commands
         (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
#+end_src
* Undo tree
#+begin_src emacs-lisp
(require 'undo-tree)
#+end_src
Global undo tree mode.
#+begin_src emacs-lisp
(global-undo-tree-mode)
#+end_src
Define undo and redo keys.\\
M-p for M-previous and M-n for M-next in emacs state. These might not be the most comfortable of keybindings, but they are the most easily memorable amongst the unbound keys.
#+begin_src emacs-lisp
(define-key evil-emacs-state-map "\M-p" 'undo-tree-undo)
(define-key evil-emacs-state-map "\M-n" 'undo-tree-redo)
#+end_src
* Web-search.el package config
** Set the default search provider
#+begin_src emacs-lisp
(setq web-search-default-provider "DuckDuckGo")
#+end_src
* Drag-stuff package config
#+begin_src emacs-lisp
(require 'drag-stuff)
#+end_src
Hook drag-stuff-mode to text-mode and prog-mode.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'drag-stuff-mode)
(add-hook 'prog-mode-hook 'drag-stuff-mode)
#+end_src
Define the keybindings - the default being M- and arrow keys.
#+begin_src emacs-lisp
(drag-stuff-define-keys)
#+end_src
* Espy password fetcher package config
[[https://github.com/walseb/espy][This package]] allows to copy usernames and passwords from a dedicated file from inside emacs. I'm glad I found it because it gave me the incentive to refactor my password file and it feels like a password management solution without having to use all this complicated encryption stuff (and if I ever decide to encrypt my password file, gpg is supported). Here I enable the package and set the file from which it will draw the passwords. I also rename the string it will use to recognise the passwords as I'm not used to using the ~"pass:"~ abbreviation. On the other hand, I'm not changing ~"user:"~ however, because oftentimes web services ask for email/password instead of username/password and since I have entries with both types, I'll just keep ~"user:"~ to cover both.
#+begin_src emacs-lisp
(require 'espy)
(setq espy-password-file "~/Λήψεις/σημαντικά αρχεία txt/passwords.org")
(setq espy-pass-prefix "password:")
#+end_src
* Smex
Used for the completion history of ~counsel-M-x~.
#+begin_src emacs-lisp
(require 'smex) ; Not needed if you use package.el
  (smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                    ; when Smex is auto-initialized on its first run.
#+end_src
* Ivy, counsel, swiper configuration
#+begin_src emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "\C-cu") 'counsel-unicode-char)
(global-set-key (kbd "\C-cr") 'counsel-recentf)
(global-set-key (kbd "\C-h v") 'counsel-describe-variable)
(global-set-key (kbd "\C-h f") 'counsel-describe-function)
(setq ivy-format-function #'ivy-format-function-line)
(setq ivy-wrap t)
(setq ivy-initial-inputs-alist nil)
(setq ivy-virtual-abbreviate 'abbreviate)
#+end_src
To search for the entire word at point with swiper (and not only the part from the cursor onwards, as M-j does): the [[https://github.com/abo-abo/swiper/wiki/FAQ][Ivy FAQ]] says the following:
#+begin_quote
On a related note, you can paste symbol-at-point into the search with M-n, which is a common case for using C-w in Isearch.
#+end_quote
** Ivy rich
[[https://github.com/Yevgnen/ivy-rich][This package]] shows descriptions of the items in ~ivy-switch-buffer~, ~counsel-M-x~, ~counsel-describe-variable~, ~counsel-describe-function~ e.t.c.
#+begin_src emacs-lisp
(require 'ivy-rich)
(ivy-rich-mode 1)
#+end_src
** Change color of ivy-org face
The default one is inherited from org-level-4, which is gray, and thus always confused me when displaying the buffers, because I'm used to the convention that gray=inactive or comment. I changed it to inherit from org-level-1, which is chartreuse green.
#+begin_src emacs-lisp
(when (package-installed-p 'ivy)
(custom-set-faces
  '(ivy-org ((t (:inherit org-level-1))))))
#+end_src
* Terminal configuration
** Kill terminal buffer automatically when exiting
From [[https://oremacs.com/2015/01/01/three-ansi-term-tips/][oremacs]].
#+begin_quote
After you close the terminal, you get a useless buffer with no process. It's probably left there for you to have a history of what you did. I find it not useful, so here's a way to kill that buffer automatically:
#+end_quote
#+begin_src emacs-lisp
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
#+end_src
** Redefine keys in term modes to their normal behavior
Some key combinations don't behave as I'd expect in ansi-term. I thus have to redefine them to behave as expected (Syntax from [[https://www.reddit.com/r/emacs/comments/4ccczt/keybindings_in_multiterm/d1i99dk/][a comment on the emacs subreddit]]).
#+begin_src emacs-lisp
(add-hook 'term-mode-hook (lambda ()
      (define-key term-raw-map (kbd "M-x") 'counsel-M-x)
))
#+end_src
* Magit
A very good git manager (the reports of its greatness aren’t overrated at all!).\\
Btw,for those curious (as I was) where the term "porcelain" with which magit is self-described comes from, [[https://stackoverflow.com/questions/6976473/what-does-the-term-porcelain-mean-in-git][here’s]] an answer - the gist of it is that it is a more accessible interface, as opposed to the less user-friendly "plumbing" levels/commands.
** Set magit faces
I changed the faces of ~magit-diff-context-highlight~ and ~magit-section-highlight~ because them being quasi-black didn't look good on my color theme.
#+begin_src emacs-lisp
(when (package-installed-p 'magit)
(custom-set-faces
 '(magit-diff-context-highlight ((t (:background "DodgerBlue4" :foreground "grey70"))))
 '(magit-section-highlight ((t (:inherit highlight))))))
#+end_src
** Magit-status keybinding
#+begin_src emacs-lisp
(when (package-installed-p 'magit)
(global-set-key (kbd "C-x g") 'magit-status))
#+end_src
* Emacs-lisp related configuration
** Enable show-paren-mode
This highlights matching parentheses. Turns out it is a global minor mode, and it thus has to be activated for everything or for nothing. The ~show-paren-delay~ option shows the matching parenthese instantaneously when set to 0. The ~show-paren-style~ option set to mixed shows the matching parenthesis when it is visible and highlights the expression when it isn’t.
#+begin_src emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
(setq show-paren-style (quote mixed))
#+end_src
** Enable electric-pair-mode
This autocompletes parentheses. It appears to be a global minor mode as well.
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
Here is however a trick to disable it from everywhere but lisp-related modes (from [[https://emacs.stackexchange.com/questions/5981/how-to-make-electric-pair-mode-buffer-local][How to make electric-pair-mode buffer local? - Emacs Stack Exchange]]).
#+begin_src emacs-lisp
(defvar my-electric-pair-modes '(emacs-lisp-mode lisp-interaction-mode))

(defun my-inhibit-electric-pair-mode (char)
  (not (member major-mode my-electric-pair-modes)))

(setq electric-pair-inhibit-predicate #'my-inhibit-electric-pair-mode)
#+end_src
* HideShow mode
[[https://www.emacswiki.org/emacs/HideShow][Link]]. A nifty minor mode to fold code the same way org-mode headings are folded.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src
Keybindings. The ~<backtab>~ string means Shift+Tab. After enabling evil, the tab was taken over by some jump list command, which was inconvenient to say the least. I thus use here ~evil-define-key~ to overcome this problem (see above), since the help string for ~evil-define-key~ also specifies that:
#+begin_example
It is possible to specify multiple states and/or bindings at
once:

    (evil-define-key '(normal visual) foo-map
      "a" 'bar
      "b" 'foo)
#+end_example
Also note that sometimes the action of the tab key doesn't take effect immediately (see [[https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately][here]]). However backtab and C-tab work fine from the get-go for some reason.
#+begin_src emacs-lisp
(evil-define-key '(normal emacs) prog-mode-map
  (kbd "TAB") 'hs-toggle-hiding
  (kbd "<backtab>") 'hs-hide-all
  (kbd "<C-tab>") 'hs-show-all)
#+end_src
* Diminish mode and Dim
Diminish mode that cuts off the display of minor modes which I want to work [[https://github.com/myrjola/diminish.el#introduction][discreetly, like janitors]]. Without any arguments, they are hidden entirely from the modeline, otherwise they are simply abbreviated to the specified abbreviation.
#+begin_src emacs-lisp
(require 'diminish)
(diminish 'visual-line-mode)
(diminish 'undo-tree-mode)
(diminish 'drag-stuff-mode)
(diminish 'ivy-mode)
(diminish 'eldoc-mode)
(diminish 'evil-goggles-mode)
(diminish 'global-evil-fringe-mark-mode)
#+end_src
[[https://github.com/alezost/dim.el][Dim]]. This is similar to diminish, but can also shorten the display of major modes. The problem with it though is that it crams all the abbreviations, regardless of length, next to the name of the unabbreviated mode (while diminish only does so with single character abbreviations), which is why I'm using it in addition to diminish, even through their functionality overlaps.\\
And the reason I decided to try it in the first place is because I find the name of lisp-interaction-mode way too long…
#+begin_src emacs-lisp
(when (package-installed-p 'dim)
(dim-major-name 'lisp-interaction-mode "LiN"))
(when (and (package-installed-p 'dim) (package-installed-p 'markdown-mode))
(dim-major-name 'markdown-mode "Md"))
#+end_src
* Ediff
I'm trying to move myself to emacs as much as possible, so I now decided to replace the functionality of [[http://meldmerge.org/][Meld]].\\
This line splits the ediff windows horizontally instead of vertically.
#+begin_src emacs-lisp
(setq ediff-split-window-function (quote split-window-horizontally))
#+end_src
This one puts the ediff help buffer in the same frame as the rest, as I was a bit bothered by the separate small window it had.
#+begin_src emacs-lisp
(setq ediff-window-setup-function (quote ediff-setup-windows-plain))
#+end_src
** Operate ediff through dired
Modified from [[http://oremacs.com/2017/03/18/dired-ediff/][Quickly ediff files from dired · (or emacs]]
#+begin_src emacs-lisp
(require 'dired-aux)
;; -*- lexical-binding: t -*-
(defun ora-ediff-files ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (if (<= (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name
                        "file: "
                        (dired-dwim-target-directory)))))
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2)))
      (error "no more than 2 files should be marked"))))
#+end_src
The keybinding
#+begin_src emacs-lisp
(define-key dired-mode-map "e" 'ora-ediff-files)
#+end_src
