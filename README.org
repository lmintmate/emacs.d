#+property: header-args :tangle init.el
#+title: My literate Emacs configuration
# Theme for html exporting from [[https://github.com/fniessen/org-html-themes][GitHub - fniessen/org-html-themes]]

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="Emacs" src="https://frama.link/emacsd-26-3-badge"></a>

#+html: <a href="https://orgmode.org/"><img alt="Org-mode" src="https://img.shields.io/badge/Powered%20by-Org--mode-blueviolet.svg?style=for-the-badge&color=8e44bc"></a>

* Table of Contents                                                     :TOC_3:
- [[#introduction][Introduction]]
  - [[#notes-on-the-evolution-of-my-emacs-initialisation][Notes on the evolution of my emacs initialisation]]
  - [[#on-tangling-initel-from-the-org-file][On tangling init.el from the org file]]
  - [[#peculiarities-of-this-configuration][Peculiarities of this configuration]]
    - [[#doesnt-use-use-package-by-choice][Doesn't use ~use-package~ by choice]]
    - [[#doesnt-use-git-for-package-management-by-choice][Doesn't use git for package management by choice]]
- [[#main-configuration][Main configuration]]
- [[#preliminaries-package-management-settings][Preliminaries: package management settings]]
  - [[#add-melpa-and-org-repositories][Add MELPA and org repositories]]
  - [[#auto-install-packages][Auto-install packages]]
  - [[#force-packageel-to-install-the-latest-version-of-org-mode][Force package.el to install the latest version of org-mode]]
  - [[#function-to-update-all-packages-at-once-without-list-packages][Function to update all packages at once without ~list-packages~]]
- [[#locale-and-encoding-settings][Locale and encoding settings]]
- [[#no-littering][No littering]]
- [[#setting-the-default-frame-parameters-on-windows][Setting the default frame parameters on Windows]]
- [[#disabling-the-tool-bar][Disabling the tool bar]]
- [[#setting-the-font][Setting the font]]
- [[#setting-up-my-must-use-theme---blue-mood-theme][Setting up my must use theme - Blue Mood theme.]]
  - [[#mode-line-customisation][Mode line customisation]]
  - [[#hide-line-between-fringes][Hide line between fringes]]
- [[#manually-loading-external-files][Manually loading external files]]
  - [[#where-i-bootstrap-the-elisp-files][Where I bootstrap the elisp files]]
  - [[#where-i-tell-emacs-where-is-my-personal-lisp-directory][Where I tell Emacs where is my personal lisp directory.]]
  - [[#where-i-load-the-specific-packages][Where I load the specific packages]]
    - [[#loading-the-package-for-polytonic-greek][Loading the package for polytonic greek]]
    - [[#loading-la-carte-for-executing-menu-commands-from-the-keyboard][Loading La Carte (for executing menu commands from the keyboard)]]
    - [[#loading-elispfl-extra-font-lock-for-emacs-lisp][Loading elispfl (extra font-lock for emacs lisp)]]
- [[#startup-screen-and-scratch-buffer-options][Startup screen and scratch buffer options]]
  - [[#inhibit-startup-screen][Inhibit startup screen]]
  - [[#scratch-buffer-message][Scratch buffer message]]
  - [[#new-message-for-the-startup-echo-area][New message for the startup echo area]]
- [[#-nationality-parameters][🇬🇷 Nationality parameters]]
  - [[#setting-the-calendar-up-in-greek][Setting the calendar up in Greek.]]
  - [[#set-input-method-to-greek][Set input method to greek]]
  - [[#redirect-commands-with-greek-letters-to-the-correct-commands][Redirect commands with Greek letters to the correct commands]]
- [[#-evil][😈 Evil]]
  - [[#configuring-evil-itself][Configuring evil itself]]
    - [[#preliminaries-before-loading-evil][Preliminaries before loading evil]]
    - [[#load-evil][Load evil]]
    - [[#set-evil-keybindings][Set evil keybindings]]
    - [[#custom-operators-and-text-objects][Custom operators and text objects]]
  - [[#enable-and-configure-evil-packages][Enable and configure evil packages]]
    - [[#evil-goggles][Evil goggles]]
    - [[#evil-fringe-mark][evil-fringe-mark]]
    - [[#evil-snipe][evil-snipe]]
    - [[#evil-traces][evil-traces]]
- [[#misc-configuration-parameters][Misc configuration parameters]]
  - [[#the-bell][The Bell]]
  - [[#disable-dialog-boxes][Disable dialog boxes]]
  - [[#separate-custom-file][Separate custom file]]
  - [[#set-the-format-of-the-frame-title][Set the format of the frame title]]
  - [[#time-in-modeline][Time in modeline]]
  - [[#do-not-autosave-nor-make-any-backup-files][Do not autosave nor make any backup files.]]
  - [[#do-not-create-lockfiles][Do not create lockfiles]]
  - [[#delete-by-moving-to-the-trash][Delete by moving to the trash]]
  - [[#delete-selection-mode][Delete selection mode.]]
  - [[#disable-double-space-as-end-of-sentence][Disable double space as end of sentence]]
  - [[#disabling-menu-bar-when-emacs-is-run-in-a--terminal][Disabling menu bar when emacs is run in a  terminal.]]
  - [[#toggling-the-menu-bar-with-a-keyboard-shortcut][Toggling the menu bar with a keyboard shortcut.]]
  - [[#toggle-scroll-bar-and-window-divider-mode][Toggle scroll bar and window divider mode]]
  - [[#toggle-maximizing-the-frame][Toggle maximizing the frame]]
  - [[#do-not-resize-frame-when-setting-frame-elements][Do not resize frame when setting frame elements]]
  - [[#visual-line-mode-only-for-text-mode][Visual line mode only for text mode.]]
  - [[#associate-txt-files-with-the-goto-address-mode][Associate .txt files with the goto-address-mode.]]
  - [[#bind-command-to-kill-current-buffer][Bind command to kill current buffer]]
  - [[#bind-m-o-to-other-window][Bind M-o to other-window]]
  - [[#adds-shift--arrows-for-changing-between-visible-buffers-in-addition-to-m-o][Adds shift + arrows for changing between visible buffers, in addition to M-o.]]
  - [[#add-command-to-mark-a-line-in-emacs-state][Add command to mark a line in emacs state]]
  - [[#highlight-specific-words-in-prog-mode][Highlight specific words in prog-mode]]
  - [[#drag-selected-text-with-the-mouse-in-emacs][Drag selected text with the mouse in emacs]]
  - [[#bind-zap-up-to-char-command-in-emacs-state][Bind zap-up-to-char command in emacs state]]
  - [[#enable-display-line-numbers-mode][Enable display-line-numbers-mode]]
    - [[#disable-it-however-for-lisp-interaction-mode][Disable it however for lisp-interaction-mode]]
    - [[#make-the-current-line-bold][Make the current line bold]]
  - [[#make-help-windows-active-by-default][Make help windows active by default]]
  - [[#enable-all-disabled-commands][Enable all disabled commands]]
  - [[#theme-settings][Theme settings]]
    - [[#treat-all-themes-as-safe][Treat all themes as safe]]
    - [[#load-only-one-theme-at-a-time][Load only one theme at a time]]
  - [[#info-mode-settings][Info mode settings]]
  - [[#custom-mode-settings][Custom mode settings]]
  - [[#bookmark-settings][Bookmark settings]]
  - [[#custom-functions][Custom functions]]
    - [[#function-to-download-a-file-from-url-to-specified-path][Function to download a file from url to specified path]]
    - [[#function-to-quickly-switch-to-the-scratch-buffer][Function to quickly switch to the ~*scratch*~ buffer]]
    - [[#functions-to-change-file-formats][Functions to change file formats]]
    - [[#functions-to-rename-files][Functions to rename files]]
    - [[#live-color-selection-for-faces][Live color selection for faces]]
    - [[#remove-tracking-strings-from-urls][Remove tracking strings from urls]]
    - [[#function-to-show-parent-modes-of-current-buffers-major-mode][Function to show parent modes of current buffer's major mode]]
    - [[#function-that-creates-a-histogram-of-currently-open-buffers][Function that creates a histogram of currently open buffers]]
- [[#dabbrev-completion][Dabbrev completion]]
- [[#recent-files][Recent files]]
- [[#settings-for-multiple-buffer-management][Settings for multiple buffer management]]
- [[#ibuffer][Ibuffer]]
  - [[#replace-buffer-menu][Replace buffer-menu.]]
  - [[#set-buffer-groups][Set buffer groups.]]
  - [[#dont-show-filter-groups-if-there-are-no-buffers-in-that-group][Don't show filter groups if there are no buffers in that group.]]
  - [[#use-human-readable-size-column][Use human readable size column.]]
- [[#dired-mode-configurations][Dired Mode Configurations]]
  - [[#enable-dired-icon-mode][Enable dired icon mode.]]
    - [[#setting-to-make-the-image-size-of-the-dired-icon-icons-bigger][Setting to make the image size of the dired-icon icons bigger.]]
  - [[#dired-recent][Dired recent]]
  - [[#modify-evil-keybindings-for-dired-mode-map][Modify evil keybindings for dired-mode-map]]
  - [[#auto-revert-dired-buffers][Auto-revert dired buffers]]
  - [[#dired-listing][Dired listing]]
    - [[#listing-switches][Listing switches.]]
    - [[#sort-files-by-modified-date][Sort files by modified date.]]
    - [[#hide-the-details-on-dired-mode-for-a-cleaner-appearance][Hide the details on dired mode, for a cleaner appearance.]]
  - [[#dired-dwim-target][Dired dwim target]]
- [[#-emoji-support][😄 Emoji support]]
- [[#mode-line-format][Mode line format]]
  - [[#a-small-diatribe-on-customising-the-mode-line][A small diatribe on customising the mode line]]
  - [[#the-code-of-my-mode-line-customisation][The code of my mode line customisation]]
- [[#org-mode-configuration][Org Mode configuration]]
  - [[#hook-toc-org-to-org-mode][Hook toc-org to org-mode]]
  - [[#org-mouse][Org-mouse]]
  - [[#define-c-c-l-as-the-keybinding-to-org-cliplink][Define C-c l as the keybinding to org-cliplink.]]
  - [[#define-c-c-d-as-the-keybinding-to-org-toggle-link-display][Define C-c d as the keybinding to org-toggle-link-display]]
  - [[#define-c-c-e-as-the-keybinding-to-org-emphasize][Define C-c e as the keybinding to org-emphasize]]
  - [[#unbind-c-c--so-that-lacarte-can-function-properly][Unbind C-c . so that Lacarte can function properly]]
  - [[#beautification-settings][Beautification settings]]
    - [[#org-bullets][Org bullets]]
    - [[#set-org-ellipsis-symbol-and-color][Set org ellipsis symbol and color]]
  - [[#set-keywords-for-org-progress-states][Set keywords for Org progress states.]]
  - [[#special-ctrl-ae-behavior-in-org-mode][Special Ctrl-a/e behavior in org mode]]
  - [[#use-query-to-confirm-killing-of-hidden-subtrees][Use query to confirm killing of hidden subtrees]]
  - [[#override-shift--arrows-in-certain-places-in-favor-of-windmove][Override shift + arrows in certain places in favor of windmove]]
  - [[#auto-adjust-footnotes][Auto adjust footnotes]]
  - [[#follow-link-in-orgmode-by-pressing-enter-key][Follow link in orgmode by pressing Enter key]]
  - [[#strikethrough-for-done-tasks][Strikethrough for Done tasks]]
  - [[#color-only-the-stars-for-the-org-mode-levels][Color only the stars for the org mode levels]]
  - [[#custom-color-for-headline-levels-2-and-3][Custom color for headline levels 2 and 3]]
  - [[#custom-color-for-org-source-code-blocks][Custom color for org source code blocks]]
  - [[#custom-postamble-in-html-export][Custom postamble in html export]]
  - [[#add-shortcut-templates-for-emacs-lisp-org-and-title][Add shortcut templates for emacs lisp, org and title]]
  - [[#enable-speed-keys][Enable Speed keys]]
  - [[#change-org-show-context-detail][Change org-show-context-detail]]
  - [[#change-org-block-indentation-setting][Change org-block indentation setting]]
  - [[#custom-org-related-functions][Custom org-related functions]]
    - [[#split-org-block-in-a-dwim-manner][Split org block in a dwim manner]]
- [[#undo-tree][Undo tree]]
- [[#drag-stuff-package-config][Drag-stuff package config]]
- [[#espy-password-fetcher-package-config][Espy password fetcher package config]]
- [[#ivy-counsel-swiper-and-ivy-prescient-configuration][Ivy-counsel-swiper and ivy-prescient configuration]]
  - [[#ivy-prescient][Ivy prescient]]
  - [[#basic-ivy-settings][Basic ivy settings]]
    - [[#ivy-faces][Ivy faces]]
    - [[#configure-counsel-outline][Configure counsel-outline]]
  - [[#ivy-rich][Ivy rich]]
    - [[#add-custom-display-transformer-for-try][Add custom display transformer for try]]
    - [[#add-display-transformer-for-package-reinstall][Add display transformer for package-reinstall]]
    - [[#add-display-transformer-for-counsel-switch-buffer][Add display transformer for counsel-switch-buffer]]
    - [[#modify-display-transformer-for-counsel-describe-variable][Modify display transformer for counsel-describe-variable]]
    - [[#modify-display-transformer-for-counsel-recentf][Modify display transformer for counsel-recentf]]
    - [[#add-display-transformer-for-counsel-buffer-or-recentf][Add display transformer for counsel-buffer-or-recentf]]
    - [[#enable-display-transformers][Enable display transformers]]
- [[#helpful-enhanced-help-buffers][Helpful: Enhanced help buffers]]
  - [[#set-evil-emacs-state-as-the-default-initial-state-for-helpful-mode][Set evil emacs state as the default initial state for helpful-mode]]
  - [[#integrate-helpful-with-counsel][Integrate helpful with counsel]]
  - [[#also-bind-helpful-key-to-the-key-used-by-default-for-describe-key][Also bind helpful-key to the key used by default for describe-key]]
  - [[#add-helpful-mode-to-ibuffer-help-buffer-modes][Add helpful-mode to ibuffer help buffer modes]]
  - [[#incorporate-elisp-demos-into-helpful][Incorporate elisp-demos into helpful]]
- [[#terminal-configuration][Terminal configuration]]
  - [[#kill-terminal-buffer-automatically-when-exiting][Kill terminal buffer automatically when exiting]]
  - [[#redefine-keys-in-term-modes-to-their-normal-behavior][Redefine keys in term modes to their normal behavior]]
- [[#magit][Magit]]
  - [[#set-magit-faces][Set magit faces]]
  - [[#magit-status-keybinding][Magit-status keybinding]]
  - [[#emojify-insert-emoji-shortcut][Emojify insert emoji shortcut]]
- [[#trashed-trash-can-management-from-emacs-linux-only][Trashed: trash can management from emacs (Linux only)]]
- [[#emacs-lisp-related-configuration][Emacs-lisp related configuration]]
  - [[#enable-show-paren-mode][Enable show-paren-mode]]
  - [[#enable-electric-pair-mode][Enable electric-pair-mode]]
- [[#hideshow-mode][HideShow mode]]
- [[#hide-minor-mode-indicators-from-mode-line][Hide minor mode indicators from mode line]]
- [[#ediff][Ediff]]
  - [[#operate-ediff-through-dired][Operate ediff through dired]]
- [[#tangle-the-org-file-on-save][Tangle the org file on save]]

* Introduction
Here begins my literate emacs configuration. I tended to comment my init file a whole lot, so I figured I preferred a better interface for the comments.
** Notes on the evolution of my emacs initialisation
I first started off with the .emacs file in my home directory. I had to look for it though amongst all the other hidden files in that directory. So, especially after I found out I could version-control my emacs dotfiles, I switched to .emacs.d/init.el. so that I could have my config in one place. That setup still wasn’t satisfactory enough though. So when I found out I could have my config in an org file, which would allow my comments to truly stand out, I was intrigued and wanted to accomplish that. I initially thought however it'd be too hard to do (I do think that a lot when trying new ways of doing things…). I took the plunge however, and it turned out to be way easier than I thought. For a while I kept most of my config in README.org and used init.el only for the preliminary configs that needed to be loaded before loading README.org with ~org-babel-load-file~. If I wanted however to change a preliminary setting, I had to remember to do this on both files and when I changed README.org, emacs took a little longer to load because it tangled README.el. I thus ended up deciding to put everything in README.org and tangle init.el from it.
** On tangling init.el from the org file
I tangle the init.el file by writing on the top of the README.org file the following:
#+begin_example
#+property: header-args :tangle init.el
#+end_example
Note that when changing the property headings, we need to use C-c C-c with the cursor on it to refresh its setting (see [[https://emacs.stackexchange.com/a/19363][here]]).\\
This configures that the file will be tangled to a file called init.el. This can be triggered manually with ~C-c C-v t~, but can also be done automatically upon saving (see [[https://www.reddit.com/r/emacs/comments/bex2ko/pure_emacs_lisp_init_skeleton/el99cse/][here]] and [[https://www.reddit.com/r/emacs/comments/372nxd/how_to_move_init_to_orgbabel/crjicdv/][here]]). This uses file local variables set at the end of the org file and said variables need to be declared as safe so that emacs won't warn about them being unsafe (see [[https://www.reddit.com/r/emacs/comments/5d4hqq/using_babel_to_put_your_init_file_in_org/da1vmvb/][here]]) - the implementation of this can thus be found at the end of this file.
** Peculiarities of this configuration
My configuration has some specific traits that differentiate it from others. They are the following:
*** Doesn't use ~use-package~ by choice
A lot of people use [[https://github.com/jwiegley/use-package][use-package]] to manage their packages and package settings, especially as it's supposed to make loading emacs faster. I tried to convert my existing config, which uses the "regular" way, a couple of times, and ended up realizing that use-package isn't compatible with my way of thinking about my configuration. For one thing, ~use-package~ places every setting of a particular package under its config, even if said setting is configuring said package to be used by another package. For example, adding ~helpful-mode~ to ~ibuffer-help-buffer-modes~ (a setting that sets which buffers are going to be colored with the comment color, as help buffers are) would be placed under the ibuffer config with ~use-package~, but I feel it belongs more under the Helpful config instead, because I see it as configuring Helpful in order to be detected by ibuffer instead of configuring ibuffer to detect Helpful (small but important in terms of classification difference). ~use-package~ also thinks of built-in "packages" the same way as external packages, thus (potentially) requiring a construction such as ~(use-package dired [...]~ in order to configure dired for example, instead of just setting the various desired options without such a preamble. In short, for these and other reasons, ~use-package~ just doesn't feel all that simple or intuitive for me to use. As for the decreasing loading time aspect of it, I'm not too bothered by the loading time, as long as I open emacs once per day, and keep it open afterwards (I try, but sometimes close it absentmindedly, since I do the same with other editors after I'm done using them).
*** Doesn't use git for package management by choice
Many people use package management solutions other than the default package.el to install and update packages e.g. [[https://framagit.org/steckerhalter/quelpa][quelpa]], [[https://github.com/dimitri/el-get][el-get]], [[https://github.com/raxod502/straight.el][straight]]. All these however require git as far as I know, something that makes emacs harder (if not impossible) to deploy on computers either without git installed or, if it is installed, in a location not in the PATH, and thus not detectable by emacs and other applications that read the path ([[https://cmder.net][Cmder]], for example, includes git for windows in its full version, but it doesn't seem to be detected by other applications). For this reason I stick to using package.el for my package management ; for the single-file packages I use that aren't on MELPA, I use some custom code that leverages ~url-copy-file~ to download each file and place said files in a folder that gets added to the load-path (see [[*Where I bootstrap the elisp files][below]]).
* Main configuration
First, let's make sure the init file will be lexically bound, since all the cool kids do it.
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src
Also make this config incompatible with emacs versions lower than 25.1, so that I won't have to bother with too many backwards compatiblity measures. Tbh, I initially had some reservations about doing this, since the default emacs version on Ubuntu 16.04 LTS and the Linux Mint 18 series (which are supported until 2021) is 24.3 iirc, but I've been using [[https://launchpad.net/~kelleyk/+archive/ubuntu/emacs][a PPA for a while now]] and on Windows I can download and use the latest stable release just fine, since my current Windows machine is 64bit. Note: I used to use at some point a 32bit Windows pc where for some reason only the i386 release could run, and not the i686 one, and thus the latest version supported there was 24.3, but since I don't use it anymore, I have even less reason to support versions below 25 in my config.
#+begin_src emacs-lisp
(when (version< emacs-version "25.1")
  (error "This configuration requires GNU Emacs 25.1 or newer, but you're running %s" emacs-version))
#+end_src
* Preliminaries: package management settings
** Add MELPA and org repositories
First I add the MELPA and org repositories. The code I use for this is taken from [[https://melpa.org/#/getting-started][MELPA's Getting Started section]] and it accounts for the incompatibility of Windows with Emacs's https support system, GnuTLS, by using http on Windows if GnuTLS isn't available. [[http://www.lonecpluspluscoder.com/2015/08/01/adding-tls-support-to-emacs-24-5-on-windows/][This article]] might be helpful in case I absolutely have to install GnuTLS on Windows.
#+begin_src emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t))
(package-initialize)
#+end_src
** Auto-install packages
Ideas from [[http://aaronbedra.com/emacs.d/#default-packages][Aaron Bedra's Emacs 24 Configuration]] and [[http://www.icode9.com/content-3-87243.html][here]].\\
The first part of the code defines a variable containing the core packages to be installed ; from this list are absent the packages installed manually, present in the lisp folder, and packages that are only installed under certain conditions (see below). Afterwards, the value of ~package-selected-packages~ is set to the value of ~lmintmate/packages~, so that we can benefit from the ~package-selected-packages~ feature and its benefits (e.g. autoremoving packages not on the list, clearly setting dependencies as opposed to packages installed by the user e.t.c).
#+begin_src emacs-lisp
(defvar lmintmate/packages '(color-theme-modern
counsel
dired-icon
dired-recent
drag-stuff
emojify
espy
evil
free-keys
no-littering
parent-mode
rainbow-mode
toc-org
transpose-frame
try
undo-tree
vimrc-mode
;; emacs 24.4 and above
elisp-demos
evil-goggles
evil-snipe
ivy-rich
markdown-mode
org-cliplink
;; emacs 25.1 and above
evil-fringe-mark
evil-traces
helpful
ivy-prescient)
  "Core packages")

(setq package-selected-packages lmintmate/packages)
#+end_src
Here I conditionally add to the value of ~package-selected-packages~ some packages that are compatible with only certain OS or emacs versions. 
#+begin_src emacs-lisp
;; Packages to be installed only when a certain executable is on the path

(when (executable-find "git")
  (add-to-list 'package-selected-packages 'magit))

;; Packages for use only on my Linux system

(when (eq system-type 'gnu/linux)
  (add-to-list 'package-selected-packages 'trashed))

;; Packages that require emacs versions above 25.1

(unless (version< emacs-version "25.2")
  (add-to-list 'package-selected-packages 'minions))

;; GNU ELPA keyring package for versions below 26.3
(when (version< emacs-version "26.3" )
  (add-to-list 'package-selected-packages 'gnu-elpa-keyring-update))
#+end_src
Finally, populate the ~package-archive-contents~ with ~package-refresh-contents~, so that the installation will take place properly with a fresh setup, and install all packages in the ~package-selected-packages~ list with ~package-install-selected-packages~, if said command exists.
#+begin_src emacs-lisp
(unless package-archive-contents
  (message "%s" "Refreshing package database...")
  (package-refresh-contents))

(when (fboundp 'package-install-selected-packages)
  (package-install-selected-packages))
#+end_src
** Force package.el to install the latest version of org-mode
Because org-mode is already builtin, it doesn't get reinstalled automatically from the org-mode repository, as it should. Thus, if I want the latest org-mode version, I would normally have to install it manually from ~package-list-packages~, and only then it would overtake the builtin version (see also [[https://emacs.stackexchange.com/questions/31825/cant-install-org-through-package-manager#comment64743_31837][here]]). However trying to start emacs without the latest version of org-mode installed causes emacs to error out saying that org-tempo wasn't detected, because I require that later in the config and it apparently wasn't included in the built in emacs version. I thus found [[https://github.com/jwiegley/use-package/issues/319#issuecomment-363981027][here]] a solution that looks for the latest version of org with a regex and, if it doesn't find it, proceeds to install it from the org repository. I also add org to the list of selected packages, so that it won't propose to autoremove it.
#+begin_src emacs-lisp
;; enforce installing the latest version of org mode
(unless (file-expand-wildcards (concat package-user-dir "/org-[0-9]*"))
(if (yes-or-no-p "Do you want to install the latest version of org-mode?")
  (package-install (elt (cdr (assoc 'org package-archive-contents)) 0))
(message "The latest version of org-mode wasn't installed.")))

(add-to-list 'package-selected-packages 'org)
#+end_src
** Function to update all packages at once without ~list-packages~
From [[https://emacs.stackexchange.com/a/16407][Noninteractively upgrade all packages - Emacs Stack Exchange]].
#+begin_src emacs-lisp
(defun package-upgrade-all ()
  "Upgrade all packages automatically without showing *Packages* buffer."
  (interactive)
  (package-refresh-contents)
  (let (upgrades)
    (cl-flet ((get-version (name where)
                (let ((pkg (cadr (assq name where))))
                  (when pkg
                    (package-desc-version pkg)))))
      (dolist (package (mapcar #'car package-alist))
        (let ((in-archive (get-version package package-archive-contents)))
          (when (and in-archive
                     (version-list-< (get-version package package-alist)
                                     in-archive))
            (push (cadr (assq package package-archive-contents))
                  upgrades)))))
    (if upgrades
        (when (yes-or-no-p
               (message "Upgrade %d package%s (%s)? "
                        (length upgrades)
                        (if (= (length upgrades) 1) "" "s")
                        (mapconcat #'package-desc-full-name upgrades ", ")))
          (save-window-excursion
            (dolist (package-desc upgrades)
              (let ((old-package (cadr (assq (package-desc-name package-desc)
                                             package-alist))))
                (package-install package-desc)
                (package-delete  old-package)))))
      (message "All packages are up to date"))))
#+end_src
* Locale and encoding settings
Set the coding system to utf-8. Needed for Windows.
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src
On my Windows 10 pc, the time string on the modeline (set later on) is set up incorrectly and shows up as weird symbols, most probably because the system display language was English and had to change it to Greek by myself, so some things might have remained in English under the hood. This can be mitigated somewhat by having the time string be in English in that particular system (see [[https://emacs.stackexchange.com/a/24600][here]]).
#+begin_src emacs-lisp
(when (string= (system-name) "LAPTOP-LHEH01GE")
(setq system-time-locale "C"))
#+end_src
* No littering
#+begin_src emacs-lisp
(setq no-littering-etc-directory
      (expand-file-name "config/" user-emacs-directory))
(setq no-littering-var-directory
      (expand-file-name "data/" user-emacs-directory))
(require 'no-littering)
#+end_src
* Setting the default frame parameters on Windows
On Linux, Emacs places its frame just fine, but on Windows it places it on the left side and in such a manner that the mode line was hidden below the Windows toolbar, which meant I had to manually resize the frame every single time (needless to say, this got old very quickly). Here is thus some config to place the default frame near the center of the screen and above the Windows toolbar.
#+begin_src emacs-lisp
;; set frame
(when (eq system-type 'windows-nt)
(setq default-frame-alist '((top . 5) (left . 220) (width . 80) (height . 30))))
#+end_src
* Disabling the tool bar
The snippet below disables tool-bar-mode. I placed it this early in the config so that the toolbar won't be loaded and disabled afterwards, but be disabled from the get-go (I had some glitches with the title screen when I had it further down).
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
* Setting the font
Here, I'm setting the font and the font size. The default font emacs by itself used on my machine appeals a lot to me, so when I found out it was DejaVu Sans Mono, I decided to put it in the config, in case I move to another computer where the font might suddenly be something else entirely I won't like. I also set the font size to 14. The default size seems way too small for me, as if I were trying to watch a bunch of ants...
On systems different from the one I'm currently on (which is Linux Mint MATE), the fonts might look thicker than they should, to an unappealing degree. This can be solved (on Linux systems at least) by going to Appearance > Fonts, and setting hinting to light instead of full. On Windows, where DejaVu Sans Mono is less likely to be preinstalled, Consolas will be used as a fallback.
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
(if (member "DejaVu Sans Mono" (font-family-list))
(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 140)
(set-face-attribute 'default nil :family "Consolas" :height 140))
(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 140))
#+end_src
Also the default fixed pitch font on Windows is really ugly, so set it to Consolas instead there.
#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
(set-face-attribute 'fixed-pitch nil :family "Consolas" :height 140))
#+end_src
* Setting up my must use theme - Blue Mood theme.
I wasn't satisfied with the default Adawaita theme (but then who is?). I tried to find another theme, but most of them (even the popular ones) didn't satisfy my tastes. But when I found Blue Mood, I knew it was the one!\\
In case you haven't encountered it (not too unlikely), it's because it's a part of the [[https://github.com/emacs-jp/replace-colorthemes][color-theme-modern]] package, which apparently recreates older themes for Emacs 24+. In the repository I linked just now, you can see all the other included themes too, complete with screenshots, and, of course, the way to apply them to your init file.\\
I also modified the fringe color to the same background color as the rest of the theme, as its original color was black, and didn't fit in too well with the rest of the colorscheme for me, and changed the highlight color, as it had the same color as the one of the region so that I couldn't distinguish a highlighted region when hl-line-mode was turned on. In addition I modified the color of the edited state of a version-controlled file ~vc-edited-state~ so that it is more apparent. Finally, I modified the colors of ~package-status-installed~ and ~package-status-dependency~, now that they matter more, and also changed ~package-status-built-in~, since I wanted to use its color for the dependencies.
#+begin_src emacs-lisp
(load-theme 'blue-mood t t)
(enable-theme 'blue-mood)

(set-face-attribute 'fringe nil :background "DodgerBlue4")
(set-face-attribute 'font-lock-negation-char-face nil :foreground "tomato")
(set-face-attribute 'font-lock-variable-name-face nil :foreground "tomato")
(set-face-attribute 'font-lock-doc-face nil :foreground "cyan" :inherit 'unspecified)
(set-face-attribute 'highlight nil :background "#235c94")
(set-face-attribute 'package-status-built-in nil :inherit font-lock-comment-face)
(set-face-attribute 'package-status-dependency nil :inherit font-lock-builtin-face)
(set-face-attribute 'package-status-installed nil :inherit font-lock-function-name-face)
(set-face-attribute 'vc-edited-state nil :background "tomato1" :foreground "black" :box '(:line-width 2 :color "tomato1"))
;; setting so that hl-line-mode won't affect syntax coloring
(set-face-foreground 'highlight nil)
#+end_src
** Mode line customisation
I give a flat look to the mode line, to make it look more modern. I also make it look thicker, by putting a box with line-width 2 and color same the foreground around it (trick borrowed from [[http://www.gonsie.com/blorg/modeline.html][Beautifying the Mode Line - Elsa Gonsiorowski]]). In order to keep that look uniform I also styled this way not only both active and inactive mode lines, but also the ~vc-edited-state~ and the various evil tags (see below).
#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :background "grey75" :foreground "black" :box '(:line-width 2 :color "grey75"))
(set-face-attribute 'mode-line-inactive nil :background "grey30" :foreground "grey80" :box '(:line-width 2 :color "grey30"))
(set-face-attribute 'mode-line-highlight nil :box '(:line-width 1 :color "grey20"))
(set-face-attribute 'mode-line-buffer-id nil :weight 'normal)
#+end_src
** Hide line between fringes
Remove the strange white line between two fringes, which appears when the scrollbar is hidden (from [[https://web.archive.org/web/20170413150436/https://ogbe.net/emacsconfig.html][Dennis Ogbe's Emacs configuration file]]).
#+begin_src emacs-lisp
(set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))
#+end_src
* Manually loading external files
I use a couple external lisp files, and I thus need to load my personal lisp directory.
** Where I bootstrap the elisp files
In this section I have some code in emacs lisp that downloads the lisp files I use and places them in the correct place. Specifically, it checks whether the files exist, and if they don't, first creates the containing directory, if it doesn't exist, and then proceeds to download and store the files.
#+begin_src emacs-lisp
(setq lisp-directory (concat user-emacs-directory "lisp"))

(unless (file-directory-p lisp-directory) (make-directory lisp-directory))

;; in addition to greek.el, also download the byte-compiled greek.elc
(unless (file-exists-p (expand-file-name "greek.el" lisp-directory))
    (url-copy-file "http://myria.math.aegean.gr/~atsol/emacs-unicode/greek.el" (expand-file-name "greek.el" lisp-directory)))
(unless (file-exists-p (expand-file-name "greek.elc" lisp-directory))
    (url-copy-file "http://myria.math.aegean.gr/~atsol/emacs-unicode/greek.elc" (expand-file-name "greek.elc" lisp-directory)))

;; byte-compile .el files after downloading them
(unless (file-exists-p (expand-file-name "lacarte.el" lisp-directory))
    (url-copy-file "https://www.emacswiki.org/emacs/download/lacarte.el" (expand-file-name "lacarte.el" lisp-directory)))
(unless (file-exists-p (expand-file-name "lacarte.elc" lisp-directory))
(byte-compile-file (expand-file-name "lacarte.el" lisp-directory)))

(unless (file-exists-p (expand-file-name "org-bullets.el" lisp-directory))
   (url-copy-file "https://raw.githubusercontent.com/lmintmate/org-bullets/invisible-leading-stars/org-bullets.el" (expand-file-name "org-bullets.el" lisp-directory)))
(unless (file-exists-p (expand-file-name "org-bullets.elc" lisp-directory))
(byte-compile-file (expand-file-name "org-bullets.el" lisp-directory)))

(unless (file-exists-p (expand-file-name "elispfl.el" lisp-directory))
   (url-copy-file "https://raw.githubusercontent.com/lmintmate/elispfl/master/elispfl.el" (expand-file-name "elispfl.el" lisp-directory)))
(unless (file-exists-p (expand-file-name "elispfl.elc" lisp-directory))
(byte-compile-file (expand-file-name "elispfl.el" lisp-directory)))
#+end_src
** Where I tell Emacs where is my personal lisp directory.
#+begin_src emacs-lisp
(add-to-list 'load-path lisp-directory)
#+end_src
** Where I load the specific packages
In this section, I load the lisp files previously downloaded.
*** Loading the package for polytonic greek
I’m used to writing Greek with the modern Greek layout, which is quite different from the greek-babel polytonic layout in a way jarring to me. I tried to find a way to solve my problem, and found out with relief that I didn’t need to reinvent the wheel, as someone had already made a package for what I wanted ; a layout that would provide polytonic Greek while also keeping the regular keyboard layout I was used to.\\
This solution to my problem can be found [[http://myria.math.aegean.gr/~atsol/emacs-unicode/][here]] (look under the compiled greek.elc link for the greek.el source).
#+begin_src emacs-lisp
;; load elisp file, use byte compiled version (.elc) if it exists
(load "greek")
#+end_src
*** Loading La Carte (for executing menu commands from the keyboard)
[[https://www.emacswiki.org/emacs/LaCarte][La Carte]] is a package that allows searching and executing menu commands from the keyboard, in a way similar to ivy (in fact, when ivy is installed, this package also benefits from ivy integration, which makes its autocompletion so much better). There is also a builtin in emacs command ~tmm-menubar~, but that one goes literally from menu to submenu, just with keyboard shortcuts instead of mouse clicks, and is thus much less discoverable. I also set up here a keybinding for lacarte (specifically for ~lacarte-execute-menu-command~, because ~lacarte-execute-command~ also includes regular commands, and ~counsel-M-x~ already takes care of that).
#+begin_src emacs-lisp
(require 'lacarte)
(global-set-key (kbd "\C-c.") 'lacarte-execute-menu-command)
#+end_src
*** Loading elispfl (extra font-lock for emacs lisp)
[[https://github.com/cireu/elispfl][elispfl]] is a package with additional syntax highlighting for emacs lisp mode (which notably also fontifies the contents of org src blocks for some reason), not on MELPA. Comparing it with other similar packages, like [[https://github.com/Lindydancer/lisp-extra-font-lock][lisp-extra-font-lock]] and [[https://github.com/tarsius/morlock][morlock]], I think I prefer the stylistic choices of this one more. I use my own fork of it, because I set it to work on ~lisp-interaction-mode~ (the mode of the scratch buffer) as well, and also added an option to propertize the face names based on the faces themselves.
#+begin_src emacs-lisp
(require 'elispfl)

(with-eval-after-load 'elisp-mode
  (elispfl-mode))
;; Highlight face name by the face itself
(setq elispfl-face-use-itself t)
#+end_src
* Startup screen and scratch buffer options
** Inhibit startup screen
At this point I only use the quick link to the Customize interface, so I thought I’d hide it altogether.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
** Scratch buffer message
If the fortune executable can be found, supply a random fortune cookie as the scratch message (found from [[https://www.emacswiki.org/emacs/Fortune#toc2][EmacsWiki: Fortune]]). Otherwise, use the builtin-in lisp library [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/play/cookie1.el][cookie1]]. This library can retrieve random phrases from fortune cookie style files. The type of phrase files it accepts is similar to the default form of fortune files, with the variation that it accepts either ~%~ or ~%%~ as the delimiter between cookies and needs an empty final line after the final delimiter, while the fortune program doesn't require this and works fine without said empty final line (see [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/play/cookie1.el#n38][here]]). The function normally used to insert cookies is [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/play/cookie1.el#n100][cookie-insert]]. I don't like however that this function by default adds new lines unnecessarily, so I redefine it without the new lines as ~lmintmate/cookie-insert~. Both the ~cookie-insert~ function and my customised variant have to have the phrase file to be used (here named ~apofthegmata.txt~, and located in the ~user-emacs-directory~) as an argument. In case that file isn't present (e.g. if the code for downloading it fails for whatever reason), show a custom fortune-style message to avoid erroring out.\\
Worth noting: The ~cookie1~ method is very satisfactory, but its only problem is that it doesn't respect the lines of the phrase file (that is, it puts some stuff that is on separate lines on the same line). Until I figure out how to solve this, I'm keeping the ~shell-command "fortune"~ method around, even though I would rather not depend on an external program for this, since there is a builtin library that does (almost) the same.
#+begin_src emacs-lisp
(unless (executable-find "fortune")
(unless (file-exists-p (concat user-emacs-directory "apofthegmata.txt"))
(url-copy-file "https://gitlab.com/snippets/1870200/raw" (concat user-emacs-directory "apofthegmata.txt")))
(require 'cookie1)
(defun lmintmate/cookie-insert (phrase-file &optional count startmsg endmsg)
  (setq phrase-file (cookie-check-file phrase-file))
  (let ((cookie-vector (cookie-snarf phrase-file startmsg endmsg)))
    (cookie-shuffle-vector cookie-vector)
    (let ((start (point)))
      (cookie1 (min (- (length cookie-vector) 1) (or count 1)) cookie-vector)
      (fill-region-as-paragraph start (point) nil)))))

(if (executable-find "fortune")
   (setq initial-scratch-message
         (with-temp-buffer
           (shell-command "fortune" t)
           (let ((comment-start ";;"))
             (comment-region (point-min) (point-max)))
           (concat (buffer-string))))
(if (file-exists-p (concat user-emacs-directory "apofthegmata.txt"))
(setq initial-scratch-message
(with-temp-buffer
           (lmintmate/cookie-insert
(concat user-emacs-directory "apofthegmata.txt"))
           (let ((comment-start ";;"))
             (comment-region (point-min) (point-max)))
           (concat (buffer-string) "\n")))
(setq initial-scratch-message (concat ";; Είς οιωνός άριστος, αμύνεσθαι περί πάτρης." "\n"))))
#+end_src
I decided not to change the scratch buffer’s major mode however, because, as weird as it may sound, I like [[https://en.wikipedia.org/wiki/Polish_notation][prefix notation]] a lot (and think that the [[https://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish notation]] is overrated in comparison), and want to keep having it as a nifty little prefix calculation mode.
** New message for the startup echo area
#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Καλωσήλθες!"))
#+end_src
* 🇬🇷 Nationality parameters
** Setting the calendar up in Greek.
See also [[https://www.emacswiki.org/emacs/CalendarLocalization][EmacsWiki: Calendar Localization]].
#+begin_src emacs-lisp
(setq calendar-week-start-day 1
          calendar-day-name-array ["Κυριακή" "Δευτέρα" "Τρίτη" "Τετάρτη"
                                   "Πέμπτη" "Παρασκευή" "Σάββατο"]
          calendar-month-name-array ["Ιανουάριος" "Φεβρουάριος" "Μάρτιος"
                                     "Απρίλιος" "Μάιος" "Ιούνιος"
                                     "Ιούλιος" "Αύγουστος" "Σεπτέμβριος"
                                     "Οκτώβριος" "Νοέμβριος" "Δεκέμβριος"])
#+end_src
** Set input method to greek
In order to be able to write greek with the keyboard set to English (useful for those pesky Latin C- and M- shortcuts). Toggle with ~C-\~. ~set-input-method~ makes the set input method the default when emacs starts up, which usually isn't desired. Contrarily ~setq default-input-method~ sets the input method as available with ~toggle-input-method~, but doesn't make it the default when emacs starts up.
#+begin_src emacs-lisp
(setq default-input-method "el_GR")
#+end_src
** Redirect commands with Greek letters to the correct commands
Sometimes I forget to switch the keyboard language from Greek to English (especially when I'm using emacs in tandem with other applications that require the keyboard be set to Greek in order to write in that language) and, as a result, I get something like «M-χ is undefined». I used to use [[https://stackoverflow.com/a/10658699][this method from Stack Overflow]], which added bindings with Greek letters and told emacs to consider them equivalent to the ones with latin letters. This however didn't work for commands which had not only a modifier and a letter, but also additional letters (e.g. C-c u). Since the last time I checked this Stack Overflow thread however, [[https://stackoverflow.com/a/54647483][a new method has been added]] that also works for the commands the other method didn't. I modified it accordingly and will use that one from here on out.
#+begin_src emacs-lisp
(defun reverse-input-method (input-method)
  "Build the reverse mapping of single letters from INPUT-METHOD."
  (interactive
   (list (read-input-method-name "Use input method (default current): ")))
  (if (and input-method (symbolp input-method))
      (setq input-method (symbol-name input-method)))
  (let ((current current-input-method)
        (modifiers '(nil (control) (meta) (control meta))))
    (when input-method
      (activate-input-method input-method))
    (when (and current-input-method quail-keyboard-layout)
      (dolist (map (cdr (quail-map)))
        (let* ((to (car map))
               (from (quail-get-translation
                      (cadr map) (char-to-string to) 1)))
          (when (and (characterp from) (characterp to))
            (dolist (mod modifiers)
              (define-key local-function-key-map
                (vector (append mod (list from)))
                (vector (append mod (list to)))))))))
    (when input-method
      (activate-input-method current))))

(reverse-input-method 'el_GR)
#+end_src
* 😈 Evil
This is basically an admission of defeat. Specifically, the point of learning to use emacs is imo to also use the builtin keybindings, but I only managed to learn some of them that are however for tasks other than editing text. In regards to editing text, I only learnt a couple commands (mainly cut, copy and paste), but wasn't able to retain anything more advanced. On the other hand, I was able to retain a lot more vim commands, firstly most probably because vim, due to its modal nature, is less forgiving to people that haven't learnt the commands properly, and secondly because vim's commands are also shorter and thus easier to remember. I thus decided to use a vim emulation method for text editing on emacs. I first tried to use [[https://www.emacswiki.org/emacs/ViperMode][Viper]], since its built into emacs, but that one not only lacked features I'm used to from regular Vim, such as Visual Mode, since it's emulating Vi instead, but also was more difficult to configure, as in I couldn't find snippets of code online to help me out because nobody uses Viper anymore. So Evil it is. Here, I am configuring Evil for my own needs: I care mainly about it working properly when editing text and don't want to have evil-type keybindings available everywhere, since I don't otherwise have a problem with emacs chords (as long as I can remember them).
** Configuring evil itself
*** Preliminaries before loading evil
The configuration options of evil have to be placed before evil itself is loaded.\\
Scroll up with ~C-u~: normally emacs uses ~C-u~ as universal-argument (something like the prefixing of vim commands), but since vim uses a different prefixing method, we can use that key for scrolling up instead.
#+begin_src emacs-lisp
(setq evil-want-C-u-scroll t)
#+end_src
Prevent opening new lines (via o,O) from auto-indenting. This is annoying and besides, if I want to indent, I'll do it myself. I set it with ~setq-default~ because otherwise the variable would only be buffer-local and wouldn't thus be properly enabled.
#+begin_src emacs-lisp
(setq-default evil-auto-indent nil)
#+end_src
Set evil-toggle-key: I set it to C-' because when I tried to set it to C-q (the Viper default) it didn't work for some reason, and I use C-z (the Evil default) for something else.
#+begin_src emacs-lisp
(setq evil-toggle-key "C-'")
#+end_src
Option so that the stuff replaced by pasting in visual mode won't be copied to the clipboard. While this does work as intended inside emacs, it seems that the replaced text is otherwise copied to the system-wide clipboard and thus using paste outside emacs after pasting over some selected text pastes the replaced by pasting text instead of the text that was in the clipboard before doing so.
#+begin_src emacs-lisp
(setq evil-kill-on-visual-paste nil)
#+end_src
Change undo behavior so that any changes made while in insert mode won't all be undone.
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src
Set the mode line position of the evil state tag: The default position is somewhere in the middle of the modeline, but I put it in the beginning, as in [[https://github.com/itchyny/lightline.vim][lightline]] (see [[https://emacs.stackexchange.com/questions/19024/move-evil-tag-to-beginning-of-mode-line/19032#19032][here]]).
#+begin_src emacs-lisp
(setq evil-mode-line-format '(before . mode-line-front-space))
#+end_src
Propertize and color evil mode line state tag depending on the state: See [[https://github.com/Malabarba/smart-mode-line/issues/195#issuecomment-338447042][here]]. I changed the name of each state tag from the default ~<N>~, ~<I>~ e.t.c, to their full names (e.g. ~NORMAL~, ~INSERT~ e.t.c), as in lightline. For the colors, I chose shades of purple for Emacs and Motion states (since that's Emacs's logo color), and drew the rest of the colors from [[https://github.com/lmintmate/blue-mood-vim#lightline-theme][my blue-mood lightline theme]].
#+begin_src emacs-lisp
    (setq evil-normal-state-tag   (propertize " NORMAL " 'face '((:background "#4f94cd" :foreground "black" :box (:line-width 2 :color "#4f94cd"))))
          evil-emacs-state-tag    (propertize " EMACS " 'face '((:background "MediumPurple2"       :foreground "black" :box (:line-width 2 :color "MediumPurple2"))))
          evil-insert-state-tag   (propertize " INSERT " 'face '((:background "#7fff00"    :foreground "black" :box (:line-width 2 :color "#7fff00"))))
          evil-replace-state-tag  (propertize " REPLACE " 'face '((:background "#ff6347"      :foreground "black" :box (:line-width 2 :color "#ff6347"))))
          evil-motion-state-tag   (propertize " MOTION " 'face '((:background "plum3"          :foreground "black" :box (:line-width 2 :color "plum3"))))
          evil-visual-state-tag   (propertize " VISUAL " 'face '((:background "#ffd700"           :foreground "black" :box (:line-width 2 :color "#ffd700"))))
          evil-operator-state-tag (propertize " OPERATOR " 'face '((:background "yellow"    :foreground "red" :box (:line-width 2 :color "yellow")))))
#+end_src
*** Load evil
#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src
*** Set evil keybindings
First off, set the initial state of ~free-keys-mode~ to emacs, as it doesn't work properly with the normal evil state.
#+begin_src emacs-lisp
(evil-set-initial-state 'free-keys-mode 'emacs)
#+end_src
Set the initial state of ibuffer-mode to normal, so that I can use vim commands to navigate around the buffer. The other commands are kept the way they are.
#+begin_src emacs-lisp
(evil-set-initial-state 'ibuffer-mode 'normal)
#+end_src
Set the initial state of xref mode to emacs, as it doesn't work properly with the normal evil state.
#+begin_src emacs-lisp
(evil-set-initial-state 'xref--xref-buffer-mode 'emacs)
#+end_src
Bind up and down arrows to move by visual lines: I often want to move by visual lines, for example in text documents where I write long lines (such as this very text), but binding ~j~ and ~k~ for that broke prefixing them with numbers, so I decided to bind the arrow keys, which aren't used with a prefix, if at all, anyways.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "<up>") 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "<down>") 'evil-next-visual-line)
#+end_src
Create bindings to move to beginning and end of visual lines: Here I used the only bindings that remained available.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "Q") 'evil-beginning-of-visual-line)
(define-key evil-normal-state-map (kbd "U") 'evil-end-of-visual-line)
(define-key evil-visual-state-map (kbd "Q") 'evil-beginning-of-visual-line)
(define-key evil-visual-state-map (kbd "U") 'evil-end-of-visual-line)
#+end_src
Make the enter key in normal state act like enter in emacs state: Enter as a key in Vim is nigh useless, but I often want to open new lines without entering insert mode. Binding enter to the command used in emacs state did the trick. However, I don't want this binding to apply in modes that have nothing to do with editing text. I found that I can solve this problem by using ~evil-define-key~ to define specific keys in specific states for specific modes (see [[https://github.com/noctuid/evil-guide#mode-specific-keybindings][here]]).\\
Note: the help string for ~evil-define-key~ also specifies that:
#+begin_example
It is possible to specify multiple states and/or bindings at
once:

    (evil-define-key '(normal visual) foo-map
      "a" 'bar
      "b" 'foo)
#+end_example
For org-mode, I use the command ~org-return~ instead, as it acts as a newline or follows a link depending on the context, and I didn't want to lose the latter capability.
#+begin_src emacs-lisp
(evil-define-key 'normal text-mode-map
(kbd "<return>") 'newline)

(evil-define-key 'normal org-mode-map
(kbd "<return>") 'org-return)

(evil-define-key 'normal prog-mode-map
(kbd "<return>") 'newline)
#+end_src
Prevent ~x~ and ~X~ from copying to the clipboard: I bound these buttons to the commands used by delete and backspace in emacs state (though in the case of backspace, not exactly, as backspace also deletes indentation and I didn't want ~X~ to do that). Note that when prefixed by a number, they do copy to the clipboard, but that's to be expected.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "x") 'delete-forward-char)
(define-key evil-normal-state-map (kbd "X") 'delete-backward-char)
#+end_src
Bind command to mark whole buffer while in evil visual state. I know that [[https://github.com/supermomonga/evil-textobj-entire][evil-textobj-entire]] exists, but I couldn't really get it working (at least when I used it with try). Plus, it hasn't been updated in years, and I only wanted to be able to mark the entire buffer anyways, and not anything else this text object might have provided.
#+begin_src emacs-lisp
(define-key evil-visual-state-map "ae" 'mark-whole-buffer)
#+end_src
*** Custom operators and text objects
Operator to replace a text object with the clipboard content, without altering the clipboard. E.g. ~gcib~ will replace the content between () and it wont alter the clipboard. Bound to ~gc~ (mnemonic: get clipboard). Adapted from [[https://www.reddit.com/r/spacemacs/comments/cl2q0f/how_have_you_tweaked_spacemacs_or_emacs_using/evsgt2w/][How have you tweaked spacemacs (or emacs) using elisp? : spacemacs]].
#+begin_src emacs-lisp
(evil-define-operator my/evil-replace-with-kill-ring (beg end)
    "Replace with killring action."
    :move-point nil
    (interactive "<r>")
    (save-excursion
      (delete-region beg end)
      (goto-char beg)
      (call-interactively 'evil-paste-before 1)))

  (define-key evil-normal-state-map "gc" 'my/evil-replace-with-kill-ring)
#+end_src
Function text object (e.g. to delete a function). Bound to ~f~ e.g. to delete a function, press ~daf~. Note that when in org-mode, this deletes the entire src block. (Adapted from [[https://www.reddit.com/r/spacemacs/comments/cl2q0f/how_have_you_tweaked_spacemacs_or_emacs_using/evsgt2w/][How have you tweaked spacemacs (or emacs) using elisp? : spacemacs]].)
#+begin_src emacs-lisp
  (evil-define-text-object my/function-text-object (count)
    "Function text object"
    (interactive)
    (save-mark-and-excursion
      (mark-defun)
      (let ((m (mark)))
        (if (looking-back "*/\n")
            (progn
              (previous-line)
              (list m (first (sp-get-comment-bounds))))
          (list m (point))))))
  (define-key evil-inner-text-objects-map "f" 'my/function-text-object)
  (define-key evil-outer-text-objects-map "f" 'my/function-text-object)
#+end_src
** Enable and configure evil packages
*** Evil goggles
[[https://github.com/edkolev/evil-goggles][This package]] provides visual indications for various evil actions.\\
First disable highlight for recording macros, as it's distracting. This has to be done before evil-goggles-mode is started.
#+begin_src emacs-lisp
(setq evil-goggles-enable-record-macro nil)
#+end_src
Also disable highlight for setting marks for the same reason, as well as the fact that marks are clearly denoted with the use of evil-fringe-mark.
#+begin_src emacs-lisp
(setq evil-goggles-enable-set-marker nil)
#+end_src
Enable evil-goggles.
#+begin_src emacs-lisp
(evil-goggles-mode)
#+end_src
Set the duration of the highlight.
#+begin_src emacs-lisp
(setq evil-goggles-duration 0.605)
#+end_src
Set the duration of the highlight for actions that are delayed until the highlight disappears e.g. delete, change.
#+begin_src emacs-lisp
(setq evil-goggles-blocking-duration 0.250)
#+end_src
Change evil-goggle colors to the diff-define colors.
#+begin_src emacs-lisp
(evil-goggles-use-diff-refine-faces)
#+end_src
*** evil-fringe-mark
[[https://github.com/Andrew-William-Smith/evil-fringe-mark][This package]] shows evil marks on the fringe using bitmaps (no idea why this was needed for the implementation, since [[https://github.com/kshenoy/vim-signature][vim-signature]] can use regular letters just fine - maybe to account for the presence of line numbers in the fringe? Though vim-signature seems fine in that case. Must be a difference between vim's sign column and emacs's fringe...).
#+begin_src emacs-lisp
(require 'evil-fringe-mark)
(global-evil-fringe-mark-mode)
#+end_src
Face for buffer-local fringe marks: Make it chartreuse green, different from the gold of file marks.
#+begin_src emacs-lisp
(set-face-attribute 'evil-fringe-mark-local-face nil :inherit font-lock-function-name-face)
#+end_src
*** evil-snipe
[[https://github.com/hlissner/evil-snipe][This package]] provides 2-character based motions bound by default to s and S and also provides highlight for the 1-character motions f,F,t,T. I enable here both the regular ~evil-snipe-mode~, which enables the s and S motions because using 2-characters does indeed seem more accurate than using 1, and also the ~evil-snipe-override-mode~ which adds highlighting to the f,F,t,T motions.
#+begin_src emacs-lisp
(require 'evil-snipe)
(evil-snipe-mode 1)
(evil-snipe-override-mode 1)
#+end_src
I don't however want to override the default action of the S key, because, while the s key isn't much quicker than just using ~i~ or ~a~ and delete or backspace, the ~S~ key substitutes a whole line, which is useful if I've written 4-5 words in a new line and want to rewrite e.g. the start of a sentence. Thus here I disable the ~S~ motion of evil-snipe because all it does is using the 2-char motion but from the end of the line, and I find the default action of ~S~ (that is, substituting a line) more useful.
#+begin_src emacs-lisp
(evil-define-key 'normal evil-snipe-local-mode-map
  "S" nil)
#+end_src
*** evil-traces
[[https://github.com/mamapanda/evil-traces][This package]] is roughly the equivalent of evil-goggles for ex (echo area with semicolon) commands. Here I also change its colors to the diff-define colors.
#+begin_src emacs-lisp
(evil-traces-mode)
(evil-traces-use-diff-refine-faces)
#+end_src
* Misc configuration parameters
** The Bell
[[https://www.emacswiki.org/emacs/AlarmBell][That infamous bell…]] I only found out about its «charms» because it turns out my system sounds were disabled for some reason and I hadn't even realised this was the case. This is my way to exterminate those annoying sounds everytime anything out of the norm happens (that's why we have text messages in the first place after all!). I disabled alarms completely as even the visual indication (which is a nice wheat color in my colortheme) can be distracting…
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Disable dialog boxes
#+begin_src emacs-lisp
(setq use-dialog-box nil)
#+end_src
** Separate custom file
Put it in the no-littering config folder. Idea from [[https://git.sr.ht/~bandali/dotfiles/tree/7c281dfc3ce6c308fd2f4fdf9f85d49512abd1e9/.emacs.d/init.el#L200][here]] - also see [[https://github.com/emacscollective/no-littering/blob/b36e1d28b97693850da258e103f24c40ec882753/no-littering.el#L187-L190][here]].
#+begin_src emacs-lisp
(setq custom-file (no-littering-expand-etc-file-name "custom.el"))
#+end_src
** Set the format of the frame title
It shows relative file path if a file is opened, whether the buffer is modified or not, and the emacs version (adapted from [[https://www.emacswiki.org/emacs/FrameTitle][EmacsWiki: Frame Title]]).
#+begin_src emacs-lisp
(setq frame-title-format
    '((:eval (if (buffer-file-name)
                  (abbreviate-file-name (buffer-file-name))
                    "%b"))
      (:eval (if (buffer-modified-p)
                 " [+]"))
      " - Emacs " emacs-version))
#+end_src
** Time in modeline
The only way to have the time mode not display the load average, it turns out, is to put the relevant config before loading display-time-mode. Who would have thought? (I got the idea to try this approach from [[http://ivanmalison.github.io/dotfiles/#timeinmodeline][Ivan Malison's dotfiles]]). An explanation of my ~display-time-format~ config: It basically shows the day of the week, then day/month, then hours:minutes. For more functions, Customize instructs to look at the function ~format-time-string~.
#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-format "%a %d/%m %H:%M")
(display-time-mode 1)
#+end_src
** Do not autosave nor make any backup files.
All they do is litter the place and trigger a nagging prompt whenever I leave Emacs without having saved.
#+begin_src emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+end_src
** Do not create lockfiles
The only thing they do is being annoying, and I'm not going to find myself in a situation where I'll be writing on the exact same file as someone else.
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
** Delete by moving to the trash
(the default behavior being completely delete from the system)
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src
** Delete selection mode.
I used to think that this enabled deleting selected text with the Delete key, but it turns out that one is the work of the ~delete-active-region~ parameter, which is enabled by default. What this does is allow the replacing of selected text with other inserted (e.g. pasted/yanked) text, thus bringing Emacs more in line with other text editors.\\
I initially set this one from the Customization buffer, and got ~(setq delete-selection-mode t)~ as the resulting code snippet, so I assumed it would work even when outside the ~custom-set-variables~, but it didn't - and then I was wondering why pasting text didn't replace the selected text… Now I replaced that wrong parameter with the correct one.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src
P.S. Just so you know, here's precisely why the other wording hadn't worked:
#+begin_quote
Setting this variable directly does not take effect;
   either customize it (see the info node `Easy Customization')
   or call the function `delete-selection-mode'
#+end_quote
That goes into showing that RT(F)M is valid advice…
** Disable double space as end of sentence
I once tried M-e to go to the end of a long sentence I wrote, and was surprised when I went to the end of the paragraph instead. I searched a little about it and found out there are people that actually use two spaces to start a new sentence. I personally use only one space though (and when writing on paper zero), so I disable this setting.
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
** Disabling menu bar when emacs is run in a  terminal.
Since it can't be clicked anyways, it takes up space without reason...
(I use ~display-graphic-p~ instead of ~window-system~ because the latter is now deprecated:)
#+begin_quote
>From the doc string of `window-system':

 "Use of this function as a predicate is deprecated.  Instead,
  use `display-graphic-p' or any of the other `display-*-p'
  predicates which report frame's specific UI-related capabilities."
#+end_quote
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (menu-bar-mode -1))
#+end_src
** Toggling the menu bar with a keyboard shortcut.
#+begin_src emacs-lisp
(global-set-key [f8] 'toggle-menu-bar-mode-from-frame)
#+end_src
** Toggle scroll bar and window divider mode
I might not always want the scroll bar enabled (though I prefer it to be, so that I can quickly see where I am on a buffer), but when I have it disabled, there is no divider between vertical splits. Window divider mode fixes that. I want however the window divider mode and scroll bar mode to be mutually exclusive, as, when the scroll bar mode is enabled, the scroll bar by itself is a sufficient divider. Thus I create a hook on window divider mode that toggles the scroll bar mode (for the ~'toggle~ property see the docstring of ~define-minor-mode~), and add a keybinding to enable and disable window-divider-mode. I also customise the look of the divider to fit in more with my theme.
#+begin_src emacs-lisp
(set-face-attribute 'window-divider nil :foreground "gray75")
(set-face-attribute 'window-divider-first-pixel nil :foreground "gray95")
(set-face-attribute 'window-divider-last-pixel nil :foreground "gray55")

(add-hook 'window-divider-mode-hook (lambda () (scroll-bar-mode 'toggle)))
(global-set-key [f10] 'window-divider-mode)
#+end_src
** Toggle maximizing the frame
Useful for newsticker
#+begin_src emacs-lisp
(global-set-key [f9] 'toggle-frame-maximized)
#+end_src
** Do not resize frame when setting frame elements
From the help string of ~frame-inhibit-implied-resize~:
#+begin_example
Whether frames should be resized implicitly.

If this option is nil, setting font, menu bar, tool bar, internal
borders, fringes or scroll bars of a specific frame may resize the frame
in order to preserve the number of columns or lines it displays.  If
this option is t, no such resizing is done.
[...]
The value of this option can be also be a list of frame parameters. [...]
[For more see the help string]
#+end_example
#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)
#+end_src
** Visual line mode only for text mode.
Visual line wraps lines instead of cutting them as default.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
Disable visual-line-mode however for the file where I keep all my urls (from the OneTab extension), as I want to be able to kill by logical lines in that particular file, since urls are 1 logical line each, but can span up to 2-3 visual lines.\\
In case you're new to emacs and such terms as logical and visual lines might as well be in a foreign language, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Continuation-Lines.html][here]] (especially the last paragraph).
#+begin_src emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (buffer-name) "onetab.txt")
              (visual-line-mode -1))))
#+end_src
** Associate .txt files with the goto-address-mode.
This mode highlights urls and makes them clickable.\\
(code adapted from [[https://stackoverflow.com/questions/13945782/emacs-auto-minor-mode-based-on-extension/39652226#39652226][this stackoverflow answer]])
#+begin_src emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "txt")
              (goto-address-mode 1))))
#+end_src
** Bind command to kill current buffer
Oftentimes, I just want to kill the current buffer, and ~C-x k~ showing me a list slows me down, since I thus have to do 2 actions: first use ~C-x k~ and then press enter to confirm killing the (highlighted) current buffer. Thus here I bind ~C-c k~ to ~kill-current-buffer~. This function was added on 26.1 however (see [[https://fossies.org/diffs/emacs/25.3_vs_26.1/lisp/simple.el-diff.html][here]]), so I have to use a custom function to achieve the same in emacs versions under 26 (idea from [[https://github.com/matthijsk/dotemacs/commit/442389b42df007063f71cbe6f6f9ed0b60e686aa][here]]).
#+begin_src emacs-lisp
(when (version< emacs-version "26.0.50" )
(defun my-kill-buffer ()
    "Kill current buffer without prompting"
    (interactive)
    (kill-buffer (current-buffer))))

(if (version<= "26.0.50" emacs-version )
(global-set-key "\C-ck" 'kill-current-buffer)
(global-set-key "\C-ck" 'my-kill-buffer))
#+end_src
** Bind M-o to other-window
C-x o is too long a binding for this simple action (idea drawn from [[https://masteringemacs.org/article/my-emacs-keybindings][My Emacs keybindings - Mastering Emacs]]).
#+begin_src emacs-lisp
(define-key global-map "\M-o" 'other-window)
#+end_src
** Adds shift + arrows for changing between visible buffers, in addition to M-o.
#+begin_src emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+end_src
The ~windmove-wrap-around~ setting allows for windmove movement off the edge of a frame to wrap around.
#+begin_src emacs-lisp
(setq windmove-wrap-around t)
#+end_src
** Add command to mark a line in emacs state
From [[https://ebzzry.io/en/emacs-tips-1/#marks][here]]. Executing it multiple times marks multiple lines.
#+begin_src emacs-lisp
(defun mark-line (&optional arg)
  (interactive "p")
  (if (not mark-active)
      (progn
        (beginning-of-line)
        (push-mark)
        (setq mark-active t)))
  (forward-line arg))
#+end_src
Its keybinding
#+begin_src emacs-lisp
(define-key evil-emacs-state-map "\C-z" 'mark-line)
#+end_src
** Highlight specific words in prog-mode
Modified from [[http://seancribbs.com/emacs.d#sec-5-8][Sean Cribbs' Emacs 25 Configuration]].
#+begin_src emacs-lisp
(defun lmintmate/add-watchwords ()
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|CURRENTLY\\|SOMEDAY\\|CANCELLED\\|HACK\\|REFACTOR\\|NOCOMMIT\\|LONGTERM\\)"
          1 font-lock-builtin-face t))))

(add-hook 'prog-mode-hook 'lmintmate/add-watchwords)
#+end_src
** Drag selected text with the mouse in emacs
Sometimes I just want to cop out and use the mouse when trying to move text. I found out via [[https://emacs.stackexchange.com/a/48440][Stack Exchange]] that this is possible in emacs, and one just needs to set the function ~mouse-drag-and-drop-region~ to ~t~. This feature was added in version 26.1 (see [[http://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS.26#n395][here]]), and I thus wrap it in a conditional so that it won't error out on versions lower than 26.
#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
(setq mouse-drag-and-drop-region t))
#+end_src
** Bind zap-up-to-char command in emacs state
I found the commands M-x zap-to-char and zap-up-to-char, which roughly correspond to vim's df and dt. The former is bound to M-z, but the latter isn't bound to anything. I bind it here to C-c z, since that isn't bound to anything.
#+begin_src emacs-lisp
(define-key evil-emacs-state-map "\C-cz" 'zap-up-to-char)
#+end_src
** Enable display-line-numbers-mode
This minor mode first appeared in 26.1 and makes line rendering faster than the previous system, ~linum-mode~. I have ~text-mode~ and ~prog-mode~ display relative line numbers, for help with evil movements (adapted from [[https://github.com/noctuid/evil-guide#how-can-i-have-relative-line-numbers][here]]). I enable it conditionally, so that it won't error out on a version lower than 26.1, where the ~display-line-numbers~ feature was first added.
#+begin_src emacs-lisp
(when (fboundp 'display-line-numbers-mode)
(setq-default display-line-numbers nil)
(defun noct:relative ()
  (setq-local display-line-numbers 'relative))
(defun noct:line-number-relative ()
  (setq-local display-line-numbers-current-absolute nil)))

(when (fboundp 'display-line-numbers-mode)
(add-hook 'text-mode-hook #'noct:relative)
(add-hook 'text-mode-hook #'noct:line-number-relative)
(add-hook 'prog-mode-hook #'noct:relative)
(add-hook 'prog-mode-hook #'noct:line-number-relative))
#+end_src
*** Disable it however for lisp-interaction-mode
I don't want line numbers to display however for ~lisp-interaction-mode~, which is the mode used in the ~*scratch*~ buffer (and, to my knowledge, only there). I set this conditionally so that it won't error out on versions lower than 26.1.
#+begin_src emacs-lisp
(when (fboundp 'display-line-numbers-mode)
(add-hook 'lisp-interaction-mode-hook (lambda () (display-line-numbers-mode -1))))
#+end_src
*** Make the current line bold
I set it conditionally so that it won't error out on versions lower than 26.1.  I set it to be loaded with ~with-eval-after-load~ because ~set-face-attribute~ needs for the package being configured to be loaded, unlike ~custom-set-faces~.
#+begin_src emacs-lisp
(when (fboundp 'display-line-numbers-mode)
(with-eval-after-load 'display-line-numbers
(set-face-attribute 'line-number-current-line nil :inherit font-lock-comment-face)))
#+end_src
** Make help windows active by default
When I call a help window, I want to immediately scroll through it, and having to either click to it or use the other-window command to make it active was somewhat annoying. This parameter makes such windows active by default (found from [[https://www.reddit.com/r/emacs/comments/bty1eq/why_doesnt_emacs_set_the_focus_to_information/ep4b0uf/][Why doesn't emacs set the focus to information windows? : emacs subreddit]]).
#+begin_src emacs-lisp
(setq-default help-window-select t)
#+end_src
** Enable all disabled commands
Here I enable all advanced commands that are by default disabled (for more information see [[https://www.emacswiki.org/emacs/DisabledCommands][EmacsWiki: Disabled Commands]]). Most interesting for me is ~erase-buffer~, which I can use when I want to clear the scratch buffer after some experimenting in order to have a clean slate.
#+begin_src emacs-lisp
(setq disabled-command-function nil)
#+end_src
** Theme settings
*** Treat all themes as safe
#+begin_src emacs-lisp
(setq custom-safe-themes t)
#+end_src
*** Load only one theme at a time
Found from [[https://git.sr.ht/~bandali/dotfiles/tree/7c281dfc3ce6c308fd2f4fdf9f85d49512abd1e9/.emacs.d/init.el#L224][here]].
#+begin_src emacs-lisp
(defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src
** Info mode settings
Set the initial state of info mode to emacs, as I feel that the default motion state is of a transitive nature, and thus not fitting for info manuals.
#+begin_src emacs-lisp
(evil-set-initial-state 'Info-mode 'emacs)
#+end_src
Also disable q, as this binding also makes the whole mode feel temporary, which isn't very fitting imo.
#+begin_src emacs-lisp
(define-key Info-mode-map (kbd "q") nil)
#+end_src
** Custom mode settings
This the mode used for the Customization interface buffers.\\
Here I have the names of the entries to be customised shown in their raw lisp form.
#+begin_src emacs-lisp
(setq custom-unlispify-tag-names nil)
#+end_src
** Bookmark settings
In order to remember where I last left reading a particular info manual I can use the bookmarks feature of emacs. In particular, I can add a bookmark with the command ~bookmark-set~ (~C-x r m~), access bookmarks with the command ~bookmark-jump~ (~C-x r b~), view a more detailed list of bookmarks with ~bookmark-bmenu-list~ (~C-x r l~) and delete a bookmark with the command ~bookmark-delete~. I set the latter command to ~C-x r d~, overriding it default setting ~delete-rectangle~, because I thought I wanted to keep the ~C-x r~ line of commands for all bookmark related commands.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x r d") 'bookmark-delete)
#+end_src
** Custom functions
*** Function to download a file from url to specified path
Found from [[https://github.com/dieggsy/dotfiles/blob/master/emacs/.emacs.d/init.org#filebuffer-manipulation][here]].
#+begin_src emacs-lisp
(defun d/download-file (&optional url name)
  "Download a file from url to specified path."
  (interactive)
  (let* ((file-url (or url (read-from-minibuffer "URL: ")))
         (file-name
          (or name
              (counsel-find-file
               (file-name-nondirectory file-url)))))
    (url-copy-file file-url file-name)))
#+end_src
*** Function to quickly switch to the ~*scratch*~ buffer
Useful when I want to experiment with some elisp code, but have also opened a gazillion help buffers and thus have to actually /type/ (gasp, the horror!) the name of the scratch buffer in order to get back there. Also add a keybinding to make the switching even faster. Found from [[https://github.com/dieggsy/dotfiles/blob/master/emacs/.emacs.d/init.org#switching][here]].
#+begin_src emacs-lisp
(defun d/switch-to-scratch ()
  "Switch to scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))
(global-set-key (kbd "\C-cs") 'd/switch-to-scratch)
#+end_src
*** Functions to change file formats
Found from [[https://github.com/syl20bnr/spacemacs/blob/2cfcf54458844f707a99befb3890a390c1e41473/layers/+spacemacs/spacemacs-defaults/funcs.el#L1143-L1151][here]].
#+begin_src emacs-lisp
(defun spacemacs/dos2unix ()
  "Converts the current buffer to UNIX file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix nil))

(defun spacemacs/unix2dos ()
  "Converts the current buffer to DOS file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos nil))
#+end_src
*** Functions to rename files
Adapted from [[https://github.com/syl20bnr/spacemacs/blob/2cfcf54458844f707a99befb3890a390c1e41473/layers/+spacemacs/spacemacs-defaults/funcs.el#L281-L390][here]].
#+begin_src emacs-lisp
(defun lmintmate/rename-file (filename &optional new-filename)
  "Rename FILENAME to NEW-FILENAME.
When NEW-FILENAME is not specified, asks user for a new name.
Also renames associated buffers (if any exists) and updates recentf list."
  (interactive "f")
  (when (and filename (file-exists-p filename))
    (let* ((is-dir (file-directory-p filename))
           (short-name
            (if is-dir
                (file-name-base (directory-file-name filename))
              (file-name-nondirectory filename)))
           (new-filename
            (if new-filename new-filename
              (read-file-name
               (format "Rename %s to: " short-name)))))

      ;; Rename filename to new-filename and error if new-filename already
      ;; exists. `dired-rename-file' handles renaming of directories and files.
      ;; It updates the name of all associated buffers.
      (dired-rename-file filename new-filename nil)

      ;; Update recentf list.
      (when (fboundp 'recentf-add-file)
        (seq-map
         (lambda (fp)
           (recentf-add-file
            (concat new-filename (string-remove-prefix filename fp)))
           (recentf-remove-if-non-kept fp))
         (seq-filter
          (lambda (fp)
            (string-prefix-p filename fp))
          recentf-list)))

      ;; Inform user about tremendous success.
      (message "%s '%s' successfully renamed to '%s'"
               (if is-dir "Directory" "File")
               short-name
               (file-name-nondirectory new-filename)))))

(defun lmintmate/rename-current-buffer-file (&optional arg)
  "Rename the current buffer and the file it is visiting.
If the buffer isn't visiting a file, ask if it should
be saved to a file, or just renamed.
If called without a prefix argument, the prompt is
initialized with the current directory instead of filename."
  (interactive "P")
  (let* ((name (buffer-name))
         (filename (buffer-file-name)))
    (if (and filename (file-exists-p filename))
        ;; the buffer is visiting a file
        (let* ((dir (file-name-directory filename))
               (new-name (read-file-name "New name: " (if arg dir filename))))
          (cond ((get-buffer new-name)
                 (error "A buffer named '%s' already exists!" new-name))
                (t
                 (let ((dir (file-name-directory new-name)))
                   (when (and (not (file-exists-p dir))
                              (yes-or-no-p
                               (format "Create directory '%s'?" dir)))
                     (make-directory dir t)))
                 (rename-file filename new-name 1)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)
                 (when (fboundp 'recentf-add-file)
                   (recentf-add-file new-name)
                   (recentf-remove-if-non-kept filename))
                 (message "File '%s' successfully renamed to '%s'"
                          name (file-name-nondirectory new-name)))))
      ;; the buffer is not visiting a file
      (let ((key))
        (while (not (memq key '(?s ?r)))
          (setq key (read-key (propertize
                               (format
                                (concat "Buffer '%s' is not visiting a file: "
                                        "[s]ave to file or [r]ename buffer?")
                                name)
                               'face 'minibuffer-prompt)))
          (cond ((eq key ?s)            ; save to file
                 ;; this allows for saving a new empty (unmodified) buffer
                 (unless (buffer-modified-p) (set-buffer-modified-p t))
                 (save-buffer))
                ((eq key ?r)            ; rename buffer
                 (let ((new-name (read-string "New buffer name: ")))
                   (while (get-buffer new-name)
                     ;; ask to rename again, if the new buffer name exists
                     (if (yes-or-no-p
                          (format (concat "A buffer named '%s' already exists: "
                                          "Rename again?")
                                  new-name))
                         (setq new-name (read-string "New buffer name: "))
                       (keyboard-quit)))
                   (rename-buffer new-name)
                   (message "Buffer '%s' successfully renamed to '%s'"
                            name new-name)))
                ;; ?\a = C-g, ?\e = Esc and C-[
                ((memq key '(?\a ?\e)) (keyboard-quit))))))))
#+end_src
*** Live color selection for faces
Adapted (mainly added docstring in ~my-live-face-color-changer~, replaced ~face-set-foreground~ and ~face-set-background~ with ~face-set-attribute~ in ~my-live-copy-colors~, and changed ~local-set-key~ to ~evil-local-set-key~) from [[https://www.reddit.com/r/emacs/comments/ci1j66/live_color_selection_for_faces/][Live color selection for faces : emacs subreddit]].
#+begin_quote
When I want to set to a face to a different color then I usually try setting the colors manually which is cumbersome, so I created this little snippet to do it live, giving you an instant preview of the changes.
[...]
How to use: Switch to a buffer where you want to change a face's color, put the cursor on the affected text and start M-x my-live-face-color-changer. It will ask for a face to change, but it will pick the face by default at the cursor if there is one.
Then it opens the color list, splitting the window, so above you see your text and below the colors. As you move around in the list of colors, the face is set to the color under the cursor automatically. You can press b to switch to background color setting and f to foreground color setting. When you are satisfied with the colors then press c and the settings are copied to the clipboard, so you can paste it in your init file.
#+end_quote
#+begin_src emacs-lisp
(defun my-live-face-color-changer (face)
"Change colors of various faces with live feedback. Copies result to clipboard."
  (interactive (list (read-face-name "Select face"
                                     (or (face-at-point t) 'default)
                                     t)))
  (setq my-live-face (car face))
  (setq my-live-face-foreground t)
  (list-colors-display)
  (select-window (get-buffer-window "*Colors*"))
  (evil-local-set-key 'motion "f" 'my-live-set-foreground)
  (evil-local-set-key 'motion "b" 'my-live-set-background)
  (evil-local-set-key 'motion "c" 'my-live-copy-colors)
  (add-hook 'post-command-hook 'my-live-face-color-set t t))

(defun my-live-face-color-set ()
  (when (looking-at ".+\\(#.+\\)")
    (funcall (if my-live-face-foreground
                 'set-face-foreground
               'set-face-background)
             my-live-face
             (match-string 1))))

(defun my-live-set-foreground ()
  (interactive)
  (setq my-live-face-foreground t)
  (message "Choosing foreground color."))

(defun my-live-set-background ()
  (interactive)
  (setq my-live-face-foreground nil)
  (message "Choosing background color."))

(defun my-live-copy-colors ()
  (interactive)
  (remove-hook 'post-command-hook 'my-live-face-color-set t)
  (let ((settings (format "(set-face-attribute '%s nil :foreground \"%s\" :background \"%s\" :inherit 'unspecified)"
                          my-live-face
                          (face-foreground my-live-face)
                          (face-background my-live-face))))
    (kill-new settings)
    (quit-window)
    (message "Copied settings to clipboard:\n\n%s" settings)))
#+end_src
*** Remove tracking strings from urls
Sometimes, when pasting a url (especially a reddit one) with cliplink, strings starting with utm-* and other such things that make urls longer, might be left in. I found a starting point to solve this problem [[https://github.com/ieure/dnt-el][here]], but I needed to adapt it to my needs quite a bit. I removed functions I didn't need, and added two interactive functions as entry points: ~dnt-at-point~ reads the url at point and adds the trimmed form to the kill ring, and ~dnt-from-kill-ring~ reads a url from the kill ring and adds the trimmed form to the kill ring as a new entry.
#+begin_src emacs-lisp
(require 'subr-x)
(require 's)
(require 'url-parse)

(defun dnt--filter-qs (urlobj pred)
  (pcase (url-path-and-query urlobj)
    (`(,path . ,query)
     (let ((cleaned (cl-remove-if pred (url-parse-query-string query))))
       (setf (url-filename urlobj)
             (concat path (when cleaned
                            (concat "?" (url-build-query-string cleaned))))))))
  urlobj)

(defun dnt--clean-google-analytics (urlobj)
  "Return a URLOBJ with Google Analytics tracking removed."
    (url-recreate-url (dnt--filter-qs urlobj (lambda (kv) (s-starts-with? "utm_" (car kv))))))

(defun dnt--clean-amazon (urlobj)
  "Return a URLOBJ with Amazon tracking removed."
  (setf (url-filename urlobj) (car (s-split-up-to "ref=" (car (url-path-and-query urlobj)) 1)))
  (url-recreate-url urlobj))

(defun dnt--extract-url-from-query (urlobj param)
  "Return a URLOBJ from the PARAM query of a different URL."
  (cadr (assoc param (url-parse-query-string (cdr (url-path-and-query urlobj))))))

(defun dnt--clean (url)
  "Return a URL with one layer of tracking services removed."
  (let* ((urlobj (url-generic-parse-url url)))
    (cond
     ((s-contains? "utm_" url)
      (dnt--clean-google-analytics urlobj))

     ((s-contains? "amazon" (url-host urlobj))
      (dnt--clean-amazon urlobj))

     ((string= "out.reddit.com" (url-host urlobj))
      (dnt--extract-url-from-query urlobj "url"))

     (t url))))

(defun dnt (url)
  "Return a URL with tracking services removed."
  (let ((new (dnt--clean url)))
    (if (string= url new)
        url
      (dnt new))))

(defun dnt-at-point ()
  "Use dnt on the URL at point and add ouput to kill ring."
  (interactive)
  (when-let (url (ffap-url-at-point))
      (kill-new (dnt url))
    (message "Copied to kill ring: %s" (dnt url))))

(defun dnt-from-kill-ring ()
"Remove tracking strings from URL in kill ring and add output to kill ring."
(interactive)
(let ((new (dnt (current-kill 0))))
(if (string= (current-kill 0) new)
        (current-kill 0)
(kill-new new)
(message "Copied to kill ring: %s" new))))
#+end_src
*** Function to show parent modes of current buffer's major mode
Found from [[https://github.com/grettke/parent-mode/commit/b56d9c6d9520fe92cd409397fd3e2c245b7d844e][here]]. Depends on [[https://github.com/Fanael/parent-mode][parent-mode]].
#+begin_src emacs-lisp
(require 'parent-mode)
(defun parent-mode-display ()
  "Display this buffer's mode hierarchy."
  (interactive)
  (let ((ls (parent-mode-list major-mode)))
    (princ ls)))
#+end_src
*** Function that creates a histogram of currently open buffers
This function (taken from [[https://svn.red-bean.com/repos/kfogel/trunk/.emacs][here]]) displays a buffer that shows a buffer list, sorted by major mode and number of buffers opened in a major mode (see [[http://blogs.fluidinfo.com/terry/2011/11/10/emacs-buffer-mode-histogram/][here]], which is the original source of the function, for a demonstration of how the result will look like).
#+begin_src emacs-lisp
(defun buffer-mode-histogram ()
  "Display a histogram of emacs buffer modes."
  (interactive)
  (let* ((totals ())
         (buffers (buffer-list()))
         (total-buffers (length buffers))
         (ht (make-hash-table :test 'equal)))
    (save-excursion
      (dolist (buffer buffers)
        (set-buffer buffer)
        (let
            ((mode-name (symbol-name major-mode)))
          (puthash mode-name (1+ (gethash mode-name ht 0)) ht))))
    (maphash (lambda (key value)
               (setq totals (cons (list key value) totals)))
             ht)
    (setq totals (sort totals (lambda (x y) (> (cadr x) (cadr y)))))
    (with-output-to-temp-buffer "Buffer mode histogram"
      (princ (format "%d buffers open, in %d distinct modes\n\n"
                      total-buffers (length totals)))
      (dolist (item totals)
        (let
            ((key (car item))
             (count (cadr item)))
          (if (equal (substring key -5) "-mode")
              (setq key (substring key 0 -5)))
          (princ (format "%2d %20s %s\n" count key
                         (make-string count ?+))))))))
#+end_src
* Dabbrev completion
The default command used for completion by evil, ~evil-complete-next~ (bound by default to ~C-n~), only completes one possible candidate, and thus, if it isn't the correct one, one has to erase the wrong characters and try again with more of the prefix string. Looking at the function definition, it used ~dabbrev~ (~dabbrev-expand~ specifically) under the hood. Dabbrev also includes [[help:dabbrev-completion][dabbrev-completion]], which has the following behavior (as found at its docstring):
#+begin_example
Like [dabbrev-expand] but finds all expansions in the current buffer
and presents suggestions for completion.

With a prefix argument ARG, it searches all buffers accepted by the
function pointed out by dabbrev-friend-buffer-function to find the
completions.

If the prefix argument is 16 (which comes from C-u C-u),
then it searches *all* buffers.
#+end_example
In short, this normally looks only at the current buffer, but when using a specific prefix, it can look at all buffers. Here thus I define a function to run it with the prefix (see [[https://stackoverflow.com/a/6156444][here]]) and bind this function to emacs and insert states at the modes I want to use this with.
#+begin_src emacs-lisp
(defun dabbrev-completion-all-buffers ()
    (interactive)
  (setq current-prefix-arg '(16))
(call-interactively 'dabbrev-completion))

(evil-define-key '(emacs insert) text-mode-map
(kbd "C-n") 'dabbrev-completion-all-buffers)

(evil-define-key '(emacs insert) prog-mode-map
(kbd "C-n") 'dabbrev-completion-all-buffers)
#+end_src
Setting so that completion in org mode won't change when the character for literal code ~ is in front of the completion candidate. What this does is tell ~dabbrev~ to ignore the presence of said symbol. Without this setting when attempting to complete a string preceded by ~ , the first letter of each subword is capitalised e.g. ~Package-Install-Selected-Packages~ instead of the normal ~package-install-selected-packages~ (idea to use this setting from [[https://curiousprogrammer.wordpress.com/2009/05/19/customiz-dabbrev/][here]]).
#+begin_src emacs-lisp
(setq dabbrev-abbrev-skip-leading-regexp "~")
#+end_src
* Recent files
A quick way to access my most recently opened files (as I didn't want to have to go all the way through the directory structure).
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+end_src
Don't add files from the elpa folder, autoloads or bookmarks in the recentf list (adapted from [[https://www.reddit.com/r/emacs/comments/3g468d/stop_recent_files_showing_elpa_packages/ctv32rk/][here]]).
#+begin_src emacs-lisp
(setq recentf-exclude '(".*-autoloads\\.el\\'"
                        "[/\\]\\elpa/"
                        "bookmark"
                        ))
#+end_src
Note that the command ~recentf-edit-list~ provides a way to remove undesired files from the recentf list without having to edit the file by hand. I should have found about this earlier!
* Settings for multiple buffer management
I wanted to be able to change the layout of the buffers from horizontal to vertical, as well as be able to flip frames, so that left goes right, and up goes down. I used to use some custom functions found at [[http://whattheemacsd.com][What the .emacs.d!?]] ([[http://whattheemacsd.com/buffer-defuns.el-03.html][here]] and [[http://whattheemacsd.com/buffer-defuns.el-02.html][here]], specifically), but then found the package [[https://github.com/emacsorphanage/transpose-frame/blob/master/transpose-frame.el][transpose-frame]] (available at MELPA), and decided to use that instead, as to make the README.org file less lengthy.
#+begin_src emacs-lisp
(define-key global-map "\M-[" 'transpose-frame)
(define-key global-map "\M-]" 'rotate-frame)
#+end_src
* Ibuffer
A better way to list buffers than buffer-menu([[https://www.emacswiki.org/emacs/IbufferMode][link]]). Config influenced from [[http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/][Using Emacs - 34 - ibuffer and emmet | C'est la Z]], [[http://home.thep.lu.se/~karlf/emacs.html#sec-6-6][some dude's .emacs]], and [[https://github.com/drot/dotfiles/blob/6d7e1630b9ac4cc7f1386841093f465b9d5d32ab/emacs/.emacs.d/init.el#L405-L458][some other dotfiles from github]].
** Replace buffer-menu.
#+begin_src emacs-lisp
(require 'ibuffer)
 (global-set-key (kbd "C-x C-b") 'ibuffer)
    (autoload 'ibuffer "ibuffer" "List buffers." t)
#+end_src
** Set buffer groups.
#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
      '(("default"
	       ("Dired" (mode . dired-mode))
	       ("Org" (derived-mode . org-mode))
               ("Text" (name . "^.*txt$"))
               ("Markdown" (derived-mode . markdown-mode))

	       ("Emacs Lisp" (mode . emacs-lisp-mode))
               ("Help" (or (derived-mode . help-mode)
                       (derived-mode . helpful-mode)
                       (derived-mode . elisp-refs-mode)
                       (derived-mode . apropos-mode)))
               ("Info" (derived-mode . Info-mode))
               ("Custom" (derived-mode . Custom-mode))
               ("Scratch" (name . "*scratch*"))
               ("Git" (derived-mode . magit-mode))
	       ("Other"
                  (or
                   (name . "^\\*")))
	       )))
(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-auto-mode 1)
	    (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
** Don't show filter groups if there are no buffers in that group.
#+begin_src emacs-lisp
(setq ibuffer-show-empty-filter-groups nil)
#+end_src
** Use human readable size column.
#+begin_src emacs-lisp
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		filename-and-process)))
#+end_src
* Dired Mode Configurations
** Enable dired icon mode.
This functionality, coming from the dired-icon package, shows icons from the currently used icon theme next to the filenames, and thus makes for a better dired experience.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+end_src
*** Setting to make the image size of the dired-icon icons bigger.
#+begin_src emacs-lisp
(setq dired-icon-image-size 32)
#+end_src
** Dired recent
[[https://github.com/vifon/dired-recent.el][This package]] remembers directories recently visited through dired.
#+begin_src emacs-lisp
(dired-recent-mode 1)
#+end_src
** Modify evil keybindings for dired-mode-map
The default state for dired is evil normal. This mostly works as expected (e.g. j and k work as expected and the regular dired commands aren't altered), but the bindings to go to the first and last line (gg and G) didn't work. I used ~evil-define-key~ (see above) to solve this problem. This setting of course shadows the default bindings of G and g, but I didn't need the actions they perform.
#+begin_src emacs-lisp
(evil-define-key 'normal dired-mode-map
"G" 'evil-goto-line
"gg" 'evil-goto-first-line)
#+end_src
** Auto-revert dired buffers
Also don't show "Reverting..." message.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)
(setq auto-revert-verbose nil)
#+end_src
** Dired listing
*** Listing switches.
Group directories first and make sizes human-readable.
#+begin_src emacs-lisp
(setq dired-listing-switches "-alh --group-directories-first")
#+end_src
*** Sort files by modified date.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-sort-toggle-or-edit)
#+end_src
*** Hide the details on dired mode, for a cleaner appearance.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src
** Dired dwim target
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src
* 😄 Emoji support
Since for a while I've been adding emojis to my git commits, I wanted to be able to insert them somehow without having to remember their exact name. [[https://github.com/iqbalansari/emacs-emojify][The emojify package]] not only helps with that, but can also show unicode emojis inside emacs in their full glory (which also means that the git log from magit can now show the emoji icons and all...). Note that on the first installation, the package will download after asking an entire set of images that comprise the specified emoji set (EmojiOne by default), and will place them in a folder called ~emojis~ under the ~.emacs.d~ directory and this might take a couple minutes. This means however that it doesn't depend on icon fonts being installed, unlike other packages. Here thus I enable the emojify mode globally and use the twemoji set instead of the default EmojiOne, because I prefer the look of these ones (e.g. the flags are shown as rectangular, instead of having a circled form, and other symbols also have better appearance imo).
#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-emojify-mode)
(setq emojify-emoji-set "twemoji-v2-22")
#+end_src
* Mode line format
** A small diatribe on customising the mode line
I wanted for a while to see the greek input method displayed as the greek flag (unicode symbol: 🇬🇷, github string: :flag-gr:) instead of the ~el_GR~ string it uses by default. I can now do that with the ~emojify~ package, since the function ~global-emojify-mode-line-mode~ allows for emojis to be shown on the mode line. This can be activated by modifying the ~mode-line-format~ and including the function ~emojify-string~, followed by the desired emoji.
This function renders a given unicode emoji as an emoji instead of its unicode symbol (which was going to look like a tofu block most of the time).
The next roadblock I had to overcome in order to achieve what I wanted was that the ~mode-line-mule-info~ property of the mode line shows both the input method when enabled and the encoding and line endings (which can otherwise be rendered with ~%z~ (just encoding) or ~%Z~ (also line ending)), which means that if I wanted to replace just the input method string, I would have to isolate it from the other functions and I had no idea how I would do that. In that context, I looked into the variable ~mode-line-mule-info~ (defined in [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/bindings.el#n201][the bindings.el file in the emacs source code]] ; also see [[http://doc.endlessparentheses.com/Var/mode-line-mule-info.html][here]]) and from there found the variables ~current-input-method~ and ~current-input-method-title~ (both defined in [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/international/mule-cmds.el#n1314][the mule-cmds.el file in the emacs source code]] ; see also e.g. [[http://doc.endlessparentheses.com/Var/current-input-method.html][here]]). I still had to find out however how I would propertize the latter 2 variables in order for the mode line to render them. Thankfully, I didn't need to trouble myself with that, as I found [[https://github.com/Fuco1/.emacs.d/blob/master/files/mode-line.el][Fuco1's custom mode line format]], which [[https://github.com/Fuco1/.emacs.d/blob/18d5a29a5fb35ada25a6b998da6eaa2a957daba2/files/mode-line.el#L52-L55][in lines 52-55]] isolates the input-method from the other two things shown by ~mode-line-mule-info~ and shows it by itself.\\
Using this meant that I had to redefine the whole mode-line-format. Here, after activating ~global-emojify-mode-line-mode~, I start setting it with ~setq-default~ because ~setq~ doesn't set it as the default. I keep the beginning of the mode line, up until the input method, as it was in the Customise string. Now, I set the input method like so:
#+begin_example
(current-input-method (emojify string "🇬🇷"))
#+end_example
(I need to write ~emojify string~ without dashes here for some reason, or it won't work otherwise)\\
This admittedly is kind of a hack, because this way it will show the greek flag regardless of what the current input method actually is, but it works for me for now, as I only use the ~el_GR~ input method anyways, and I can't think of a way to code something like "if the current-input-method-title is el_GR, show it as the greek flag emoji, otherwise show it as a string (with Fuco1's method)" and get it to actually work, because the fact that the input method is initially nil complicates things, since it prevents the activation of whatever code to that effect I might write.\\
After propertizing the input method, I use the ~%Z~ string to keep showing the encoding and the end-of-line values, and propertize it in the way ~mode-line-mule-info~ does it.\\
The next thing I changed was the showing of the modified and read-only values. I got the idea to propertize these too [[https://github.com/Fuco1/.emacs.d/blob/18d5a29a5fb35ada25a6b998da6eaa2a957daba2/files/mode-line.el#L20-L26][again from Fuco1]], and adapted his code to propertize these as emojis as well, showing read-only as a closed padlock and modified as a fountain pen. For some reason, these emojis show up with a thin line that has the same color as the background of my theme, while the flag either doesn't or it isn't as obvious because that one's blue. Also, interestingly enough, while I had to use emojify string without dashes for the greek flag to show up, these needed the dashes. I also entirely removed from the mode line the emacsclient and remote indications, as I don't use emacsclient and don't work with remote files, and the read-only/modified indications are now to the right of the buffer indication instead of to the left, as was the default.\\
Afterwards, things are mostly left the same, with the exception that I removed the percentage into file indication (by replacing ~mode-line-position~ with ~L%l~ to show just the current line number preceded by the letter L), because I couldn't get it to show the percent sign, as it does when the mode-line-format is unmodified.
** The code of my mode line customisation
#+begin_src emacs-lisp
(global-emojify-mode-line-mode)
(setq-default mode-line-format
      '((:eval (format-mode-line '("%e" evil-mode-line-tag mode-line-front-space (current-input-method (emojify string "🇬🇷")) " " (:eval (propertize
      "%Z"
      'help-echo 'mode-line-mule-info-help-echo
      'mouse-face 'mode-line-highlight
      'local-map mode-line-coding-system-map)) " " mode-line-buffer-identification " " (:eval
    (cond (buffer-read-only
           (emojify-string "🔒"))
          ((buffer-modified-p)
           (emojify-string "🖊"))
	  (t "  ")))
 " " "L%l" " " (vc-mode vc-mode) " " mode-line-modes mode-line-misc-info mode-line-end-spaces)))))
#+end_src
* Org Mode configuration
First off, require org.
#+begin_src emacs-lisp
(require 'org)
#+end_src
** Hook toc-org to org-mode
[[https://github.com/snosov1/toc-org][toc-org]] is a package that creates Table of Contents for org-mode files without exporting, which can thus give the rendered in github/lab README.org a table of contents, convenient for those who might want to browse said files. Here I add a snippet given in said repo to hook it to org-mode.
#+begin_src emacs-lisp
(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-mode)
  (warn "toc-org not found"))
#+end_src
** Org-mouse
This is an org-mode subpackage that allows control of various things with the mouse. I enable it because I almost never remember which is the shortcut to tick checkboxes in org-mode.
#+begin_src emacs-lisp
(require 'org-mouse)
#+end_src
Workaround so that ~mouse-drag-and-drop-region~ will work. Specifically, when ~org-mouse~ is enabled, the ~mouse-drag-region~ command (the command used when org-mouse is disabled) for some reason is replaced with ~org-mouse-down-mouse~ which doesn't have the drag-n-drop capabilities of the other command, so I rebind ~<down-mouse-1>~ to ~mouse-drag-region~. I do this for emacs, insert and motion states - this couldn't initially be enabled on normal state, but it turns out the binding to ~<down-mouse-1>~ in normal state is inherited from motion state so setting the binding in motion state gives the desired result in normal state as well.
#+begin_src emacs-lisp
(evil-define-key 'emacs org-mode-map
(kbd "<down-mouse-1>") 'mouse-drag-region)

(evil-define-key 'insert org-mode-map
(kbd "<down-mouse-1>") 'mouse-drag-region)

(evil-define-key 'motion org-mode-map
(kbd "<down-mouse-1>") 'mouse-drag-region)
#+end_src
** Define C-c l as the keybinding to org-cliplink.
I used to have it as the shortcut to org-store-link, but it turns out I hardly used that one…
#+begin_src emacs-lisp
(when (package-installed-p 'org-cliplink)
(define-key org-mode-map (kbd "\C-cl") 'org-cliplink))
#+end_src
** Define C-c d as the keybinding to org-toggle-link-display
This command toggles between descriptive and literal links, and I need it so that I can edit on the literal links the text that will show up on the descriptive links (and it was too much of a hassle to go to the Org > Hyperlinks submenu just for that…).
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "\C-cd") 'org-toggle-link-display)
#+end_src
** Define C-c e as the keybinding to [[http://orgmode.org/worg/doc.html#org-emphasize][org-emphasize]]
This one helps to switch quickly between different text formattings (bold, italic e.t.c).
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "\C-ce") 'org-emphasize)
#+end_src
** Unbind C-c . so that Lacarte can function properly
In org mode, ~C-c .~ is by default bound to ~org-time-stamp~, which I don't use but which overrides the binding that I want to use for Lacarte (see above). Here I unbind this key from org-mode-map so that Lacarte can function properly (idea from [[https://superuser.com/a/828744][How to override a keybinding in Emacs org-mode - Super User]]).
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "\C-c.") nil)
#+end_src
** Beautification settings
*** Org bullets
The stars used by the DejaVu Sans Mono font are rather plain, so when I noticed that the stars used by Hack (a DejaVu Sans Mono derivative that lacks many glyphs) were prettier, I got into my head the idea of beautifying org-mode. I first looked [[https://emacs.stackexchange.com/questions/38837/display-another-symbol-than-asterisks-in-org-headings][here]], but after I decided to use a different symbol for each headline, I thought I'd try something a little more tried and true. I thus use [[https://github.com/emacsorphanage/org-bullets][org-bullets]], though I'm not sure how I feel about a such widely-used emacs package being in the emacs orphanage (poor little package...). In particular, I use [[https://github.com/lmintmate/org-bullets][a fork I made]] that adds the ability to completely hide the leading stars, instead of just masking them with a different color (which also removes the indentation effect and puts all bullets at the same level screenwise), found from [[https://github.com/sabof/org-bullets/pull/13][a pull request against the original repository]]. Because I'm not the type to distinguish the level of the org headline by color or indentation, and used to use the number of stars to do so before, I decided to use some unicode symbols (found via ~counsel-unicode-char~) that would somehow denote this hierarchy. I settled on ~Negative Circled Latin Capital~ letters A, B and C, but because these symbols don't work under Windows, I use there the ~Inverse Circled Sans Serif~ digits one, two and three. Note that ~org-bullets~ causes performance issues on some computers, especially when under Windows. Since this problem appears in my Windows machine too, I use the fix from [[https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372][here]].
#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook 'org-bullets-mode)
(if (eq system-type 'windows-nt)
(setq org-bullets-bullet-list
      '("➊" "➋" "➌"))
(setq org-bullets-bullet-list
      '("🅐" "🅑" "🅒")))
(when (eq system-type 'windows-nt)
(setq inhibit-compacting-font-caches t))
;; completely hide the leading stars
(setq org-bullets-invisible-leading-stars t)
#+end_src
*** Set org ellipsis symbol and color
See [[http://endlessparentheses.com/changing-the-org-mode-ellipsis.html][Changing the org-mode ellipsis · Endless Parentheses]].
#+begin_src emacs-lisp
(setq org-ellipsis "↪")
(set-face-attribute 'org-ellipsis nil :foreground "cyan3" :underline 'unspecified)
#+end_src
** Set keywords for Org progress states.
These are, apart from TODO and DONE, also CURRENTLY and SOMEDAY. (Idea to add unicode symbols from [[https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/][Pimp Up Your Org-mode Files – thraxys]])
#+begin_src emacs-lisp
(setq org-todo-keywords
   '((sequence "TODO(t)" "⏳ CURRENTLY(c)" "⏲ SOMEDAY(s)" "✘ CANCELLED(x)" "✔ DONE(d)")))
#+end_src
** Special Ctrl-a/e behavior in org mode
From the Customize section of the parameter:
#+begin_quote
Non-nil means `C-a' and `C-e' behave specially in headlines and items.
   
   When t, `C-a' will bring back the cursor to the beginning of the
   headline text, i.e. after the stars and after a possible TODO
   keyword.  In an item, this will be the position after bullet and
   check-box, if any.  When the cursor is already at that position,
   another `C-a' will bring it to the beginning of the line.
   
   `C-e' will jump to the end of the headline, ignoring the presence
   of tags in the headline.  A second `C-e' will then jump to the
   true end of the line, after any tags.  This also means that, when
   this variable is non-nil, `C-e' also will never jump beyond the
   end of the heading of a folded section, i.e. not after the
   ellipses.
#+end_quote
#+begin_src emacs-lisp
(setq org-special-ctrl-a/e t)
#+end_src
** Use query to confirm killing of hidden subtrees
#+begin_src emacs-lisp
(setq org-ctrl-k-protect-subtree t)
#+end_src
** Override shift + arrows in certain places in favor of windmove
If you want to make the windmove function active in locations where Org mode does not have special functionality on S-<cursor>, add this to your configuration(from [[http://orgmode.org/manual/Conflicts.html][Conflicts - The Org Manual]]):
#+begin_src emacs-lisp
;; Make windmove work in org-mode:
          (add-hook 'org-shiftup-final-hook 'windmove-up)
          (add-hook 'org-shiftleft-final-hook 'windmove-left)
          (add-hook 'org-shiftdown-final-hook 'windmove-down)
          (add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src
** Auto adjust footnotes
#+begin_src emacs-lisp
(setq org-footnote-auto-adjust t)
#+end_src
** Follow link in orgmode by pressing Enter key
This adds an alternative way to follow urls in orgmode without reaching out for the mouse.
#+begin_src emacs-lisp
(setq org-return-follows-link t)
#+end_src
** Strikethrough for Done tasks
adapted from [[http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/][Sacha Chua's blog]]
#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(set-face-attribute 'org-done nil :foreground "PaleGreen" :strike-through t :weight 'bold)
(set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :strike-through t)
#+end_src
** Color only the stars for the org mode levels
This is a nice little setting I found while browsing the Customize interface. It removes the color from the org headline levels, only keeping it on the stars. This makes the buffer way less colorful, but I find it more clean that way. Not to mention that because my color theme isn't amongst the most popular ones, the coloring was a bit bizzare, in that the first level was green, the second plain white and the third yellow, which was a bit disorienting, since I'd expect the second level to be colored instead of the third. So I've now removed the color from the text and can focus on the stars for denoting the hierarchy.
#+begin_src emacs-lisp
(setq org-level-color-stars-only t)
#+end_src
** Custom color for headline levels 2 and 3
In my color theme, headline level 2 used to be plain white, while headline level 3 used to be bold «gold» in color, which was confusing, as I'd expect the inverse. So I took the initiative and customized the colors myself - on the way I decided I preferred level 3 to also be obvious as a headline, and distinguishable from the rest of the text.
#+begin_src emacs-lisp
(set-face-attribute 'org-level-2 nil :foreground "gold" :weight 'bold :inherit 'unspecified)
(set-face-attribute 'org-level-3 nil :foreground "cyan3" :weight 'bold :inherit 'unspecified)
#+end_src
** Custom color for org source code blocks
I didn't really like the fact that the org source code blocks had the color of the comments (grey), as this made them less visible and prominent. I found, via [[https://www.reddit.com/r/emacs/comments/415imd/prettier_orgmode_source_code_blocks/cz09wvh/][this reddit post]], that I can customize the faces of ~org-block-begin-line~ and ~org-block-end-line~. I decided however to leave the default settings for these, as the file became too flashy otherwise. I customized ~org-block~ to change the faces of the content of the source blocks and set their foreground to whitesmoke so that I can read them more easily.
#+begin_src emacs-lisp
(set-face-attribute 'org-block nil :foreground "whitesmoke" :inherit 'unspecified)
#+end_src
** Custom postamble in html export
I only want to see the date and not the author nor the created by details on the bottom of the exported html file, and found out the ~org-html-postamble~ can be modified to not show these things. I also wanted a custom way to show the date format (because I don't like the y-m-d format much), so I use here a custom function, adapted from [[https://stackoverflow.com/a/18933020][this stackoverflow answer]].
#+begin_src emacs-lisp
(defun my-org-html-postamble (plist)
 (format "Last update : %s" (format-time-string "%a %d/%m/%Y")))
(setq org-html-postamble 'my-org-html-postamble)
#+end_src
I don't want to print the postamble everywhere however, so I also found out that writing ~#+OPTIONS: html-postamble:nil~ on the file where the postamble should be exlcuded does the trick.
** Add shortcut templates for emacs lisp, org and title
These [[https://orgmode.org/manual/Easy-templates.html][templates]], e.g. ~<s~, are very practical. Out of them I use most SRC emacs-lisp, org and ~#+title~, so I wished I could create shortcuts for these too. However, [[https://orgmode.org/Changes.html#org1b5e967][the previous shortcut system was changed in Org 9.2]] and I had to require org-tempo and modify my template config accordingly in order for the shortcuts to continue working (see [[https://www.reddit.com/r/emacs/comments/ad68zk/get_easytemplates_back_in_orgmode_92/eds5kcj/][here]]).
#+begin_src emacs-lisp
(when (version<= "9.2" (org-version))
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("o" . "src org"))
(add-to-list 'org-structure-template-alist '("vim" . "src vim"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-tempo-keywords-alist '("t" . "title")))
#+end_src
** Enable Speed keys
[[https://orgmode.org/manual/Speed-keys.html][Speed keys]] are single keystrokes without modifiers that can be used when the cursor is on a headline to e.g. move around the buffer. Here I enable them and set them to be able to be used on any star of the headline (code taken from the explanation string of the M-x customize section).
#+begin_src emacs-lisp
 (setq org-use-speed-commands
         (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
#+end_src
** Change org-show-context-detail
This variable sets how much will be revealed when revealing locations. I'm changing its value because counsel-outline apparently uses this variable to determine how it will show the headings after jumping to a specific one. With the default setting it inherited the ~(default . ancestors)~, and thus didn't show any further children that the heading had. I didn't like this behavior, since I like to see all the children that are available, and thus set org-goto to tree which shows all the children, but hides any possible introductory text before the children, which is useful since I have long text in some headings as a sort of introduction (basically the reason I didn't choose the canonical option, since that one shows said text). In order to not have to redefine the entire variable (since I only wanted to change the behavior of org-goto, that is add that element to the list), I use the ~push~ function to add the desired element (adapted from [[https://emacs.stackexchange.com/a/32269][here]]).
#+begin_src emacs-lisp
(push '(org-goto . tree) org-show-context-detail)
#+end_src
** Change org-block indentation setting
Org by default adapts the indentation to the outline node level, which leads to the begin_ and end_ type blocks to be indented when they are created in an outline level below 1, an undesirable for me behavior. This setting disables that, so that now the org blocks have the same alignment as normal text.
#+begin_src emacs-lisp
(setq org-adapt-indentation nil)
#+end_src
** Custom org-related functions
*** Split org block in a dwim manner
Here I add the function ~modi/org-split-block~ (found from [[https://scripter.co/splitting-an-org-block-into-two/][here]]), which splits an org block based on where the point is. For a better explanation, read the docstring below and also [[https://scripter.co/splitting-an-org-block-into-two/#org-block-split][here]]:
#+begin_example
# Sensibly split the current Org block at point.
# (1) Point in-between a line
#     #+begin_src emacs-lisp             #+begin_src emacs-lisp
#     (message▮ \"one\")                   (message \"one\")
#     (message \"two\")          -->       #+end_src
#     #+end_src                          ▮
# 				       #+begin_src emacs-lisp
# 				       (message \"two\")
# 				       #+end_src
# (2) Point at EOL
#     #+begin_src emacs-lisp             #+begin_src emacs-lisp
#     (message \"one\")▮                   (message \"one\")
#     (message \"two\")          -->       #+end_src
#     #+end_src                          ▮
# 				       #+begin_src emacs-lisp
# 				       (message \"two\")
# 				       #+end_src
# (3) Point at BOL
#     #+begin_src emacs-lisp             #+begin_src emacs-lisp
#     (message \"one\")                    (message \"one\")
#     ▮(message \"two\")          -->      #+end_src
#     #+end_src                          ▮
# 				       #+begin_src emacs-lisp
# 				       (message \"two\")
# 				       #+end_src
#+end_example
Note: There is also the ~org-babel-demarcate-block~ function (bound by default to ~C-c C-v d~ or ~C-c C-v C-d~.
#+begin_quote
This function varies from [org-split-block] in at least two ways:

- It works only for Org Src blocks.
- It splits the block exactly at where the point is, whereas I would like to always split only at EOL or BOL.
#+end_quote
#+begin_src emacs-lisp
(defun modi/org-in-any-block-p ()
  "Return non-nil if the point is in any Org block.

The Org block can be *any*: src, example, verse, etc., even any
Org Special block.

This function is heavily adapted from `org-between-regexps-p'."
  (save-match-data
    (let ((pos (point))
          (case-fold-search t)
          (block-begin-re "^[[:blank:]]*#\\+begin_\\(?1:.+?\\)\\(?: .*\\)*$")
          (limit-up (save-excursion (outline-previous-heading)))
          (limit-down (save-excursion (outline-next-heading)))
          beg end)
      (save-excursion
        ;; Point is on a block when on BLOCK-BEGIN-RE or if
        ;; BLOCK-BEGIN-RE can be found before it...
        (and (or (org-in-regexp block-begin-re)
                 (re-search-backward block-begin-re limit-up :noerror))
             (setq beg (match-beginning 0))
             ;; ... and BLOCK-END-RE after it...
             (let ((block-end-re (concat "^[[:blank:]]*#\\+end_"
                                         (match-string-no-properties 1)
                                         "\\( .*\\)*$")))
               (goto-char (match-end 0))
               (re-search-forward block-end-re limit-down :noerror))
             (> (setq end (match-end 0)) pos)
             ;; ... without another BLOCK-BEGIN-RE in-between.
             (goto-char (match-beginning 0))
             (not (re-search-backward block-begin-re (1+ beg) :noerror))
             ;; Return value.
             (cons beg end))))))

(defun modi/org-split-block ()
  "Sensibly split the current Org block at point.

If the point is anywhere on the line, but not at the beginning of the line 
(BOL), go to the end of the line, and then split the block.

Otherwise (if point is at BOL), split the block exactly at that point."
  (interactive)
  (if (modi/org-in-any-block-p)
      (save-match-data
        (save-restriction
          (widen)
          (let ((case-fold-search t)
                (at-bol (bolp))
                block-start
                block-end)
            (save-excursion
              (re-search-backward "^\\(?1:[[:blank:]]*#\\+begin_.+?\\)\\(?: .*\\)*$" nil nil 1)
              (setq block-start (match-string-no-properties 0))
              (setq block-end (replace-regexp-in-string
                               "begin_" "end_" ;Replaces "begin_" with "end_", "BEGIN_" with "END_"
                               (match-string-no-properties 1))))
            ;; Go to the end of current line, if not at the BOL
            (unless at-bol
              (end-of-line 1))
            (insert (concat (if at-bol "" "\n")
                            block-end
                            "\n\n"
                            block-start
                            (if at-bol "\n" "")))
            ;; Go to the line before the inserted "#+begin_ .." line
            (beginning-of-line (if at-bol -1 0)))))
    (message "Point is not in an Org block")))
#+end_src
* Undo tree
#+begin_src emacs-lisp
(require 'undo-tree)
#+end_src
Global undo tree mode.
#+begin_src emacs-lisp
(global-undo-tree-mode)
#+end_src
Define undo and redo keys.\\
M-p for M-previous and M-n for M-next in emacs state. These might not be the most comfortable of keybindings, but they are the most easily memorable amongst the unbound keys.
#+begin_src emacs-lisp
(define-key evil-emacs-state-map "\M-p" 'undo-tree-undo)
(define-key evil-emacs-state-map "\M-n" 'undo-tree-redo)
#+end_src
* Drag-stuff package config
#+begin_src emacs-lisp
(require 'drag-stuff)
#+end_src
Hook drag-stuff-mode to text-mode and prog-mode.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'drag-stuff-mode)
(add-hook 'prog-mode-hook 'drag-stuff-mode)
#+end_src
Define the keybindings - the default being M- and arrow keys.
#+begin_src emacs-lisp
(drag-stuff-define-keys)
#+end_src
* Espy password fetcher package config
[[https://github.com/walseb/espy][This package]] allows to copy usernames and passwords from a dedicated file from inside emacs. I'm glad I found it because it gave me the incentive to refactor my password file and it feels like a password management solution without having to use all this complicated encryption stuff (and if I ever decide to encrypt my password file, gpg is supported). Here I enable the package and set the file from which it will draw the passwords. On Linux, it is a fixed location, but on Windows I use different folders, so I'll have to remember to change the setting when I change folders. I also rename the string it will use to recognise the passwords as I'm not used to using the ~"pass:"~ abbreviation. On the other hand, I'm not changing ~"user:"~ however, because oftentimes web services ask for email/password instead of username/password and since I have entries with both types, I'll just keep ~"user:"~ to cover both.
#+begin_src emacs-lisp
(require 'espy)
(if (eq system-type 'gnu/linux)
    (setq espy-password-file "~/Λήψεις/σημαντικά αρχεία txt/passwords.org")
(setq espy-password-file "c:/temporarity folder/kalokairi 2019 folder/σημαντικά αρχεία txt/passwords.org"))
(setq espy-pass-prefix "password:")
#+end_src
* Ivy-counsel-swiper and ivy-prescient configuration
First, enable ivy and counsel modes.
#+begin_src emacs-lisp
(ivy-mode 1)
(counsel-mode 1)
#+end_src
** Ivy prescient
Ivy prescient is much like smex, but it also remembers the history for not only counsel-M-x, but also many other commands that have a candidate list, and it is also actually maintained.//
Enable ivy-prescient-mode.
#+begin_src emacs-lisp
(ivy-prescient-mode 1)
#+end_src
Enable prescient-persist-mode to keep usage statistics.
#+begin_src emacs-lisp
(prescient-persist-mode 1)
#+end_src
Don't sort candidates by length.
#+begin_src emacs-lisp
(setq prescient-sort-length-enable nil)
#+end_src
Fix so that ~counsel-unicode-char~ will be sorted properly: Most other commands were sorted with prescient (except of course those commands that under ~ivy-read~ have ~:sort~ as either ~nil~ or absent - see [[https://github.com/raxod502/prescient.el#configuration][here]]), but the output of ~counsel-unicode-char~ remained unsorted. And this while said command had ~:sort t~ and looking at ~prescient-save.el~ showed that the candidates I had chosen were indeed recorded by prescient. I was on the verge of filing an issue, when I saw [[https://github.com/raxod502/prescient.el/issues/38][another, unrelated, issue]] in the prescient repo mentioning ~ivy-sort-functions-alist~. I took a look at that and saw there a little note to also see ~ivy-sort-max-size~. I took then a look at this one and it said that this determined the max number of candidates after which sorting would be disabled. The default was 30000. Turns out the number of candidates for ~counsel-unicode-char~ was 43519, hence it wasn't sorted. Here I set the max size to 44000 so that sorting with prescient will be enabled there too.
#+begin_src emacs-lisp
(setq ivy-sort-max-size 44000)
#+end_src
** Basic ivy settings
Show current candidate index and count for ivy minibuffer completion.
#+begin_src emacs-lisp
(setq ivy-count-format "(%d/%d) ")
#+end_src
Keybindings for counsel and swiper functions. ~swiper-isearch~ is like regular swiper, only it shows all results corresponding to a search string from the current line, instead of only the first one, and it also doesn't show the line numbers of the results (see [[https://oremacs.com/2019/04/07/swiper-isearch/][Swiper-isearch - a more isearch-like swiper · (or emacs]]). ~counsel-switch-buffer~ is like ~ivy-switch-buffer~, but it also shows the preview of each buffer. ~counsel-buffer-or-recentf~ is like ~counsel-recentf~, but it shows with a different color when a recent file is already opened as a buffer.
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-M-s") 'swiper-isearch)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "\C-xb") 'counsel-switch-buffer)
(global-set-key (kbd "\C-cu") 'counsel-unicode-char)
(global-set-key (kbd "\C-cr") 'counsel-buffer-or-recentf)
(global-set-key (kbd "\C-h v") 'counsel-describe-variable)
(global-set-key (kbd "\C-h f") 'counsel-describe-function)
#+end_src
Binding to yank symbol in swiper-map. Useful when starting to search for a symbol without writing it in exactly the right manner, and I want to yank the correct form from one of the search results, without selecting said result.
#+begin_src emacs-lisp
(with-eval-after-load 'swiper
(define-key swiper-map "\C-w" 'ivy-yank-symbol))
#+end_src
Note: To search for the entire word at point with swiper (and not only the part from the cursor onwards, as M-j does), ~M-n~ (~ivy-next-history-element~) can be used to yank the symbol under point into the search.\\
Inverse use of ~C-j~ and ~tab~. This allows me to use tab only once in order to go to the selected directory in ~counsel-find-file~.
#+begin_src emacs-lisp
(define-key ivy-minibuffer-map (kbd "C-j") #'ivy-partial-or-done)
(define-key ivy-minibuffer-map (kbd "TAB") #'ivy-alt-done)
#+end_src
Wrap around the first and last candidate in the minibuffer.
#+begin_src emacs-lisp
(setq ivy-wrap t)
#+end_src
Do not add a ~^~ (beginning of line anchor) when completing (see [[https://github.com/kshenoy/dotfiles/blob/master/emacs.org#ivy-et-al][here]]).
#+begin_src emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+end_src
Don't show parent and current directories in counsel-find-file (found from [[https://github.com/kshenoy/dotfiles/blob/master/emacs.org#ivy-et-al][here]]).
#+begin_src emacs-lisp
(setq ivy-extra-directories nil)
#+end_src
Have swiper go to the start of a match, and not to its end (as is the default), when selecting a match.
#+begin_src emacs-lisp
(setq swiper-goto-start-of-match t)
#+end_src
Have swiper stay on the latest search result after cancelling the search.
#+begin_src emacs-lisp
(setq swiper-stay-on-quit t)
#+end_src
Have ivy minibuffer selection highlight the entire current line (recommended from the [[https://github.com/Yevgnen/ivy-rich/blob/master/README.org][ivy-rich README]]).
#+begin_src emacs-lisp
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src
Set the initial state of [[https://oremacs.com/2015/11/04/ivy-occur/][ivy-occur-mode]] (which keeps a list of completion candidates in a separate buffer when pressing ~C-c C-o~) to emacs, as it doesn't work properly with the normal evil state.
#+begin_src emacs-lisp
(evil-set-initial-state 'ivy-occur-mode 'emacs)
#+end_src
Make ~counsel-describe-face~ look like ~counsel-faces~ (found from [[https://github.com/seagle0128/.emacs.d/blob/eefe8a8699b7284215f72eb4ce38d46ad3924805/lisp/init-ivy.el#L116][here]]).
#+begin_src emacs-lisp
(add-to-list 'ivy-format-functions-alist '(counsel-describe-face . counsel--faces-format-function))
#+end_src
Fontify more elements in the switch buffer list: Some elements (namely directories and org files) are colored by default in the switch buffer list. This is controlled by the ~ivy-switch-buffer-faces-alist~ variable. Here I add to it some more elements to fontify, namely emacs-lisp, helpful and ivy-occur buffers.
#+begin_src emacs-lisp
(add-to-list 'ivy-switch-buffer-faces-alist '(emacs-lisp-mode . font-lock-keyword-face))
(add-to-list 'ivy-switch-buffer-faces-alist '(helpful-mode . font-lock-comment-face))
(add-to-list 'ivy-switch-buffer-faces-alist '(ivy-occur-mode . font-lock-comment-face))
#+end_src
*** Ivy faces
Change color of ivy-org face: The default one is inherited from org-level-4, which is gray, and thus always confused me when displaying the buffers, because I'm used to the convention that gray=inactive or comment. I changed it thus to chartreuse green, which is the same color that org-level-1 has.
#+begin_src emacs-lisp
(when (package-installed-p 'ivy)
(set-face-attribute 'ivy-org nil :inherit font-lock-function-name-face))
#+end_src
Change color of ivy-highlight-face: This face is used in ~counsel-describe-function~ to highlight the interactive functions and in ~counsel-describe-variable~ to highlight the variables defined with ~defcustom~. By default it inherits from ~highlight~, which is a subtle color in my current setup, and thus I change it to bold chartreuse green to make it more obvious.
#+begin_src emacs-lisp
(when (package-installed-p 'ivy)
(set-face-attribute 'ivy-highlight-face nil :inherit font-lock-function-name-face))
#+end_src
Change color of ivy-minibuffer-match-face-1: This is the color used when a single search string is used in the minibuffer. I change it from the default grey because I didn't like that one.
#+begin_src emacs-lisp
(when (package-installed-p 'ivy)
(set-face-attribute 'ivy-minibuffer-match-face-1 nil :foreground "blue" :background "pale turquoise" :weight 'bold :inherit 'unspecified))
#+end_src
*** Configure counsel-outline
The ~counsel-outline~ command allows for easier searching of and landing on org and other headlines. Here I set a keybinding for it on org-mode buffers, and also set it to display todo states, color the headings according to their org colors and customize the separator between the headlines.
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "\C-co") 'counsel-outline)
(setq counsel-org-headline-display-todo t)
(setq counsel-outline-face-style 'org)
(setq counsel-outline-path-separator "→")
#+end_src
** Ivy rich
[[https://github.com/Yevgnen/ivy-rich][This package]] shows descriptions of the items in ~ivy-switch-buffer~, ~counsel-M-x~, ~counsel-describe-variable~, ~counsel-describe-function~ e.t.c.
#+begin_src emacs-lisp
(require 'ivy-rich)
(ivy-rich-mode 1)
#+end_src
*** Add custom display transformer for try
Make it the same as package-install.
#+begin_src emacs-lisp
(plist-put ivy-rich-display-transformers-list
             'try
    '(:columns
     ((ivy-rich-candidate (:width 30))
      (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
      (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
      (ivy-rich-package-install-summary (:face font-lock-doc-face)))))
#+end_src
*** Add display transformer for package-reinstall
Make it the same as package-install.
#+begin_src emacs-lisp
(plist-put ivy-rich-display-transformers-list
             'package-reinstall
    '(:columns
     ((ivy-rich-candidate (:width 30))
      (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
      (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
      (ivy-rich-package-install-summary (:face font-lock-doc-face)))))
#+end_src
*** Add display transformer for counsel-switch-buffer
Make it the same as ivy-switch-buffer.
#+begin_src emacs-lisp
(plist-put ivy-rich-display-transformers-list
'counsel-switch-buffer
  '(:columns
   ((ivy-rich-candidate (:width 30))  ; return the candidate itself
    (ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
    (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
    (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
    (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
    (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
   :predicate
   (lambda (cand) (get-buffer cand))))
#+end_src
*** Modify display transformer for counsel-describe-variable
Adds a preview of the current value of the variable. Adapted from doom-emacs, specifically from [[https://github.com/hlissner/doom-emacs/blob/854d8ce00aa96c41bfe901d6b274d6f95615ba13/modules/completion/ivy/autoload/ivy.el#L63-L87][here]] and [[https://github.com/hlissner/doom-emacs/blob/854d8ce00aa96c41bfe901d6b274d6f95615ba13/modules/completion/ivy/config.el#L132-L139][here]], and found via [[https://www.reddit.com/r/emacs/comments/c8czhe/variable_explorer/esm3ib6/][r/emacs]].
#+begin_src emacs-lisp
(defun +ivy-rich-describe-variable-transformer (cand)
  "Previews the value of the variable in the minibuffer"
  (let* ((sym (intern cand))
         (val (and (boundp sym) (symbol-value sym)))
         (print-level 3))
    (replace-regexp-in-string
     "[\n\t\^[\^M\^@\^G]" " "
     (cond ((booleanp val)
            (propertize (format "%s" val) 'face
                        (if (null val)
                            'font-lock-comment-face
                          'font-lock-function-name-face)))
           ((symbolp val)
            (propertize (format "'%s" val)
                        'face 'font-lock-keyword-face))
           ((keymapp val)
            (propertize "<keymap>" 'face 'font-lock-constant-face))
           ((listp val)
            (prin1-to-string val))
           ((stringp val)
            (propertize (format "%S" val) 'face 'font-lock-string-face))
           ((numberp val)
            (propertize (format "%s" val) 'face 'font-lock-doc-face))
           ((format "%s" val)))
     t)))

        (plist-put ivy-rich-display-transformers-list
                   'counsel-describe-variable
                   '(:columns
                     ((counsel-describe-variable-transformer (:width 40)) ; the original transformer
                      (+ivy-rich-describe-variable-transformer (:width 10))
                      (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face)))))
#+end_src
*** Modify display transformer for counsel-recentf
Change date format from Y-m-d to d/m/y, and (more importantly) show the candidates in such a way as to shorten the intermediate directories depending on the width of the frame so that the filenames aren't cut off (adapted from ~ivy-rich-switch-buffer-path~). For this to work properly, that is keep the line adjustment correct, the last modified time was put first and the seconds were removed from its date format.
#+begin_src emacs-lisp
(defun lmintmate/ivy-rich-file-last-modified-time (candidate)
  (if (file-remote-p candidate)
      "?"
    (format-time-string "%d/%m/%y %H:%M" (nth 5 (file-attributes candidate)))))

(plist-put ivy-rich-display-transformers-list
'counsel-recentf
    '(:columns
      ((lmintmate/ivy-rich-file-last-modified-time (:face font-lock-comment-face))
       (ivy-rich-candidate (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.8))))))))
#+end_src
*** Add display transformer for counsel-buffer-or-recentf
Similar to ~counsel-recentf~, but uses ~counsel-buffer-or-recentf-transformer~ instead of ~ivy-rich-candidate~.
#+begin_src emacs-lisp
(plist-put ivy-rich-display-transformers-list
'counsel-buffer-or-recentf
    '(:columns
      ((lmintmate/ivy-rich-file-last-modified-time (:face font-lock-comment-face))
       (counsel-buffer-or-recentf-transformer (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.8))))))))
#+end_src
*** Enable display transformers
#+begin_src emacs-lisp
(ivy-rich-set-display-transformer)
#+end_src
* Helpful: Enhanced help buffers
[[https://github.com/Wilfred/helpful][The helpful package]] enhances the content of the help buffers.
** Set evil emacs state as the default initial state for helpful-mode
The default initial state is normal, which makes it harder to close the buffer (having to use ~C-x k~ or ~:bd~ instead of just using ~q~). I'd rather have it as emacs state, like the default help buffers. Similarly, I change ~elisp-refs-mode~ to emacs state, as this is the mode used for the output of the "Find all references" link in helpful buffers.
#+begin_src emacs-lisp
(evil-set-initial-state 'helpful-mode 'emacs)
(evil-set-initial-state 'elisp-refs-mode 'emacs)
#+end_src
However, this disables using ~C-]~ to view the definition under point in its original file. Binding this in special-mode-map (the parent of helpful-mode-map and elisp-refs-mode map) to emacs state re-enables it.
#+begin_src emacs-lisp
(evil-define-key 'emacs special-mode-map
(kbd "\C-]") 'evil-jump-to-tag)
#+end_src
** Integrate helpful with counsel
The default helpful commands do not offer integration with ivy-rich. Thankfully, there are variables that define the function to be used to show the result of ~counsel-describe-function~ and ~counsel-describe-variable~ commands, so that I can have the enhanced help and keep the ivy-rich integration too (found from [[https://www.reddit.com/r/emacs/comments/a6rxga/helpful_an_alternative_to_the_builtin_emacs_help/ec0b2qw/][here]]). Note: the built-in ~describe-function~ includes both functions and macros. ~helpful-function~ is functions only, so ~helpful-callable~ is provided as a drop-in replacement (see [[https://github.com/Wilfred/helpful#usage][here]]).
#+begin_src emacs-lisp
(setq counsel-describe-function-function #'helpful-callable)
(setq counsel-describe-variable-function #'helpful-variable)
#+end_src
Also change the function used for ~counsel-descbinds~ (which shows a candidate list of active keybindings and the function they correspond to, going to the function definition upon pressing enter) to ~helpful-callable~, as it was ~describe-function~ by default (see [[https://github.com/abo-abo/swiper/blob/8d7578f5d9a7c973ade81bb7b0f6b1ba7cbf0e23/counsel.el#L1079][here]]).
#+begin_src emacs-lisp
(setq counsel-descbinds-function #'helpful-callable)
#+end_src
** Also bind helpful-key to the key used by default for describe-key
#+begin_src emacs-lisp
(global-set-key (kbd "C-h k") #'helpful-key)
#+end_src
** Add helpful-mode to ibuffer help buffer modes
This styles it the same way as other help buffers on the ibuffer list.
#+begin_src emacs-lisp
(add-to-list 'ibuffer-help-buffer-modes 'helpful-mode)
#+end_src
** Incorporate elisp-demos into helpful
#+begin_src emacs-lisp
(advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
#+end_src
* Terminal configuration
** Kill terminal buffer automatically when exiting
From [[https://oremacs.com/2015/01/01/three-ansi-term-tips/][oremacs]].
#+begin_quote
After you close the terminal, you get a useless buffer with no process. It's probably left there for you to have a history of what you did. I find it not useful, so here's a way to kill that buffer automatically:
#+end_quote
#+begin_src emacs-lisp
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
#+end_src
** Redefine keys in term modes to their normal behavior
Some key combinations don't behave as I'd expect in ansi-term. I thus have to redefine them to behave as expected (Syntax from [[https://www.reddit.com/r/emacs/comments/4ccczt/keybindings_in_multiterm/d1i99dk/][a comment on the emacs subreddit]]).
#+begin_src emacs-lisp
(add-hook 'term-mode-hook (lambda ()
      (define-key term-raw-map (kbd "M-x") 'counsel-M-x)
))
#+end_src
* Magit
A very good git manager (the reports of its greatness aren’t overrated at all!).\\
Btw,for those curious (as I was) where the term "porcelain" with which magit is self-described comes from, [[https://stackoverflow.com/questions/6976473/what-does-the-term-porcelain-mean-in-git][here’s]] an answer - the gist of it is that it is a more accessible interface, as opposed to the less user-friendly "plumbing" levels/commands.
** Set magit faces
I changed the faces of ~magit-diff-context-highlight~ and ~magit-section-highlight~ because them being quasi-black didn't look good on my color theme. I also adjusted the faces of ~magit-branch-local~, ~magit-branch-remote~ and ~magit-section-heading~ to fit in more with my colorscheme.
#+begin_src emacs-lisp
(when (package-installed-p 'magit)
(with-eval-after-load 'magit
(set-face-attribute 'magit-diff-context-highlight nil :background "DodgerBlue4" :foreground "grey70")
(set-face-attribute 'magit-section-highlight nil :background "#235c94")
(set-face-attribute 'magit-branch-local nil :foreground "cyan")
(set-face-attribute 'magit-branch-remote nil :foreground "chartreuse")
(set-face-attribute 'magit-section-heading nil :foreground "gold" :weight 'bold)))
#+end_src
** Magit-status keybinding
#+begin_src emacs-lisp
(when (package-installed-p 'magit)
(global-set-key (kbd "C-x g") 'magit-status))
#+end_src
** Emojify insert emoji shortcut
Since I add emojis to my commits, I wanted a way to add them without having to do ~M-x emojify-insert-emoji~ every time.
#+begin_src emacs-lisp
(when (package-installed-p 'magit)
(with-eval-after-load 'magit
(define-key with-editor-mode-map (kbd "C-c e") 'emojify-insert-emoji)))
#+end_src
* Trashed: trash can management from emacs (Linux only)
[[https://github.com/shingo256/trashed][This package]] allows management of the trash can from inside emacs. Here I enable it and set the deletion date format to a form similar to the one it has on my gui file manager, that is localised and shortened day month Year and the time. I also set it to emacs state, as it doesn't work properly with the normal evil state.
#+begin_src emacs-lisp
(when (package-installed-p 'trashed)
(require 'trashed)
(setq trashed-date-format "%a %d %b %Y %T")
(evil-set-initial-state 'trashed-mode 'emacs))
#+end_src
* Emacs-lisp related configuration
** Enable show-paren-mode
This highlights matching parentheses. Turns out it is a global minor mode, and it thus has to be activated for everything or for nothing. The ~show-paren-delay~ option shows the matching parenthese instantaneously when set to 0. The ~show-paren-style~ option set to mixed shows the matching parenthesis when it is visible and highlights the expression when it isn’t.
#+begin_src emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
(setq show-paren-style 'mixed)
#+end_src
** Enable electric-pair-mode
This autocompletes parentheses. It appears to be a global minor mode as well.
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
Here is however a trick to disable it from everywhere but lisp-related modes (from [[https://emacs.stackexchange.com/questions/5981/how-to-make-electric-pair-mode-buffer-local][How to make electric-pair-mode buffer local? - Emacs Stack Exchange]]).
#+begin_src emacs-lisp
(defvar my-electric-pair-modes '(emacs-lisp-mode lisp-interaction-mode))

(defun my-inhibit-electric-pair-mode (char)
  (not (member major-mode my-electric-pair-modes)))

(setq electric-pair-inhibit-predicate #'my-inhibit-electric-pair-mode)
#+end_src
* HideShow mode
[[https://www.emacswiki.org/emacs/HideShow][Link]]. A nifty minor mode to fold code the same way org-mode headings are folded.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src
Keybindings. The ~<backtab>~ string means Shift+Tab. After enabling evil, the tab was taken over by some jump list command, which was inconvenient to say the least. I thus use here ~evil-define-key~ to overcome this problem (see above).\\
Also note that sometimes the action of the tab key doesn't take effect immediately (see [[https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately][here]]). However backtab and C-tab work fine from the get-go for some reason.
#+begin_src emacs-lisp
(evil-define-key '(normal emacs) prog-mode-map
  (kbd "TAB") 'hs-toggle-hiding
  (kbd "<backtab>") 'hs-hide-all
  (kbd "<C-tab>") 'hs-show-all)
#+end_src
* Hide minor mode indicators from mode line
To hide the various minor modes from the mode line, I was initially using [[https://github.com/myrjola/diminish.el][diminish]], but after a while I felt like hiding all minor modes, since I was adding more and more modes for diminish to hide. So I looked into alternatives. I knew first about [[https://github.com/Malabarba/rich-minority][rich-minority]], but it looked kinda complicated to configure, what with it using regexes and all. I ended up thus using [[https://github.com/tarsius/minions][minions]], which hides all minor modes, using a whitelist to show any, but also gives access to them with a menu hidden behind a symbol. I replaced the default symbol ~;-~ with the ~identical to~ (~≡~) math symbol because the default one doesn't feel like a menu symbol to me.
#+begin_src emacs-lisp
(minions-mode 1)
(setq minions-mode-line-lighter "≡")
#+end_src
* Ediff
I'm trying to move myself to emacs as much as possible, so I now decided to replace the functionality of [[http://meldmerge.org/][Meld]].\\
This line splits the ediff windows horizontally instead of vertically.
#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
#+end_src
This one puts the ediff help buffer in the same frame as the rest, as I was a bit bothered by the separate small window it had.
#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
** Operate ediff through dired
Modified from [[http://oremacs.com/2017/03/18/dired-ediff/][Quickly ediff files from dired · (or emacs]]
#+begin_src emacs-lisp
(require 'dired-aux)
(defun ora-ediff-files ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (if (<= (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name
                        "file: "
                        (dired-dwim-target-directory)))))
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2)))
      (error "no more than 2 files should be marked"))))
#+end_src
The keybinding
#+begin_src emacs-lisp
(define-key dired-mode-map "e" 'ora-ediff-files)
#+end_src
* Tangle the org file on save
The local variables set here are invisible when weaving. I also set these variables here as safe, so that emacs won't warn me every time.
#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values
             '(eval add-hook 'after-save-hook
	                (lambda () (org-babel-tangle))
	                nil t))
#+end_src
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
