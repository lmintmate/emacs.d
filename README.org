#+TITLE: My literate Emacs configuration
* Introduction
Here begins my literate emacs configuration. I tended to comment my init file a whole lot, so I figured I preferred a better interface for the comments.
* Things worth noting if you have Emacs 25+
It is worth noting that the emacs version I'm using (on my main Linux system) is 24.5.1, and thus a couple settings are different in emacs 25+, and will need some adjustment to make certain the init files play well with that version.
** Changes in emacs 25+ that affect the init files
Source: [[https://www.masteringemacs.org/article/whats-new-in-emacs-25-1][Mickey Petersen's Emacs 25 changelog]].
#+BEGIN_QUOTE
The default 'diary-file' is now located in "~/.emacs.d".
#+END_QUOTE
This means that one will just need to remove the related config line, since the file is already there.
-----------------------------------
Concerning my init.el file:
#+BEGIN_QUOTE
 'package-initialize' now sets 'package-enable-at-startup' to nil if called during startup. Users who call this function in their init file and still expect it to be run after startup should set 'package-enable-at-startup' to t after the call to 'package-initialize'.
#+END_QUOTE
One will probably need to add the above-mentioned 'package-enable-at-startup' line in the config.
** Other notes
I also include the old init file in case you don't like literate configs, and might update it along with the literate version, though I might stage the generated README.el file instead to save me some trouble.
In this repository is also included an init-windows.el file with a separate configuration for my 32-bit windows pc, where the latest version that worked is 24.3.1.
* Todo list
I also include a TODO list with things I could incorporate to the config in the future, but don't have the time for right now.
** SOMEDAY Install the magit package and add relevant configuration.
It looks as if it could help a lot with the git routine, but I'll have to be prepared for possible troubleshooting, for which I don't have time right now..
** SOMEDAY Possibly add a method to detect (non-)installed packages and auto-install them, as per the example at [[http://aaronbedra.com/emacs.d/#default-packages][Aaron Bedra's Emacs 24 Configuration]].
* Main configuration
So now that we got the intro out of the way, let's begin. First things first...
* What precedes this file: the contents of init.el
In order for this literate configuration to be complete, I need to quote first the code snippets I use in the init.el file, as to show how this magic happens in the first place.
** Custom-set-variables
First of all, I left the custom-set-variables set in place at the very beginning in case I wish to change something from the Customize interface in the future.
#+BEGIN_EXAMPLE
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)
#+END_EXAMPLE
** Add MELPA repository
Secondly, I add the MELPA repository. I do this in init.el and not here as I use the version of Org from MELPA, which I need in order to load this very file.
#+BEGIN_EXAMPLE
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_EXAMPLE
** Require Org
#+BEGIN_EXAMPLE
(require 'org)
#+END_EXAMPLE
** Where the magic happens
#+BEGIN_EXAMPLE
(org-babel-load-file "~/.emacs.d/README.org")
#+END_EXAMPLE
This snippet is the one that does the heavy work. It tracks down all the parts that say "#+BEGIN SRC emacs-lisp" and evaluates them as emacs lisp code, creating a separate README.el in the process, as to reduce load time for the next run. Every time the org file is modified, the .el file is created anew.
-------------
And now these are taken care of, let's proceed to the configuration present in this very file.
* Disabling the tool bar
The snippet below disables tool-bar-mode. I placed it this early in the config so that the toolbar won't be loaded and disabled afterwards, but be disabled from the get-go (I had some glitches with the title screen when I had it further down).
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
* Setting the font size
Since I'm here, I might as well set the font size to 14. The default size seems way too small for me, as if I were trying to watch a bunch of ants...
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 140)
#+END_SRC
* Setting up my must use theme - Blue Mood theme.
I wasn't satisfied with the default Adawaita theme (but then who is?). I tried to find another theme, but most of them (even the popular ones) didn't satisfy my tastes. But when I found Blue Mood, I knew it was the one! In case you haven't encountered it (not too unlikely), it's because it's a part of the [[https://github.com/emacs-jp/replace-colorthemes][color-theme-modern]] package, which apparently recreates older themes for Emacs 24+. In the repository I linked just now, you can see all the other included themes too, complete with screenshots, and, of course, the way to apply them to your init file.
I also modified the fringe color to the same background color as the rest of the theme, as its original color was black, and didn't fit in too well with the rest of the colorscheme for me...
#+BEGIN_SRC emacs-lisp
;; blue mood theme
(load-theme 'blue-mood t t)
(enable-theme 'blue-mood)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fringe ((t (:background "DodgerBlue4")))))
#+END_SRC
* Manually loading external lisp files
I use a couple packages as external files instead of from MELPA, and I thus need to load my personal lisp directory.
** Where I tell Emacs where is my personal lisp directory.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC
** Where I load the specific packages.
I first load the malyon package. This is a package that allows one to play interactive fiction/text games right from Emacs.
I use [[https://github.com/lmintmate/malyon][the version I forked from the repo used by MELPA]], where I made a couple minor changes, such as [[https://github.com/lmintmate/malyon/commit/e95759f5779553f64280ae0101610b03bf4eb9cd][amending the error messages to account for the zblorb compatibility added by a previous maintainer]]. If you don't care about these minor changes, you can use the MELPA version instead.
#+BEGIN_SRC emacs-lisp
;; loads my personalized malyon package
(load "malyon")
#+END_SRC
I then load the web-search package.
I load a locally stored web-search.el file instead of the MELPA package version because I use [[https://github.com/lmintmate/web-search.el][the version I forked from the repo used by MELPA]], where I made a couple changes, such as [[https://github.com/lmintmate/web-search.el/commit/88641a2f90ed599b3e400cadd2c470662b2c9a6f][adding the search provider DuckDuckGo]], as well as [[https://github.com/lmintmate/web-search.el/commit/8bba746feda09970adbf9d76dbef1291d4833af9][the search engines of Bandcamp and Soundcloud]]. I use this manually instead of the MELPA version (with which it is at this point identical) just in case I wish to change anything further. 
#+BEGIN_SRC emacs-lisp
(load "web-search")
#+END_SRC
* Personal directory parameters
Here are gathered all the parameters that set directories for use with various packages.
** The directory where the Deft package data (including the notes) is saved:
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/.emacs.d/deft")
#+END_SRC
** The directory where the emacs diary files are saved (I haven't used it in ages however, so I might remove it in the future):
#+BEGIN_SRC emacs-lisp
(setq diary-file "~/.emacs.d/diary")
#+END_SRC
** The directory where the Racket binary from DrRacket is stored, for use with the geiser and racket-mode packages:
#+BEGIN_SRC emacs-lisp
(setq geiser-racket-binary "~/racket/bin/racket")
(setq racket-program "~/racket/bin/racket")
#+END_SRC
** The directory where I save the interactive fiction/text game files, for use with malyon:
#+BEGIN_SRC emacs-lisp
(setq malyon-stories-directory "~/other-games/frotz-games")
#+END_SRC
** The directory where I have music for use with mpg123.
This otherwise good music player has the problem of not being able to recognise directories with non-latin names, such as my Music directory (and it now has disappeared from MELPA for some reason).
#+BEGIN_SRC emacs-lisp
(defvar mpg123-default-dir "~/mousiki-gia-emacs")
#+END_SRC
** My default music directory for use with Bongo.
After mpg123 disappeared from MELPA, I tried to examine the other music options. Bongo is the second better (and it can recognise non-latin directory names), but it isn't perfect either, as it stops after every song...
#+BEGIN_SRC emacs-lisp
(setq bongo-default-directory "~/Μουσική")
#+END_SRC
Honestly, I prefer the ncurses-based mocp over those 2, but it doesn't play well with multiple buffers a la C-x 2 and C-x 3.
* Nationality parameters
Geographical and language parameters for the weather information fetcher wttrin.
#+BEGIN_SRC emacs-lisp
(setq wttrin-default-cities (quote ("Nicosia" "Chania")))
(setq wttrin-default-accept-language '("Accept-Language" . "el-GR"))
#+END_SRC
Setting the calendar up in Greek. See also [[https://www.emacswiki.org/emacs/CalendarLocalization][EmacsWiki: Calendar Localization]].
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1
          calendar-day-name-array ["Κυριακή" "Δευτέρα" "Τρίτη" "Τετάρτη"
                                   "Πέμπτη" "Παρασκευή" "Σάββατο"]
          calendar-month-name-array ["Ιανουάριος" "Φεβρουάριος" "Μάρτιος"
                                     "Απρίλιος" "Μάιος" "Ιούνιος"
                                     "Ιούλιος" "Αύγουστος" "Σεπτέμβριος"
                                     "Οκτώβριος" "Νοέμβριος" "Δεκέμβριος"])
#+END_SRC
Set input method to greek in order to be able to write greek with the keyboard set to English (useful for those pesky Latin C- and M- shortcuts). Toggle with C-\
#+BEGIN_SRC emacs-lisp
(set-input-method "greek")
#+END_SRC
* Settings for multiple buffer management
** Change layout of windows from horizontal to vertical very easily (from [[http://whattheemacsd.com/buffer-defuns.el-03.html][What the .emacs.d!?]])
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
#+END_SRC
The keyboard shortcut for the above function.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-]" 'toggle-window-split)
#+END_SRC
** Flip 2 window frame, so that left goes right, and up goes down (from [[http://whattheemacsd.com/buffer-defuns.el-02.html][What the .emacs.d!?]])
#+BEGIN_SRC emacs-lisp
(defun rotate-windows ()
  "Rotate your windows"
  (interactive)
  (cond ((not (> (count-windows)1))
         (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))

                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))

                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
#+END_SRC
The keyboard shortcut for the above function.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-[" 'rotate-windows)
#+END_SRC
* Newsticker configuration
Newsticker is awesome, it's just like Liferea, but inside emacs!
** Keep none of the proposed by emacs urls in the list.
#+BEGIN_SRC emacs-lisp
(setq newsticker-url-list-defaults nil)
#+END_SRC
** Do not keep obsolete items.
#+BEGIN_SRC emacs-lisp
(setq newsticker-keep-obsolete-items nil)
#+END_SRC
** Newsticker's url list. It is automatically populated with M-x newsticker-opml-import.
#+BEGIN_SRC emacs-lisp
(setq newsticker-url-list
   (quote
    (("xkcd.com" "http://xkcd.com/rss.xml" nil nil nil)
     ("Opensource.com" "https://opensource.com/feed" nil nil nil)
     ("Awful Library Books" "http://feeds.feedburner.com/awfullibrarybooks?format=xml" nil nil nil)
     ("OmgUbuntu" "http://feeds.feedburner.com/d0od" nil nil nil)
     ("Reddit Linux" "https://www.reddit.com/r/linux/.rss" nil nil nil)
     ("Reddit Linux Mint" "https://www.reddit.com/r/linuxmint/.rss" nil nil nil)
     ("Reddit linuxmasterrace" "https://www.reddit.com/r/linuxmasterrace/.rss" nil nil nil))))
#+END_SRC
* Other configuration parameters
** Do not autosave nor make any backup files.
All they do is litter the place and trigger a nagging prompt whenever I leave Emacs without having saved.
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC
** Delete by moving to the trash (the default behavior being completely delete from the system).
#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
#+END_SRC
** Delete selection mode.
It deletes selected text with the Delete key, which bring Emacs more in line with other text editors.
#+BEGIN_SRC emacs-lisp
(setq delete-selection-mode t)
#+END_SRC
** Geiser's active implementations.
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations (quote (guile racket chez mit chibi)))
#+END_SRC
** Racket memory limit
#+BEGIN_SRC emacs-lisp
(setq racket-memory-limit 128)
#+END_SRC
** Remember notes inital major mode
(Not sure whether I'll keep that one, as I don't use Remember notes anymore...)
#+BEGIN_SRC emacs-lisp
(setq remember-notes-initial-major-mode (quote text-mode))
#+END_SRC
** Display inline images in the w3m browser from within emacs.
#+BEGIN_SRC emacs-lisp
(setq w3m-default-display-inline-images t)
#+END_SRC
** Disabling menu bar when emacs is run in a  terminal.
Since it can't be clicked anyways, it takes up space without reason...
#+BEGIN_SRC emacs-lisp
(when (not (window-system))
  (menu-bar-mode -1))
#+END_SRC
** Toggling the menu bar with a keyboard shortcut.
#+BEGIN_SRC emacs-lisp
(global-set-key [f9] 'toggle-menu-bar-mode-from-frame)
#+END_SRC
** Toggling the scroll bar with a keyboard shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key [f10] 'toggle-scroll-bar)
#+END_SRC
** New  message for the startup echo area.
#+BEGIN_SRC emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Καλωσήλθες!"))
#+END_SRC
** Visual line mode only for text mode.
Visual line wraps lines instead of cutting them as default.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
** Associate .txt files with the goto-address-mode.
This mode highlights urls and makes them clickable.
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "txt")
              (goto-address-mode 1))))
#+END_SRC
** Adds shift + arrows for changing between visible buffers, in addition to Ctrl+O.
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+END_SRC
* Pdf-tools package
#+BEGIN_SRC emacs-lisp
(pdf-tools-install)
#+END_SRC
* Dired Mode Configurations
** Enable dired icon mode.
This functionality, coming from the dired-icon package, shows icons from the currently used icon theme next to the filenames, and thus makes for a better dired experience.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+END_SRC
Setting to make the image size of the dired-icon icons bigger.
#+BEGIN_SRC emacs-lisp
(setq dired-icon-image-size 32)
#+END_SRC
** Dired listing
Group directories first.
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-al --group-directories-first")
#+END_SRC
Sort files by modified date.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-sort-toggle-or-edit)
#+END_SRC
** Hide the details on dired mode, for a cleaner appearance.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
* Load mpg123
#+BEGIN_SRC emacs-lisp
(autoload 'mpg123 "mpg123" "A Front-end to mpg123/ogg123" t)
#+END_SRC
* Deft (quick note taking package) configuration
** Load Deft
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'deft)
#+END_SRC
** Set Deft default extensions.
#+BEGIN_SRC emacs-lisp
(setq deft-extensions '("txt" "md" "org"))
#+END_SRC
** Default mode for deft - switch between the 2 below
#+BEGIN_SRC emacs-lisp
;;(setq deft-default-extension "org")
(setq deft-default-extension "md")
#+END_SRC
** Set the default time format.
I use the European system day-month-year.
#+BEGIN_SRC emacs-lisp
(setq deft-time-format " %d-%m-%Y %H:%M")
#+END_SRC
* Org Mode configuration
The (require 'org) part is present in the init.el file instead of here, precisely in order to compile this very file.
** Define C-c l as the keybinding to org-store-link.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
#+END_SRC
** Set keywords for Org progress states.
These are, apart from TODO and DONE, also CURRENTLY and SOMEDAY.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
   (quote
    ((sequence "TODO(t)" "CURRENTLY(c)" "SOMEDAY(s)" "DONE(d)"))))
#+END_SRC
** Enable support of shift selection of text in org-mode except in special instances.
#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
#+END_SRC
** Ox Tufte package
A package that exports org files following the [[https://edwardtufte.github.io/tufte-css/][Tufte CSS]] presentation style.
#+BEGIN_SRC emacs-lisp
(require 'ox-tufte)
#+END_SRC
* Undo tree
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
#+END_SRC
Global undo tree mode.
#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC
Define M-/ as the redo key.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-/" 'undo-tree-redo)
#+END_SRC
* Olivetti mode - Mode for distraction-free writing.
** Hide the mode line when enabling olivetti.
#+BEGIN_SRC emacs-lisp
(setq olivetti-hide-mode-line t)
#+END_SRC
** Function to turn off the menu bar when olivetti mode is enabled
#+BEGIN_SRC emacs-lisp
(progn
  (defun turn-off-menu-with-olivetti ()
    (menu-bar-mode -1))
  (add-hook 'olivetti-mode-hook 'turn-off-menu-with-olivetti))
#+END_SRC
* Web-search.el package config
** Set the default search provider
#+BEGIN_SRC emacs-lisp
(setq web-search-default-provider "DuckDuckGo")
#+END_SRC
* Emms setup (for soundklaus)
#+BEGIN_SRC emacs-lisp
(require 'emms-setup)
(emms-standard)
(emms-default-players)
#+END_SRC
* Drag-stuff package config
#+BEGIN_SRC emacs-lisp
(require 'drag-stuff)
#+END_SRC
Hook drag-stuff-mode to text-mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'drag-stuff-mode)
#+END_SRC
Define the keybindings - the default being M- and arrow keys.
#+BEGIN_SRC emacs-lisp
(drag-stuff-define-keys)
#+END_SRC
* Ido mode configuration
** Enable Ido Mode
A great buffer and file finding completion mode.
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode)
(ido-everywhere)
#+END_SRC
** Ido completing-read+
Package that makes Ido more ubiquitous.
#+BEGIN_SRC emacs-lisp
(require 'ido-completing-read+)
(ido-ubiquitous-mode 1)
#+END_SRC
** Ido yes-or-no
Package that enables the use of Ido even for the yes-or-no prompt.
#+BEGIN_SRC emacs-lisp
(require 'ido-yes-or-no)
(ido-yes-or-no-mode 1)
#+END_SRC
* Smex - Ido completion for M-x
#+BEGIN_SRC emacs-lisp
(require 'smex) ; Not needed if you use package.el
  (smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                    ; when Smex is auto-initialized on its first run.
#+END_SRC
** Keyboard shortcuts for Smex
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
#+END_SRC
** The old M-x keybinding (just in case).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
