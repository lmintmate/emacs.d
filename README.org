#+TITLE: My literate Emacs configuration
#+SETUPFILE: theme-readtheorg.setup
# Theme for html exporting from [[https://github.com/fniessen/org-html-themes][GitHub - fniessen/org-html-themes]]
* Introduction
Here begins my literate emacs configuration. I tended to comment my init file a whole lot, so I figured I preferred a better interface for the comments.\\
This file was last exported at {{{time(%d/%m/%Y %H:%M)}}}.
** Notes on the evolution of my emacs initialisation
I first started off with the .emacs file in my home directory. I had to look for it though amongst all the other hidden files in that directory. So, especially after I found out I could version-control my emacs dotfiles, I switched to .emacs.d/init.el. so that I could have my config in one place. That setup still wasn’t satisfactory enough though. So when I found out I could have my config in an org file, which would allow my comments to truly stand out, I was intrigued and wanted to accomplish that. I initially thought however it'd be too hard to do (I do think that a lot when trying new ways of doing things…). I took the plunge however, and it turned out to be way easier than I thought. So I now keep most my config in this here file, and use init.el only for the preliminary configs that need to be loaded before this file.
* Things worth noting if you have Emacs 25+
It is worth noting that the emacs version I'm using (on my main Linux system) is 24.5.1, and thus a couple settings are different in emacs 25+, and will need some adjustment to make certain the init files play well with that version.
** Changes in emacs 25+ that affect the init files
Source: [[https://www.masteringemacs.org/article/whats-new-in-emacs-25-1][Mickey Petersen's Emacs 25 changelog]].
Concerning my init.el file:
#+BEGIN_QUOTE
 'package-initialize' now sets 'package-enable-at-startup' to nil if called during startup. Users who call this function in their init file and still expect it to be run after startup should set 'package-enable-at-startup' to t after the call to 'package-initialize'.
#+END_QUOTE
One will probably need to add the above-mentioned ~package-enable-at-startup~ line in the config.
** Other notes
I also include the old init file in case you don't like literate configs, and might update it along with the literate version, though I might stage the generated README.el file instead to save me some trouble.\\
In this repository is also included an init-windows.el file with a separate configuration for my 32-bit windows pc, where the latest version that worked is 24.3.1.
* Todo list
I also include a TODO list with things I could incorporate to the config in the future, but don't have the time for right now.
** SOMEDAY Maybe replace ido by ivy.
Ivy seems to be rather popular, and similar in aims to ido. Ido works fine for me though, and I feel it'd be too much of a hassle to replace it with ivy.
** CANCELLED +Possibly replace smex with [[https://github.com/DarwinAwardWinner/amx][amx]], a fork with recent activity and improvements (since smex's development was indeed inactive).+
The main argument against doing so is that smex works just fine for me, and I subscribe by the «If it ain't broken» saying. Not to mention that way popular packages depend on smex (e.g. counsel-M-x).
** DONE Install the magit package and add relevant configuration.
+It looks as if it could help a lot with the git routine, but I'll have to be prepared for possible troubleshooting, for which I don't have time right now...+\\
Update: It was actually rather painless! I made a change in this very file and commited it in the blink of an eye!
** DONE Possibly add a method to detect (non-)installed packages and auto-install them.
Like in [[http://aaronbedra.com/emacs.d/#default-packages][Aaron Bedra's Emacs 24 Configuration]], or even sorting the packages in a table first, like [[http://pavpanchekha.com/misc/emacs.html][Pavel Panchekha's Emacs literate init]].
* Main configuration
So now that we got the intro out of the way, let's begin. First things first...
* What precedes this file: the contents of init.el
In order for this literate configuration to be complete, I need to quote first the code snippets I use in the init.el file, as to show how this magic happens in the first place.
** Custom-set-variables
First of all, I left the ~custom-set-variables~ set in place at the very beginning in case I wish to change something from the Customize interface in the future.
#+BEGIN_EXAMPLE
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)
#+END_EXAMPLE
** Add MELPA repository
Secondly, I add the MELPA repository. I do this in init.el and not here as I use the version of Org from MELPA, which I need in order to load this very file.
#+BEGIN_EXAMPLE
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_EXAMPLE
** Auto-install packages through MELPA
From [[http://aaronbedra.com/emacs.d/#default-packages][Aaron Bedra's Emacs 24 Configuration]].\\
The first part of the code defines the packages to be installed ; from this list are absent the packages installed manually, present in the lisp folder, and packages not at MELPA anymore, like mpg123. The second part of the code does the following: when Emacs boots, it checks to make sure all of the packages defined in lmintmate/packages are installed. If not, it has MELPA take care of it.\\
P.S Just so you know, I’m aware that ~use-package~ can be used to achieve the same effect, but I’d have to change the entirety of my configuration for that, so it was more trouble than was worth.
#+BEGIN_EXAMPLE
(defvar lmintmate/packages '(2048-game
anzu
basic-mode
bongo
browse-kill-ring
color-theme-modern
dim
diminish
dired-icon
drag-stuff
esup
focus
free-keys
geiser
gitignore-mode
google-translate
helpful
htmlize
ido-completing-read+
ido-yes-or-no
iedit
isend-mode
legalese
litable
magit
markdown-mode
minimap
ob-translate
olivetti
org
org-cliplink
ox-pandoc
ox-twbs
ox-tufte
pcre2el
pdf-tools
picpocket
racket-mode
smex
soundklaus
transpose-frame
typo
undo-tree
w3m
wttrin
zeal-at-point)
  "Default packages")

(defun lmintmate/packages-installed-p ()
  (loop for pkg in lmintmate/packages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t)))

(unless (lmintmate/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg lmintmate/packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
#+END_EXAMPLE
** Require Org
#+BEGIN_EXAMPLE
(require 'org)
#+END_EXAMPLE
** Where the magic happens
#+BEGIN_EXAMPLE
(org-babel-load-file "~/.emacs.d/README.org")
#+END_EXAMPLE
This snippet is the one that does the heavy work. It tracks down all the parts that say ~#+BEGIN_SRC emacs-lisp~ and evaluates them as emacs lisp code, creating a separate README.el in the process, as to reduce load time for the next run. Every time the org file is modified, the .el file is created anew.\\
And now these are taken care of, let's proceed to the configuration present in this very file.
* Disabling the tool bar
The snippet below disables tool-bar-mode. I placed it this early in the config so that the toolbar won't be loaded and disabled afterwards, but be disabled from the get-go (I had some glitches with the title screen when I had it further down).
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
* Setting the font
Here, I'm setting the font and the font size. The default font emacs by itself used on my machine appeals a lot to me, so when I found out it was DejaVu Sans Mono, I decided to put it in the config, in case I move to another computer where the font might suddenly be something else entirely I won't like. I also set the font size to 14. The default size seems way too small for me, as if I were trying to watch a bunch of ants...
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 140)
#+END_SRC
* Setting up my must use theme - Blue Mood theme.
I wasn't satisfied with the default Adawaita theme (but then who is?). I tried to find another theme, but most of them (even the popular ones) didn't satisfy my tastes. But when I found Blue Mood, I knew it was the one!\\
In case you haven't encountered it (not too unlikely), it's because it's a part of the [[https://github.com/emacs-jp/replace-colorthemes][color-theme-modern]] package, which apparently recreates older themes for Emacs 24+. In the repository I linked just now, you can see all the other included themes too, complete with screenshots, and, of course, the way to apply them to your init file.\\
I also modified the fringe color to the same background color as the rest of the theme, as its original color was black, and didn't fit in too well with the rest of the colorscheme for me, and the highlight color to PaleTurquoise4, as it had the same color as the one of the region so that I couldn't distinguish a highlighted region when hl-line-mode was turned on. ~font-lock-negation-char-face~ is used by gitignore mode for the exclamation marks.
#+BEGIN_SRC emacs-lisp
(load-theme 'blue-mood t t)
(enable-theme 'blue-mood)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fringe ((t (:background "DodgerBlue4"))))
 '(font-lock-negation-char-face ((t (:foreground "tomato"))))
 '(highlight ((t (:background "PaleTurquoise4")))))
;; setting so that hl-line-mode won't affect syntax coloring
(set-face-foreground 'highlight nil)
#+END_SRC
** Mode line customisation
Where I give it a flat look.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(mode-line ((t (:background "grey75" :foreground "black"))))
 '(mode-line-highlight ((t (:box (:line-width 1 :color "grey20"))))))
#+END_SRC
** Hide line between fringes
Remove the strange white line between two fringes, which appears when the scrollbar is hidden (from [[https://ogbe.net/emacsconfig.html][Dennis Ogbe's Emacs configuration file]]).
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))
#+END_SRC
* Manually loading external lisp files
I use some external lisp files, and I thus need to load my personal lisp directory.
** Where I tell Emacs where is my personal lisp directory.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC
** Where I load the specific packages.
*** Loading the malyon package.
 This is a package that allows one to play interactive fiction/text games right from Emacs.\\
I use [[https://github.com/lmintmate/malyon][the version I forked from the repo used by MELPA]], where I made a couple minor changes, such as [[https://github.com/lmintmate/malyon/commit/e95759f5779553f64280ae0101610b03bf4eb9cd][amending the error messages to account for the zblorb compatibility added by a previous maintainer]]. If you don't care about these minor changes, you can use the MELPA version instead.
#+BEGIN_SRC emacs-lisp
(load "malyon")
#+END_SRC
*** Loading the web-search package.
I load a locally stored web-search.el file instead of the MELPA package version because I use [[https://github.com/lmintmate/web-search.el][the version I forked from the repo used by MELPA]], where I made a couple changes, such as [[https://github.com/lmintmate/web-search.el/commit/88641a2f90ed599b3e400cadd2c470662b2c9a6f][adding the search provider DuckDuckGo]], as well as [[https://github.com/lmintmate/web-search.el/commit/8bba746feda09970adbf9d76dbef1291d4833af9][the search engines of Bandcamp and Soundcloud]]. I use this manually instead of the MELPA version (with which it is at this point identical) just in case I wish to change anything further. 
#+BEGIN_SRC emacs-lisp
(load "web-search")
#+END_SRC
*** Loading the package for polytonic greek
I’m used to writing Greek with the modern Greek layout, which is quite different from the greek-babel polytonic layout in a way jarring to me. I tried to find a way to solve my problem, and found out with relief that I didn’t need to reinvent the wheel, as someone had already made a package for what I wanted ; a layout that would provide polytonic Greek while also keeping the regular keyboard layout I was used to.\\
 This solution to my problem can be found [[http://myria.math.aegean.gr/~atsol/emacs-unicode/][here]](look under the compiled greek.elc link for the greek.el source).
#+BEGIN_SRC emacs-lisp
(load "greek")
#+END_SRC
*** Loading the verbiste-el package
[[https://www.emacswiki.org/emacs/VerbisteEl][Verbiste El]] is an emacs front end for the Verbiste french verb conjugator. Said program has a more updated gui version in the package managers that also includes Italian, but the emacs version only supports french. This seems to be a rather obscure package (and as result unsupported) though, which is rather sad.\\
I use the somewhat newer version, that has a better presentation (the one whose link is dead on emacswiki), which can be found [[https://github.com/daimrod/Emacs-config/blob/master/elisp/verbiste.el][here]].
#+BEGIN_SRC emacs-lisp
(load "verbiste")
#+END_SRC
* Startup screen and scratch buffer options
** Inhibit startup screen
At this point I only use the quick link to the Customize interface, so I thought I’d hide it altogether.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Scratch buffer message
I added a reminder for the links to ~about-emacs~ and to the Customize interface to the default message.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message
   ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.
;; Reminder: To see the startup screen's basic content, use M-x about-emacs.
;; To quickly access the Customize interface, use M-x customize.
")
#+END_SRC
I decided not to change the scratch buffer’s major mode however, because, as weird as it may sound, I like [[https://en.wikipedia.org/wiki/Polish_notation][prefix notation]] a lot (and think that the [[https://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish notation]] is overrated in comparison), and want to keep having it as a nifty little prefix calculation mode.
** New message for the startup echo area
#+BEGIN_SRC emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Καλωσήλθες!"))
#+END_SRC
* The Bell
[[https://www.emacswiki.org/emacs/AlarmBell][That infamous bell…]] I only found out about its «charms» recently, because it turns out my system sounds were disabled for some reason and I hadn't even realised this was the case. This is my way to exterminate those annoying sounds everytime anything out of the norm happens (that's why we have text messages in the first place after all!). I disabled alarms completely as even the visual indication (which is a nice wheat color in my colortheme) can be distracting…
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
* Personal directory parameters
Here are gathered all the parameters that set directories for use with various packages.
*** The directory where the Racket binary from DrRacket is stored:
(for use with the geiser and racket-mode packages)
#+BEGIN_SRC emacs-lisp
(setq geiser-racket-binary "~/racket/bin/racket")
(setq racket-program "~/racket/bin/racket")
#+END_SRC
*** The directory where I save the interactive fiction/text game files:
(for use with malyon)
#+BEGIN_SRC emacs-lisp
(setq malyon-stories-directory "~/other-games/frotz-games")
#+END_SRC
*** The directory where I have music for use with mpg123.
This otherwise good music player has the problem of not being able to recognise directories with non-latin names, such as my Music directory (and it now has disappeared from MELPA for some reason).
#+BEGIN_SRC emacs-lisp
(defvar mpg123-default-dir "~/mousiki-gia-emacs")
#+END_SRC
*** My default music directory for use with Bongo.
After mpg123 disappeared from MELPA, I tried to examine the other music options. Bongo is the second better (and it can recognise non-latin directory names), but it isn't perfect either, as it stops after every song...
#+BEGIN_SRC emacs-lisp
(setq bongo-default-directory "~/Μουσική")
#+END_SRC
Honestly, I prefer the ncurses-based mocp over those 2, but it doesn't play well with multiple buffers a la C-x 2 and C-x 3.
* Nationality parameters
** Geographical and language parameters for the weather information fetcher wttrin.
#+BEGIN_SRC emacs-lisp
(setq wttrin-default-cities (quote ("Nicosia" "Chania")))
(setq wttrin-default-accept-language '("Accept-Language" . "el-GR"))
#+END_SRC
** Setting the calendar up in Greek.
See also [[https://www.emacswiki.org/emacs/CalendarLocalization][EmacsWiki: Calendar Localization]].
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1
          calendar-day-name-array ["Κυριακή" "Δευτέρα" "Τρίτη" "Τετάρτη"
                                   "Πέμπτη" "Παρασκευή" "Σάββατο"]
          calendar-month-name-array ["Ιανουάριος" "Φεβρουάριος" "Μάρτιος"
                                     "Απρίλιος" "Μάιος" "Ιούνιος"
                                     "Ιούλιος" "Αύγουστος" "Σεπτέμβριος"
                                     "Οκτώβριος" "Νοέμβριος" "Δεκέμβριος"])
#+END_SRC
** Set input method to greek
In order to be able to write greek with the keyboard set to English (useful for those pesky Latin C- and M- shortcuts). Toggle with C-\
#+BEGIN_SRC emacs-lisp
(set-input-method "el_GR")
#+END_SRC
** Redirect keybindings with Greek letters
Sometimes I forget to switch the keyboard language from Greek to English (especially when I'm using emacs in tandem with other applications that require the keyboard be set to Greek in order to write in that language) and, as a result, I get something like «M-χ is undefined». This method, from [[https://stackoverflow.com/a/10658699][Stack Overflow]], gives a solution for those modifier-based shortcuts I use (I don't need a solution as radical and complicated as the one proposed above that one - not to mention that I tried that one and couldn't get it to work). It basically tells emacs to consider the given greek letter shortcut the same as the equivalent latin one.
#+BEGIN_SRC emacs-lisp
;; Common keyboard shortcuts I use and might mistype with Greek letters
(define-key function-key-map [?\M-χ] [?\M-x])
(define-key function-key-map [?\M-ς] [?\M-w])
(define-key function-key-map [?\M-π] [?\M-p])
(define-key function-key-map [?\M-ν] [?\M-n])
(define-key function-key-map [?\M-ο] [?\M-o])
(define-key function-key-map [?\M-β] [?\M-b])
(define-key function-key-map [?\M-φ] [?\M-f])
(define-key function-key-map [?\M-ω] [?\M-v])
(define-key function-key-map [?\C-χ] [?\C-x])
(define-key function-key-map [?\C-υ] [?\C-y])
(define-key function-key-map [?\C-ψ] [?\C-c])
(define-key function-key-map [?\C-γ] [?\C-g])
(define-key function-key-map [?\C-σ] [?\C-s])
(define-key function-key-map [?\C-φ] [?\C-f])
(define-key function-key-map [?\C-α] [?\C-a])
(define-key function-key-map [?\C-κ] [?\C-k])
(define-key function-key-map [?\C-β] [?\C-b])
(define-key function-key-map [?\C-ε] [?\C-e])
(define-key function-key-map [?\C-π] [?\C-p])
(define-key function-key-map [?\C-ν] [?\C-n])
(define-key function-key-map [?\C-ς] [?\C-w])
(define-key function-key-map [?\C-θ] [?\C-u])
(define-key function-key-map [?\C-ρ] [?\C-r])
(define-key function-key-map [?\C-ω] [?\C-v])
(define-key function-key-map [?\C-ζ] [?\C-z])
#+END_SRC
* Newsticker configuration
Newsticker is awesome, it's just like Liferea, but inside emacs!
** Keep none of the proposed by emacs urls in the list.
#+BEGIN_SRC emacs-lisp
(setq newsticker-url-list-defaults nil)
#+END_SRC
** Do not keep obsolete items.
#+BEGIN_SRC emacs-lisp
(setq newsticker-keep-obsolete-items nil)
#+END_SRC
** Newsticker's url list.
It is automatically populated with M-x newsticker-opml-import.
#+BEGIN_SRC emacs-lisp
(setq newsticker-url-list
   (quote
    (("xkcd.com" "http://xkcd.com/rss.xml" nil nil nil)
     ("Opensource.com" "https://opensource.com/feed" nil nil nil)
     ("Awful Library Books" "http://feeds.feedburner.com/awfullibrarybooks?format=xml" nil nil nil)
     ("OmgUbuntu" "http://feeds.feedburner.com/d0od" nil nil nil)
     ("Reddit Linux" "https://www.reddit.com/r/linux/.rss" nil nil nil)
     ("Reddit Linux Mint" "https://www.reddit.com/r/linuxmint/.rss" nil nil nil)
     ("Reddit linuxmasterrace" "https://www.reddit.com/r/linuxmasterrace/.rss" nil nil nil)
     ("M-x emacs-reddit" "https://www.reddit.com/r/emacs/.rss" nil nil nil)
     ("πλανήτης ελληνικής κοινότητας ΕΛ/ΛΑΚ" "https://planet.ellak.gr/atom.xml" nil nil nil)
     ("Framablog" "https://framablog.org/feed/" nil nil nil)
     ("Planet Emacsen" "http://planet.emacsen.org/atom.xml" nil nil nil))))
#+END_SRC
* Misc configuration parameters
** Set the title bar to show buffer name
#+BEGIN_SRC emacs-lisp
(setq frame-title-format "%b - Emacs")
#+END_SRC
** Time in modeline
The only way to have the time mode not display the load average, it turns out, is to put the relevant config before loading display-time-mode. Who would have thought? (I got the idea to try this approach from [[https://github.com/IvanMalison/.emacs.d#time-in-mode-line][Ivan Malison's emacs.d]]). An explanation of my ~display-time-format~ config: It basically shows the day of the week, then day/month, then hours:minutes. For more functions, Customize instructs to look at the function ~format-time-string~.
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-format "%a %d/%m %H:%M")
(display-time-mode 1)
#+END_SRC
** Do not autosave nor make any backup files.
All they do is litter the place and trigger a nagging prompt whenever I leave Emacs without having saved.
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC
** Do not create lockfiles
The only thing they do is being annoying, and I'm not going to find myself in a situation where I'll be writing on the exact same file as someone else.
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** Delete by moving to the trash
(the default behavior being completely delete from the system)
#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
#+END_SRC
** Delete selection mode.
I used to think that this enabled deleting selected text with the Delete key, but it turns out that one is the work of the ~delete-active-region~ parameter, which is enabled by default. What this does is allow the replacing of selected text with other inserted (e.g. pasted/yanked) text, thus bringing Emacs more in line with other text editors.\\
I initially set this one from the Customization buffer, and got ~(setq delete-selection-mode t)~ as the resulting code snippet, so I assumed it would work even when outside the ~custom-set-variables~, but it didn't - and then I was wondering why pasting text didn't replace the selected text… Now I replaced that wrong parameter with the correct one.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
P.S. Just so you know, here's precisely why the other wording hadn't worked:
#+BEGIN_QUOTE
Setting this variable directly does not take effect;
   either customize it (see the info node `Easy Customization')
   or call the function `delete-selection-mode'
#+END_QUOTE
That goes into showing that RT(F)M is valid advice…
** Disable double space as end of sentence
I recently tried M-e to go to the end of a long sentence I wrote, and was surprised when I went to the end of the paragraph instead. I searched a little about it and found out there are people that actually use two spaces to start a new sentence. I personally use only one space though (and when writing on paper zero), so I disable this setting.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** Geiser's active implementations.
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations (quote (guile racket chez mit chibi)))
#+END_SRC
** Racket memory limit
#+BEGIN_SRC emacs-lisp
(setq racket-memory-limit 128)
#+END_SRC
** Display inline images in the w3m browser from within emacs.
#+BEGIN_SRC emacs-lisp
(setq w3m-default-display-inline-images t)
#+END_SRC
** Disabling menu bar when emacs is run in a  terminal.
Since it can't be clicked anyways, it takes up space without reason...
#+BEGIN_SRC emacs-lisp
(when (not (window-system))
  (menu-bar-mode -1))
#+END_SRC
** Toggling the menu bar with a keyboard shortcut.
#+BEGIN_SRC emacs-lisp
(global-set-key [f9] 'toggle-menu-bar-mode-from-frame)
#+END_SRC
** Toggling the scroll bar with a keyboard shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key [f10] 'toggle-scroll-bar)
#+END_SRC
** Toggle maximizing the frame
Useful for newsticker
#+BEGIN_SRC emacs-lisp
(global-set-key [f8] 'toggle-frame-maximized)
#+END_SRC
** Visual line mode only for text mode.
Visual line wraps lines instead of cutting them as default.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
Disable visual-line-mode however for the file where I keep all my urls (from the OneTab extension), as I want to be able to kill by logical lines in that particular file, since urls are 1 logical line each, but can span up to 2-3 visual lines.\\
In case you're new to emacs and such terms as logical and visual lines might as well be in a foreign language, see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Continuation-Lines.html][here]] (especially the last paragraph).
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (buffer-name) "onetab.txt")
              (visual-line-mode -1))))
#+END_SRC
** Associate .txt files with the goto-address-mode.
This mode highlights urls and makes them clickable.\\
(code adapted from [[https://stackoverflow.com/questions/13945782/emacs-auto-minor-mode-based-on-extension/39652226#39652226][this stackoverflow answer]])
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string= (file-name-extension buffer-file-name) "txt")
              (goto-address-mode 1))))
#+END_SRC
** Bind M-o to other-window
C-x o is too long a binding for this simple action (idea drawn from [[https://masteringemacs.org/article/my-emacs-keybindings][My Emacs keybindings - Mastering Emacs]]).
#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-o" 'other-window)
#+END_SRC
** Adds shift + arrows for changing between visible buffers, in addition to M-o.
#+BEGIN_SRC emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+END_SRC
To make windmove split a window for you if there isn't one there, here's a really simple hack (from [[https://www.reddit.com/r/emacs/comments/76kph2/wincmd_in_emacs/doep2ig/][a comment on the emacs subreddit]] - shift+down doesn't work however, as it says «Minibuffer is inactive» - at least shift+up accomplishes the same thing…)
#+BEGIN_SRC emacs-lisp
(defun my-windmov-auto-split (dir &optional arg window)
  (when (null (windmove-find-other-window dir arg window))
    (cond ((eq dir 'right) (split-window-right))
      ((eq dir 'down) (split-window-below))
      ((eq dir 'left) (select-window (split-window-right)))
      ((eq dir 'up) (select-window (split-window-below))))))
(advice-add #'windmove-do-window-select :before #'my-windmov-auto-split)
#+END_SRC
** Add command to mark a line
From [[https://ebzzry.io/en/emacs-tips-1/#marks][here]]. Executing it multiple times marks multiple lines.
#+BEGIN_SRC emacs-lisp
(defun mark-line (&optional arg)
  (interactive "p")
  (if (not mark-active)
      (progn
        (beginning-of-line)
        (push-mark)
        (setq mark-active t)))
  (forward-line arg))
#+END_SRC
Its keybinding
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-z" 'mark-line)
#+END_SRC
** Highlight specific words in prog-mode
Modified from [[http://seancribbs.com/emacs.d#sec-5-8][Sean Cribbs' Emacs 25 Configuration]].
#+BEGIN_SRC emacs-lisp
(defun lmintmate/add-watchwords ()
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|CURRENTLY\\|SOMEDAY\\|CANCELLED\\|HACK\\|REFACTOR\\|NOCOMMIT\\|LONGTERM\\)"
          1 font-lock-builtin-face t))))

(add-hook 'prog-mode-hook 'lmintmate/add-watchwords)
#+END_SRC
** Kill terminal buffer automatically when exiting
From [[https://oremacs.com/2015/01/01/three-ansi-term-tips/][oremacs]].
#+BEGIN_QUOTE
After you close the terminal, you get a useless buffer with no process. It's probably left there for you to have a history of what you did. I find it not useful, so here's a way to kill that buffer automatically:
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
#+END_SRC
* Recent files
A quick way to access my most recently opened files (as I didn't want to have to go all the way through the directory structure - even with ido).
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
#+END_SRC
*** Code to have ido completion on recent files (from [[https://www.emacswiki.org/emacs/RecentFiles#toc8][EmacsWiki: Recent Files]]).
#+BEGIN_SRC emacs-lisp
(defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((file-assoc-list
	  (mapcar (lambda (x)
		    (cons (file-name-nondirectory x)
			  x))
		  recentf-list))
	 (filename-list
	  (remove-duplicates (mapcar #'car file-assoc-list)
			     :test #'string=))
	 (filename (ido-completing-read "Choose recent file: "
					filename-list
					nil
					t)))
    (when filename
      (find-file (cdr (assoc filename
			     file-assoc-list))))))
#+END_SRC
The keyboard shortcut for the above code.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cf" 'recentf-ido-find-file)
#+END_SRC
*** Files to exclude from the recent files list
The following files were added to the list just because emacs accessed them by itself, but I don't want to see them in the list.
#+BEGIN_SRC emacs-lisp
(add-to-list 'recentf-exclude
             (expand-file-name "~/.emacs.d/ido.last"))
(add-to-list 'recentf-exclude
             (expand-file-name "~/.emacs.d/emms/history"))
(add-to-list 'recentf-exclude "magit-autoloads.el")
(add-to-list 'recentf-exclude "magit-popup-autoloads.el")
(add-to-list 'recentf-exclude "emms-autoloads.el")
(add-to-list 'recentf-exclude "ht-autoloads.el")
(add-to-list 'recentf-exclude "org-autoloads.el")
(add-to-list 'recentf-exclude "org-loaddefs.el")
(add-to-list 'recentf-exclude "markdown-mode-autoloads.el")
(add-to-list 'recentf-exclude "basic-mode-autoloads.el")
(add-to-list 'recentf-exclude "dash-autoloads.el")
#+END_SRC
* Clipboard management
It turns out that emacs has a separate kill ring, so I somehow have to sync it with the system's clipboard. I use CopyQ as my clipboard manager, so I wanted to be able to browse it from within emacs.
** Max number of entries in kill ring
I set it to 200, since that is CopyQ's default setting.
#+BEGIN_SRC emacs-lisp
(setq kill-ring-max 200)
#+END_SRC
** Sync kill ring with CopyQ
From [[https://github.com/IvanMalison/.emacs.d#sync-kill-ring-with-copyq][Ivan Malison's config]]. It also needed [[https://github.com/IvanMalison/.emacs.d#non-forking-shell-command-to-string][some extra defuns]] placed earlier in his config in order to work.
#+BEGIN_SRC emacs-lisp
(defun imalison:call-process-to-string (program &rest args)
  (with-temp-buffer
    (apply 'call-process program nil (current-buffer) nil args)
    (buffer-string)))

(defun imalison:get-call-process-args-from-shell-command (command)
  (cl-destructuring-bind
      (the-command . args) (split-string command " ")
    (let ((binary-path (executable-find the-command)))
      (when binary-path
        (cons binary-path args)))))

(defun imalison:shell-command-to-string (command)
  (let ((call-process-args
         (imalison:get-call-process-args-from-shell-command command)))
    (if call-process-args
        (apply 'imalison:call-process-to-string call-process-args)
      (shell-command-to-string command))))

(defun imalison:copyq-get (i)
  (imalison:shell-command-to-string (format "copyq eval read(%s)" i)))

(defun imalison:copyq-sync ()
  (interactive)
  (let ((missing-items (cl-loop for i from 0 to (string-to-number
                         (imalison:shell-command-to-string "copyq eval size()"))
         for item = (imalison:copyq-get i)
         when (not (member item kill-ring))
         collect item)))
    (setq kill-ring (nconc kill-ring missing-items))))

(when (executable-find "copyq")
 (run-with-idle-timer 10 t 'imalison:copyq-sync))
#+END_SRC
* Settings for multiple buffer management
I wanted to be able to change the layout of the buffers from horizontal to vertical, as well as be able to flip frames, so that left goes right, and up goes down. I used to use some custom functions found at [[http://whattheemacsd.com][What the .emacs.d!?]] ([[http://whattheemacsd.com/buffer-defuns.el-03.html][here]] and [[http://whattheemacsd.com/buffer-defuns.el-02.html][here]], specifically), but then found the package [[https://github.com/emacsorphanage/transpose-frame/blob/master/transpose-frame.el][transpose-frame]] (available at MELPA), and decided to use that instead, as to make the README.org file less lengthy.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-]" 'transpose-frame)
(define-key global-map "\M-[" 'rotate-frame)
#+END_SRC
* Ibuffer
A better way to list buffers than buffer-menu([[https://www.emacswiki.org/emacs/IbufferMode][link]]). Config influenced from [[http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/][Using Emacs - 34 - ibuffer and emmet | C'est la Z]] and [[http://home.thep.lu.se/~karlf/emacs.html#sec-6-6][some dude's .emacs]].\\
** Replace buffer-menu.
#+BEGIN_SRC emacs-lisp
(require 'ibuffer)
 (global-set-key (kbd "C-x C-b") 'ibuffer)
    (autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC
** Set buffer groups.
#+BEGIN_SRC emacs-lisp
(setq ibuffer-saved-filter-groups
      (quote (("default"
	       ("Dired" (mode . dired-mode))
	       ("Org" (name . "^.*org$"))
               ("Text" (name . "^.*txt$"))
               ("Markdown" (name . "^.*md$"))

	       ("Emacs Lisp" (mode . emacs-lisp-mode))
               ("BASIC" (mode . basic-mode))
	       ("Emacs-created"
                  (or
                   (name . "^\\*")))
	       ))))
(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-auto-mode 1)
	    (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
** Don't show filter groups if there are no buffers in that group.
#+BEGIN_SRC emacs-lisp
(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
** Use human readable size column.
#+BEGIN_SRC emacs-lisp
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		filename-and-process)))
#+END_SRC
* Pdf-tools package
#+BEGIN_SRC emacs-lisp
(pdf-tools-install)
#+END_SRC
* Dired Mode Configurations
** Enable dired icon mode.
This functionality, coming from the dired-icon package, shows icons from the currently used icon theme next to the filenames, and thus makes for a better dired experience.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
#+END_SRC
*** Setting to make the image size of the dired-icon icons bigger.
#+BEGIN_SRC emacs-lisp
(setq dired-icon-image-size 32)
#+END_SRC
** Dired listing
*** Listing switches.
Group directories first and make sizes human-readable.
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh --group-directories-first")
#+END_SRC
*** Sort files by modified date.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-sort-toggle-or-edit)
#+END_SRC
*** Hide the details on dired mode, for a cleaner appearance.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
** Dired dwim target
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
* Load mpg123
#+BEGIN_SRC emacs-lisp
(autoload 'mpg123 "mpg123" "A Front-end to mpg123/ogg123" t)
#+END_SRC
* Org Mode configuration
The ~(require 'org)~ part is present in the init.el file instead of here, precisely in order to compile this very file.
** Org-mouse
This is an org-mode subpackage that allows control of various things with the mouse. I enable it because I almost never remember which is the shortcut to tick checkboxes in org-mode.
#+BEGIN_SRC emacs-lisp
(require 'org-mouse)
#+END_SRC
** Define C-c l as the keybinding to org-cliplink.
I used to have it as the shortcut to org-store-link, but it turns out I hardly used that one…
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "\C-cl") 'org-cliplink)
#+END_SRC
** Define C-c d as the keybinding to org-toggle-link-display
This command toggles between descriptive and literal links, and I need it so that I can edit on the literal links the text that will show up on the descriptive links (and it was too much of a hassle to go to the Org > Hyperlinks submenu just for that…).
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "\C-cd") 'org-toggle-link-display)
#+END_SRC
** Define C-c e as the keybinding to [[http://orgmode.org/worg/doc.html#org-emphasize][org-emphasize]]
This one helps to switch quickly between different text formattings (bold, italic e.t.c).
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "\C-ce") 'org-emphasize)
#+END_SRC
** Set keywords for Org progress states.
These are, apart from TODO and DONE, also CURRENTLY and SOMEDAY.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
   (quote
    ((sequence "TODO(t)" "CURRENTLY(c)" "SOMEDAY(s)" "CANCELLED(x)" "DONE(d)"))))
#+END_SRC
** Special Ctrl-a/e behavior in org mode
From the Customize section of the parameter:
#+BEGIN_QUOTE
Non-nil means `C-a' and `C-e' behave specially in headlines and items.
   
   When t, `C-a' will bring back the cursor to the beginning of the
   headline text, i.e. after the stars and after a possible TODO
   keyword.  In an item, this will be the position after bullet and
   check-box, if any.  When the cursor is already at that position,
   another `C-a' will bring it to the beginning of the line.
   
   `C-e' will jump to the end of the headline, ignoring the presence
   of tags in the headline.  A second `C-e' will then jump to the
   true end of the line, after any tags.  This also means that, when
   this variable is non-nil, `C-e' also will never jump beyond the
   end of the heading of a folded section, i.e. not after the
   ellipses.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(setq org-special-ctrl-a/e t)
#+END_SRC
** Use query to confirm killing of hidden subtrees
#+BEGIN_SRC emacs-lisp
(setq org-ctrl-k-protect-subtree t)
#+END_SRC
** +Enable support of shift selection of text in org-mode except in special instances.+ Discontinued in favor of C-Space, because I prefer using Shift + arrows for windmove.
+(setq org-support-shift-select t)+
** Override shift + arrows in certain places in favor of windmove
If you want to make the windmove function active in locations where Org mode does not have special functionality on S-<cursor>, add this to your configuration(from [[http://orgmode.org/manual/Conflicts.html][Conflicts - The Org Manual]]):
#+BEGIN_SRC emacs-lisp
;; Make windmove work in org-mode:
          (add-hook 'org-shiftup-final-hook 'windmove-up)
          (add-hook 'org-shiftleft-final-hook 'windmove-left)
          (add-hook 'org-shiftdown-final-hook 'windmove-down)
          (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
** Auto adjust footnotes
#+BEGIN_SRC emacs-lisp
(setq org-footnote-auto-adjust t)
#+END_SRC
** Follow link in orgmode by pressing Enter key
This adds an alternative way to follow urls in orgmode without reaching out for the mouse.
#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC
** Strikethrough for Done tasks
adapted from [[http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/][Sacha Chua's blog]]
#+BEGIN_SRC emacs-lisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen" :strike-through t :weight bold))))
 '(org-headline-done ((t (:foreground "LightSalmon" :strike-through t)))))
#+END_SRC
** Color only the stars for the org mode levels
This is a nice little setting I found while browsing the Customize interface. It removes the color from the org headline levels, only keeping it on the stars. This makes the buffer way less colorful, but I find it more clean that way. Not to mention that because my color theme isn't amongst the most popular ones, the coloring was a bit bizzare, in that the first level was green, the second plain white and the third yellow, which was a bit disorienting, since I'd expect the second level to be colored instead of the third. So I've now removed the color from the text and can focus on the stars for denoting the hierarchy.
#+BEGIN_SRC emacs-lisp
(setq org-level-color-stars-only t)
#+END_SRC
** Custom color for headline levels 2 and 3
In my color theme, headline level 2 used to be plain white, while headline level 3 used to be bold «gold» in color, which was confusing, as I'd expect the inverse. So I took the initiative and customized the colors myself - on the way I decided I preferred level 3 to also be obvious as a headline, and distinguishable from the rest of the text.
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(org-level-2 ((t (:foreground "gold" :weight bold))))
 '(org-level-3 ((t (:foreground "cyan3" :weight bold)))))
#+END_SRC
** Ox Tufte package
A package that exports org files following the [[https://edwardtufte.github.io/tufte-css/][Tufte CSS]] presentation style.
#+BEGIN_SRC emacs-lisp
(require 'ox-tufte)
#+END_SRC
* Undo tree
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
#+END_SRC
Global undo tree mode.
#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC
Define undo and redo keys.\\
M-p for M-previous and M-n for M-next. These might not be the most comfortable of keybindings, but they are the most easily memorable amongst the unbound keys.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-p" 'undo-tree-undo)
(define-key global-map "\M-n" 'undo-tree-redo)
#+END_SRC
* Olivetti mode - Mode for distraction-free writing.
Hide the mode line when enabling olivetti.
#+BEGIN_SRC emacs-lisp
(setq olivetti-hide-mode-line t)
#+END_SRC
Function to turn off the menu bar when olivetti mode is enabled
#+BEGIN_SRC emacs-lisp
(progn
  (defun turn-off-menu-with-olivetti ()
    (menu-bar-mode -1))
  (add-hook 'olivetti-mode-hook 'turn-off-menu-with-olivetti))
#+END_SRC
* Web-search.el package config
** Set the default search provider
#+BEGIN_SRC emacs-lisp
(setq web-search-default-provider "DuckDuckGo")
#+END_SRC
** Add custom search engines
*** Italian verbs
#+BEGIN_SRC emacs-lisp
(push '("Italian Verbs" "https://www.italian-verbs.com/italian-verbs/conjugation.php?parola=%s" "Languages")
      web-search-providers)
#+END_SRC
*** William Whitaker's Latin Dictionary
#+BEGIN_SRC emacs-lisp
(push '("William Whitaker's Latin Dictionary" "http://archives.nd.edu/cgi-bin/wordz.pl?keyword=%s" "Languages")
      web-search-providers)
#+END_SRC
*** William Whitaker's English to Latin
#+BEGIN_SRC emacs-lisp
(push '("William Whitaker's English to Latin" "http://archives.nd.edu/cgi-bin/wordz.pl?english=%s" "Languages")
      web-search-providers)
#+END_SRC
* Emms setup (for soundklaus)
#+BEGIN_SRC emacs-lisp
(require 'emms-setup)
(emms-standard)
(emms-default-players)
#+END_SRC
* Drag-stuff package config
#+BEGIN_SRC emacs-lisp
(require 'drag-stuff)
#+END_SRC
Hook drag-stuff-mode to text-mode and prog-mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'drag-stuff-mode)
(add-hook 'prog-mode-hook 'drag-stuff-mode)
#+END_SRC
Define the keybindings - the default being M- and arrow keys.
#+BEGIN_SRC emacs-lisp
(drag-stuff-define-keys)
#+END_SRC
* Ido mode configuration
Enable Ido Mode\\
A great buffer and file finding completion mode.
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode)
(ido-everywhere)
#+END_SRC
Ido completing-read+\\
Package that makes Ido more ubiquitous.
#+BEGIN_SRC emacs-lisp
(require 'ido-completing-read+)
(ido-ubiquitous-mode 1)
#+END_SRC
Ido yes-or-no\\
Package that enables the use of Ido even for the yes-or-no prompt.
#+BEGIN_SRC emacs-lisp
(require 'ido-yes-or-no)
(ido-yes-or-no-mode 1)
#+END_SRC
Virtual buffers
#+BEGIN_SRC emacs-lisp
(setq ido-use-virtual-buffers (quote auto))
#+END_SRC
* Smex - Ido completion for M-x
#+BEGIN_SRC emacs-lisp
(require 'smex) ; Not needed if you use package.el
  (smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                    ; when Smex is auto-initialized on its first run.
#+END_SRC
Keyboard shortcuts for Smex
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
#+END_SRC
The old M-x keybinding (just in case).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
* Google Translate
[[https://github.com/atykhonov/google-translate][Emacs interface to Google Translate]]. I chose the smooth UI and not the default one, in order to have to remember only one key combination instead of two.
#+BEGIN_SRC emacs-lisp
(require 'google-translate)
(require 'google-translate-smooth-ui)
(global-set-key "\C-ct" 'google-translate-smooth-translate)
#+END_SRC
* ob-translate
[[https://github.com/krisajenkins/ob-translate][link]]\\
Basically the reason for which I installed the aforementioned Google Translate.
The way this works is explained well enough in its README - I'll just add a reminder to myself that I can evaluate the text block to be translated while it is under point and I press C-c C-c.\\
I can also have it export both the string to be translated and the translation result (e.g. to an html file) by adding ~:export both~ to the ~#+BEGIN_SRC translate~ string. More on this [[http://orgmode.org/manual/Exporting-code-blocks.html][here]], [[http://orgmode.org/manual/exports.html][here]] and [[http://orgmode.org/worg/org-contrib/babel/examples/foo.html][here]].\\
If I want this export action to be applied to the whole file, and not just to a specific source block, I need to use the ~#+PROPERTY: header-args~ string at the beginning of the file - see [[http://org-babel.readthedocs.io/en/latest/header-args/#buffer-or-file-level-header-arguments][Header arguments - Org Babel reference card]].
* Typo.el
[[https://github.com/jorgenschaefer/typoel][An emacs extension for typographical editing]]\\
This package allows me to use french guillemets, as is the convention in greek typography.
** Enable typo mode globally
#+BEGIN_SRC emacs-lisp
(typo-global-mode 1)
#+END_SRC
** Hook typo mode to text mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'typo-mode)
#+END_SRC
** Set language template for typo quotemarks
A setting for Greek isn't available, and since I only ever use double quotes, the Italian template seemed the most appropriate to me.\\
«Una faccia, una razza!», after all(as goes the saying emphasizing the similarities of Greeks with the Italians).
#+BEGIN_SRC emacs-lisp
(setq-default typo-language "Italian")
#+END_SRC
* Magit
A very good git manager (the reports of its greatness aren’t overrated at all!).\\
Btw,for those curious (as I was) where the term "porcelain" with which magit is self-described comes from, [[https://stackoverflow.com/questions/6976473/what-does-the-term-porcelain-mean-in-git][here’s]] an answer - the gist of it is that it is a more accessible interface, as opposed to the less user-friendly "plumbing" levels/commands.
** Magit-status keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Emacs-lisp related configuration
** Enable show-paren-mode
This highlights matching parentheses. Turns out it is a global minor mode, and it thus has to be activated for everything or for nothing. The ~show-paren-delay~ option shows the matching parenthese instantaneously when set to 0. The ~show-paren-style~ option set to mixed shows the matching parenthesis when it is visible and highlights the expression when it isn’t.
#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
(setq show-paren-style (quote mixed))
#+END_SRC
** Enable electric-pair-mode
This autocompletes parentheses. It appears to be a global minor mode as well.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
Here is however a trick to disable it from everywhere but lisp-related modes (from [[https://emacs.stackexchange.com/questions/5981/how-to-make-electric-pair-mode-buffer-local][How to make electric-pair-mode buffer local? - Emacs Stack Exchange]]).
#+BEGIN_SRC emacs-lisp
(defvar my-electric-pair-modes '(emacs-lisp-mode lisp-interaction-mode))

(defun my-inhibit-electric-pair-mode (char)
  (not (member major-mode my-electric-pair-modes)))

(setq electric-pair-inhibit-predicate #'my-inhibit-electric-pair-mode)
#+END_SRC
** Litable mode
[[https://github.com/Fuco1/litable][On-the-fly evaluation/substitution of emacs lisp code]]. This is a mode that shows the results of code instantly. Will be nifty to use with my calculator-like lisp-interaction mode…\\
It refuses however to submit to either diminish or dim unfortunately…
#+BEGIN_SRC emacs-lisp
(add-hook 'lisp-interaction-mode-hook 'litable-mode)
#+END_SRC
* HideShow mode
[[https://www.emacswiki.org/emacs/HideShow][Link]]. A nifty minor mode to fold code the same way org-mode headings are folded.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC
Keybindings. The ~<backtab>~ string means Shift+Tab.
#+BEGIN_SRC emacs-lisp
(define-key prog-mode-map (kbd "TAB") 'hs-toggle-hiding)
(define-key prog-mode-map (kbd "<backtab>") 'hs-hide-all)
(define-key prog-mode-map (kbd "<C-tab>") 'hs-show-all)
#+END_SRC
* Basic mode
[[https://github.com/dykstrom/basic-mode][Link]]. This mode deals with coloring and indentation of BASIC code (not with evaluation though sadly). I changed the ~basic-line-number-cols~ parameter so that it will account for the fact that I'll be using line numbers. The ~basic-auto-number~ option adds auto-numbering with an increment of 10.
#+BEGIN_SRC emacs-lisp
(setq basic-line-number-cols 2)
;; auto-numbering
(setq basic-auto-number 10)
#+END_SRC
* Isend mode
[[https://github.com/ffevotte/isend-mode.el][This extension]] interactively sends the content of emacs buffers to ansi-term in a language agnostic way, so I thought it'd be a perfect companion for basic-mode. It works however when a prompt with the language of interest is already present, thus in my case, only with [[http://www.nicholson.com/rhn/basic/][Chipmunk BASIC]] (the other possible choice, [[http://www.vintage-basic.net/][Vintage BASIC]], had a use case of vintbas file.bas and so wasn't fit for my purpose).
#+BEGIN_SRC emacs-lisp
;; Keybindings
(global-set-key (kbd "C-c s") 'isend-send-buffer)
(global-set-key (kbd "C-x z") 'isend-display-buffer)
#+END_SRC
* Regular expressions
There is a standard way regular expressions are written nowadays, and emacs uses a non-standard one, so I enable pcre-mode (from the pcre2el package)
#+BEGIN_SRC emacs-lisp
(pcre-mode)
#+END_SRC
Another useful tip for searching with regex is using M-x list-matching-lines (I found about the existence of that one from [[http://ergoemacs.org/emacs/emacs_regex.html][Xah Lee]]). This finds strings matching the regex, but also shows the rest of the line, thus providing context when necessary.
* Diminish mode and Dim
Diminish mode that cuts off the display of minor modes which I want to work [[https://github.com/myrjola/diminish.el#introduction][discreetly, like janitors]]. Without any arguments, they are hidden entirely from the modeline, otherwise they are simply abbreviated to the specified abbreviation.
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(diminish 'visual-line-mode "Vl")
(diminish 'undo-tree-mode "Ut")
(diminish 'drag-stuff-mode)
(diminish 'typo-mode)
(diminish 'pcre-mode)
#+END_SRC
[[https://github.com/alezost/dim.el][Dim]]. This is similar to diminish, but can also shorten the display of major modes. The problem with it though is that it crams all the abbreviations, regardless of length, next to the name of the unabbreviated mode (while diminish only does so with single character abbreviations), which is why I'm using it in addition to diminish, even through their functionality overlaps.\\
And the reason I decided to try it in the first place is because I find the name of lisp-interaction-mode way too long…
#+BEGIN_SRC emacs-lisp
(dim-major-name 'lisp-interaction-mode "LiN")
(dim-major-name 'markdown-mode "Md")
#+END_SRC
* Ediff
I'm trying to move myself to emacs as much as possible, so I now decided to replace the functionality of [[http://meldmerge.org/][Meld]].\\
This line splits the ediff windows horizontally instead of vertically.
#+BEGIN_SRC emacs-lisp
(setq ediff-split-window-function (quote split-window-horizontally))
#+END_SRC
This one puts the ediff help buffer in the same frame as the rest, as I was a bit bothered by the separate small window it had.
#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function (quote ediff-setup-windows-plain))
#+END_SRC
** Operate ediff through dired
Modified from [[http://oremacs.com/2017/03/18/dired-ediff/][Quickly ediff files from dired · (or emacs]]
#+BEGIN_SRC emacs-lisp
(require 'dired-aux)
;; -*- lexical-binding: t -*-
(defun ora-ediff-files ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (if (<= (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name
                        "file: "
                        (dired-dwim-target-directory)))))
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2)))
      (error "no more than 2 files should be marked"))))
#+END_SRC
The keybinding
#+BEGIN_SRC emacs-lisp
(define-key dired-mode-map "e" 'ora-ediff-files)
#+END_SRC
* Anzu and searching in general
Anzu shows the number of search results in the mode line. When results are found they are shown with a dark green shade, when there are no results the indicator has a red shade. The ~anzu-mode-lighter~ snippet does what Diminish mode would do if it worked with Anzu (which for some reason it doesn't).
#+BEGIN_SRC emacs-lisp
(require 'anzu)
(global-anzu-mode +1)
(set-face-attribute 'anzu-mode-line nil
                    :foreground "green4" :weight 'bold)
(set-face-attribute 'anzu-mode-line-no-match nil
                    :foreground "red3" :weight 'bold)
(setq anzu-mode-lighter "")
#+END_SRC
** Search at point
From [[https://www.emacswiki.org/emacs/SearchAtPoint#toc6][EmacsWiki: Search At Point]]. C-s C-w searches for the string under point, but only goes from the place of the cursor till the end of the word e.g. it might search for «guration» if the cursor is under the g of the word «configuration». This niggle is solved by the following code:
#+BEGIN_SRC emacs-lisp
;; Move to beginning of word before yanking word in isearch-mode.
;; Make C-s C-w and C-r C-w act like Vim's g* and g#, keeping Emacs'
;; C-s C-w [C-w] [C-w]... behaviour.

(require 'thingatpt)

(defun my-isearch-yank-word-or-char-from-beginning ()
  "Move to beginning of word before yanking word in isearch-mode."
  (interactive)
  ;; Making this work after a search string is entered by user
  ;; is too hard to do, so work only when search string is empty.
  (if (= 0 (length isearch-string))
      (beginning-of-thing 'word))
  (isearch-yank-word-or-char)
  ;; Revert to 'isearch-yank-word-or-char for subsequent calls
  (substitute-key-definition 'my-isearch-yank-word-or-char-from-beginning 
			     'isearch-yank-word-or-char
			     isearch-mode-map))

(add-hook 'isearch-mode-hook
 (lambda ()
   "Activate my customized Isearch word yank command."
   (substitute-key-definition 'isearch-yank-word-or-char 
			      'my-isearch-yank-word-or-char-from-beginning
			      isearch-mode-map)))
#+END_SRC
* Iedit
[[https://www.emacswiki.org/emacs/Iedit][EmacsWiki: Iedit]].This package allows to replace all occurences of a string under point simultaneously.
#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC
